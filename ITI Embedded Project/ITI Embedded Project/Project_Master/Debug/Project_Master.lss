
Project_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002910  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00800060  00002910  000029a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800148  00800148  00002a8c  2**0
                  ALLOC
  3 .stab         0000261c  00000000  00000000  00002a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001041  00000000  00000000  000050a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000060e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006229  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006399  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a069  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a837  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__vector_1>
       8:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 34       	cpi	r26, 0x48	; 72
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e4       	ldi	r26, 0x48	; 72
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 34       	cpi	r26, 0x4B	; 75
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 77 06 	call	0xcee	; 0xcee <main>
      8a:	0c 94 86 14 	jmp	0x290c	; 0x290c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e3       	ldi	r26, 0x3B	; 59
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e3       	ldi	r24, 0x3B	; 59
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 36 14 	jmp	0x286c	; 0x286c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TWI_init_master>:
unsigned char write_data=0x01, recv_data;



void TWI_init_master(void) // Function to initialize master
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	TWBR=0x01; // Bit rate
     b4e:	e0 e2       	ldi	r30, 0x20	; 32
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	80 83       	st	Z, r24
	TWSR=(0<<TWPS1)|(0<<TWPS0); // Setting prescalar bits
     b56:	e1 e2       	ldi	r30, 0x21	; 33
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	10 82       	st	Z, r1
	// SCL freq= F_CPU/(16+2(TWBR).4^TWPS)
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <TWI_start>:

void TWI_start(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     b6a:	e6 e5       	ldi	r30, 0x56	; 86
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	84 ea       	ldi	r24, 0xA4	; 164
     b70:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // Wait till start condition is transmitted
     b72:	e6 e5       	ldi	r30, 0x56	; 86
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	88 23       	and	r24, r24
     b7a:	dc f7       	brge	.-10     	; 0xb72 <TWI_start+0x10>
	while((TWSR & 0xF8)!= 0x08); // Check for the acknowledgement
     b7c:	e1 e2       	ldi	r30, 0x21	; 33
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 2f       	mov	r24, r24
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	88 7f       	andi	r24, 0xF8	; 248
     b88:	90 70       	andi	r25, 0x00	; 0
     b8a:	88 30       	cpi	r24, 0x08	; 8
     b8c:	91 05       	cpc	r25, r1
     b8e:	b1 f7       	brne	.-20     	; 0xb7c <TWI_start+0x1a>
}
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	08 95       	ret

00000b96 <TWI_repeated_start>:

void TWI_repeated_start(void)
{
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     b9e:	e6 e5       	ldi	r30, 0x56	; 86
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	84 ea       	ldi	r24, 0xA4	; 164
     ba4:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // wait till restart condition is transmitted
     ba6:	e6 e5       	ldi	r30, 0x56	; 86
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	88 23       	and	r24, r24
     bae:	dc f7       	brge	.-10     	; 0xba6 <TWI_repeated_start+0x10>
	while((TWSR & 0xF8)!= 0x10); // Check for the acknoledgement
     bb0:	e1 e2       	ldi	r30, 0x21	; 33
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	88 2f       	mov	r24, r24
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	88 7f       	andi	r24, 0xF8	; 248
     bbc:	90 70       	andi	r25, 0x00	; 0
     bbe:	80 31       	cpi	r24, 0x10	; 16
     bc0:	91 05       	cpc	r25, r1
     bc2:	b1 f7       	brne	.-20     	; 0xbb0 <TWI_repeated_start+0x1a>
}
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <TWI_write_address>:

void TWI_write_address(unsigned char data)
{
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	0f 92       	push	r0
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data; // Address and write instruction
     bd6:	e3 e2       	ldi	r30, 0x23	; 35
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
     bde:	e6 e5       	ldi	r30, 0x56	; 86
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	84 e8       	ldi	r24, 0x84	; 132
     be4:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
     be6:	e6 e5       	ldi	r30, 0x56	; 86
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	88 23       	and	r24, r24
     bee:	dc f7       	brge	.-10     	; 0xbe6 <TWI_write_address+0x1c>
	while((TWSR & 0xF8)!= 0x18);  // Check for the acknoledgement
     bf0:	e1 e2       	ldi	r30, 0x21	; 33
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	88 2f       	mov	r24, r24
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	88 7f       	andi	r24, 0xF8	; 248
     bfc:	90 70       	andi	r25, 0x00	; 0
     bfe:	88 31       	cpi	r24, 0x18	; 24
     c00:	91 05       	cpc	r25, r1
     c02:	b1 f7       	brne	.-20     	; 0xbf0 <TWI_write_address+0x26>
}
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <TWI_read_address>:

void TWI_read_address(unsigned char data)
{
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	0f 92       	push	r0
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data; // Address and read instruction
     c18:	e3 e2       	ldi	r30, 0x23	; 35
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
     c20:	e6 e5       	ldi	r30, 0x56	; 86
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	84 e8       	ldi	r24, 0x84	; 132
     c26:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
     c28:	e6 e5       	ldi	r30, 0x56	; 86
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	88 23       	and	r24, r24
     c30:	dc f7       	brge	.-10     	; 0xc28 <TWI_read_address+0x1c>
	while((TWSR & 0xF8)!= 0x40);  // Check for the acknoledgement
     c32:	e1 e2       	ldi	r30, 0x21	; 33
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	88 2f       	mov	r24, r24
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	88 7f       	andi	r24, 0xF8	; 248
     c3e:	90 70       	andi	r25, 0x00	; 0
     c40:	80 34       	cpi	r24, 0x40	; 64
     c42:	91 05       	cpc	r25, r1
     c44:	b1 f7       	brne	.-20     	; 0xc32 <TWI_read_address+0x26>
}
     c46:	0f 90       	pop	r0
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <TWI_write_data>:

void TWI_write_data(unsigned char data)
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	0f 92       	push	r0
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data; // put data in TWDR
     c5a:	e3 e2       	ldi	r30, 0x23	; 35
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
     c62:	e6 e5       	ldi	r30, 0x56	; 86
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	84 e8       	ldi	r24, 0x84	; 132
     c68:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
     c6a:	e6 e5       	ldi	r30, 0x56	; 86
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	88 23       	and	r24, r24
     c72:	dc f7       	brge	.-10     	; 0xc6a <TWI_write_data+0x1c>
	while((TWSR & 0xF8) != 0x28); // Check for the acknoledgement
     c74:	e1 e2       	ldi	r30, 0x21	; 33
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	88 2f       	mov	r24, r24
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	88 7f       	andi	r24, 0xF8	; 248
     c80:	90 70       	andi	r25, 0x00	; 0
     c82:	88 32       	cpi	r24, 0x28	; 40
     c84:	91 05       	cpc	r25, r1
     c86:	b1 f7       	brne	.-20     	; 0xc74 <TWI_write_data+0x26>
}
     c88:	0f 90       	pop	r0
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <TWI_read_data>:

void TWI_read_data(void)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
     c98:	e6 e5       	ldi	r30, 0x56	; 86
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	84 e8       	ldi	r24, 0x84	; 132
     c9e:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
     ca0:	e6 e5       	ldi	r30, 0x56	; 86
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	88 23       	and	r24, r24
     ca8:	dc f7       	brge	.-10     	; 0xca0 <TWI_read_data+0x10>
	while((TWSR & 0xF8) != 0x58); // Check for the acknoledgement
     caa:	e1 e2       	ldi	r30, 0x21	; 33
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	88 7f       	andi	r24, 0xF8	; 248
     cb6:	90 70       	andi	r25, 0x00	; 0
     cb8:	88 35       	cpi	r24, 0x58	; 88
     cba:	91 05       	cpc	r25, r1
     cbc:	b1 f7       	brne	.-20     	; 0xcaa <TWI_read_data+0x1a>
	recv_data=TWDR;
     cbe:	e3 e2       	ldi	r30, 0x23	; 35
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	80 93 4a 01 	sts	0x014A, r24
	PORTB=recv_data;
     cc8:	e8 e3       	ldi	r30, 0x38	; 56
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 91 4a 01 	lds	r24, 0x014A
     cd0:	80 83       	st	Z, r24
}
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <TWI_stop>:
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
	while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
}
*/
void TWI_stop(void)  //Author Ahmed Abdelghaffar
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Clear TWI interrupt flag, Put stop condition on SDA,Enable TWI
     ce0:	e6 e5       	ldi	r30, 0x56	; 86
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	84 e9       	ldi	r24, 0x94	; 148
     ce6:	80 83       	st	Z, r24
	return;
}
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <main>:
s32 LCD_ReadInput();

u8 current_screen = 1;
u8 interrupt = 0;
int main(void)
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	ed 97       	sbiw	r28, 0x3d	; 61
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
	/*The reset button using interrupt*/

	/***************************interrupts****************************/
	/*INT0 input  */
	GICR = 1<<INT0 | 1<<INT1;		/* Enable INT0 and INT1*/
     d02:	eb e5       	ldi	r30, 0x5B	; 91
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 ec       	ldi	r24, 0xC0	; 192
     d08:	80 83       	st	Z, r24
	MCUCR = 1<<ISC01 | 1<<ISC00;  /* Trigger INT0 on rising edge */
     d0a:	e5 e5       	ldi	r30, 0x55	; 85
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	83 e0       	ldi	r24, 0x03	; 3
     d10:	80 83       	st	Z, r24
	//SET_BIT(SREG,I_BIT);     // Doesn't work as one of the interrupts will work and not the two of them so we use sei
	sei();			/* Enable Global Interrupt ********From Google */
     d12:	78 94       	sei

	CLR_BIT(DDRD,PD2);
     d14:	a1 e3       	ldi	r26, 0x31	; 49
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e1 e3       	ldi	r30, 0x31	; 49
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8b 7f       	andi	r24, 0xFB	; 251
     d20:	8c 93       	st	X, r24
	SET_BIT(PIND,PD2);
     d22:	a0 e3       	ldi	r26, 0x30	; 48
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e0 e3       	ldi	r30, 0x30	; 48
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	84 60       	ori	r24, 0x04	; 4
     d2e:	8c 93       	st	X, r24

	CLR_BIT(DDRD,PD3);
     d30:	a1 e3       	ldi	r26, 0x31	; 49
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e1 e3       	ldi	r30, 0x31	; 49
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	87 7f       	andi	r24, 0xF7	; 247
     d3c:	8c 93       	st	X, r24
	SET_BIT(PIND,PD3);
     d3e:	a0 e3       	ldi	r26, 0x30	; 48
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e0 e3       	ldi	r30, 0x30	; 48
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	88 60       	ori	r24, 0x08	; 8
     d4a:	8c 93       	st	X, r24
	/******************************************************************/



	/**/
	LCD_init();
     d4c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LCD_init>
	UART_init();
     d50:	0e 94 06 13 	call	0x260c	; 0x260c <UART_init>
	TWI_init_master();
     d54:	0e 94 a3 05 	call	0xb46	; 0xb46 <TWI_init_master>

	SET_BIT(PORTC,PC2);
     d58:	a5 e3       	ldi	r26, 0x35	; 53
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e5 e3       	ldi	r30, 0x35	; 53
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	84 60       	ori	r24, 0x04	; 4
     d64:	8c 93       	st	X, r24
	SET_BIT(DDRC,PC2);
     d66:	a4 e3       	ldi	r26, 0x34	; 52
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e4 e3       	ldi	r30, 0x34	; 52
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	84 60       	ori	r24, 0x04	; 4
     d72:	8c 93       	st	X, r24


	SET_BIT(DDRC,PC7);
     d74:	a4 e3       	ldi	r26, 0x34	; 52
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e4 e3       	ldi	r30, 0x34	; 52
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	80 68       	ori	r24, 0x80	; 128
     d80:	8c 93       	st	X, r24
	CLR_BIT(PORTC,PC7);
     d82:	a5 e3       	ldi	r26, 0x35	; 53
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e5 e3       	ldi	r30, 0x35	; 53
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8f 77       	andi	r24, 0x7F	; 127
     d8e:	8c 93       	st	X, r24


	s8 key;
	s16 speed = 0;
     d90:	1c ae       	std	Y+60, r1	; 0x3c
     d92:	1b ae       	std	Y+59, r1	; 0x3b
	s16 led = 0;
     d94:	1a ae       	std	Y+58, r1	; 0x3a
     d96:	19 ae       	std	Y+57, r1	; 0x39
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	a8 e4       	ldi	r26, 0x48	; 72
     d9e:	b3 e4       	ldi	r27, 0x43	; 67
     da0:	8d ab       	std	Y+53, r24	; 0x35
     da2:	9e ab       	std	Y+54, r25	; 0x36
     da4:	af ab       	std	Y+55, r26	; 0x37
     da6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da8:	6d a9       	ldd	r22, Y+53	; 0x35
     daa:	7e a9       	ldd	r23, Y+54	; 0x36
     dac:	8f a9       	ldd	r24, Y+55	; 0x37
     dae:	98 ad       	ldd	r25, Y+56	; 0x38
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	4a e7       	ldi	r20, 0x7A	; 122
     db6:	53 e4       	ldi	r21, 0x43	; 67
     db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	89 ab       	std	Y+49, r24	; 0x31
     dc2:	9a ab       	std	Y+50, r25	; 0x32
     dc4:	ab ab       	std	Y+51, r26	; 0x33
     dc6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     dc8:	69 a9       	ldd	r22, Y+49	; 0x31
     dca:	7a a9       	ldd	r23, Y+50	; 0x32
     dcc:	8b a9       	ldd	r24, Y+51	; 0x33
     dce:	9c a9       	ldd	r25, Y+52	; 0x34
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	40 e8       	ldi	r20, 0x80	; 128
     dd6:	5f e3       	ldi	r21, 0x3F	; 63
     dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ddc:	88 23       	and	r24, r24
     dde:	2c f4       	brge	.+10     	; 0xdea <main+0xfc>
		__ticks = 1;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	98 ab       	std	Y+48, r25	; 0x30
     de6:	8f a7       	std	Y+47, r24	; 0x2f
     de8:	3f c0       	rjmp	.+126    	; 0xe68 <main+0x17a>
	else if (__tmp > 65535)
     dea:	69 a9       	ldd	r22, Y+49	; 0x31
     dec:	7a a9       	ldd	r23, Y+50	; 0x32
     dee:	8b a9       	ldd	r24, Y+51	; 0x33
     df0:	9c a9       	ldd	r25, Y+52	; 0x34
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	3f ef       	ldi	r19, 0xFF	; 255
     df6:	4f e7       	ldi	r20, 0x7F	; 127
     df8:	57 e4       	ldi	r21, 0x47	; 71
     dfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dfe:	18 16       	cp	r1, r24
     e00:	4c f5       	brge	.+82     	; 0xe54 <main+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e02:	6d a9       	ldd	r22, Y+53	; 0x35
     e04:	7e a9       	ldd	r23, Y+54	; 0x36
     e06:	8f a9       	ldd	r24, Y+55	; 0x37
     e08:	98 ad       	ldd	r25, Y+56	; 0x38
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e2       	ldi	r20, 0x20	; 32
     e10:	51 e4       	ldi	r21, 0x41	; 65
     e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	bc 01       	movw	r22, r24
     e1c:	cd 01       	movw	r24, r26
     e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	98 ab       	std	Y+48, r25	; 0x30
     e28:	8f a7       	std	Y+47, r24	; 0x2f
     e2a:	0f c0       	rjmp	.+30     	; 0xe4a <main+0x15c>
     e2c:	89 e1       	ldi	r24, 0x19	; 25
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	9e a7       	std	Y+46, r25	; 0x2e
     e32:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e34:	8d a5       	ldd	r24, Y+45	; 0x2d
     e36:	9e a5       	ldd	r25, Y+46	; 0x2e
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	f1 f7       	brne	.-4      	; 0xe38 <main+0x14a>
     e3c:	9e a7       	std	Y+46, r25	; 0x2e
     e3e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e40:	8f a5       	ldd	r24, Y+47	; 0x2f
     e42:	98 a9       	ldd	r25, Y+48	; 0x30
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	98 ab       	std	Y+48, r25	; 0x30
     e48:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e4c:	98 a9       	ldd	r25, Y+48	; 0x30
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	69 f7       	brne	.-38     	; 0xe2c <main+0x13e>
     e52:	14 c0       	rjmp	.+40     	; 0xe7c <main+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e54:	69 a9       	ldd	r22, Y+49	; 0x31
     e56:	7a a9       	ldd	r23, Y+50	; 0x32
     e58:	8b a9       	ldd	r24, Y+51	; 0x33
     e5a:	9c a9       	ldd	r25, Y+52	; 0x34
     e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	98 ab       	std	Y+48, r25	; 0x30
     e66:	8f a7       	std	Y+47, r24	; 0x2f
     e68:	8f a5       	ldd	r24, Y+47	; 0x2f
     e6a:	98 a9       	ldd	r25, Y+48	; 0x30
     e6c:	9c a7       	std	Y+44, r25	; 0x2c
     e6e:	8b a7       	std	Y+43, r24	; 0x2b
     e70:	8b a5       	ldd	r24, Y+43	; 0x2b
     e72:	9c a5       	ldd	r25, Y+44	; 0x2c
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <main+0x186>
     e78:	9c a7       	std	Y+44, r25	; 0x2c
     e7a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200); //if system failure happen more than one time to avoid displaying control lighting
	if(interrupt == 0 && GET_BIT(PIND,PD2) == 1)
     e7c:	80 91 49 01 	lds	r24, 0x0149
     e80:	88 23       	and	r24, r24
     e82:	d9 f4       	brne	.+54     	; 0xeba <main+0x1cc>
     e84:	e0 e3       	ldi	r30, 0x30	; 48
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	86 95       	lsr	r24
     e8c:	86 95       	lsr	r24
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	81 70       	andi	r24, 0x01	; 1
     e94:	90 70       	andi	r25, 0x00	; 0
     e96:	88 23       	and	r24, r24
     e98:	81 f0       	breq	.+32     	; 0xeba <main+0x1cc>
	{
		LCD_goToRowColumn(0,0);
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	0e 94 37 12 	call	0x246e	; 0x246e <LCD_goToRowColumn>
		LCD_displayString("1 Control motor");
     ea2:	80 e6       	ldi	r24, 0x60	; 96
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
		LCD_goToRowColumn(1,0);
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	0e 94 37 12 	call	0x246e	; 0x246e <LCD_goToRowColumn>
		LCD_displayString("2 Control Lighting");
     eb2:	80 e7       	ldi	r24, 0x70	; 112
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
	}
	while(1)
	{
		if (current_screen == 1 && interrupt == 1 && GET_BIT(PIND,PD2) == 1)
     eba:	80 91 46 01 	lds	r24, 0x0146
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	19 f5       	brne	.+70     	; 0xf08 <main+0x21a>
     ec2:	80 91 49 01 	lds	r24, 0x0149
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	f9 f4       	brne	.+62     	; 0xf08 <main+0x21a>
     eca:	e0 e3       	ldi	r30, 0x30	; 48
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	86 95       	lsr	r24
     ed2:	86 95       	lsr	r24
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	81 70       	andi	r24, 0x01	; 1
     eda:	90 70       	andi	r25, 0x00	; 0
     edc:	88 23       	and	r24, r24
     ede:	a1 f0       	breq	.+40     	; 0xf08 <main+0x21a>
		{
			LCD_clearScreen();
     ee0:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_clearScreen>
			LCD_goToRowColumn(0,0);
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	0e 94 37 12 	call	0x246e	; 0x246e <LCD_goToRowColumn>
			LCD_displayString("1 Control motor");
     eec:	80 e6       	ldi	r24, 0x60	; 96
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
			LCD_goToRowColumn(1,0);
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	0e 94 37 12 	call	0x246e	; 0x246e <LCD_goToRowColumn>
			LCD_displayString("2 Control Lighting");
     efc:	80 e7       	ldi	r24, 0x70	; 112
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
			interrupt = 0;
     f04:	10 92 49 01 	sts	0x0149, r1
		}
		if(GET_BIT(PIND,PD2) == 0)
     f08:	e0 e3       	ldi	r30, 0x30	; 48
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	86 95       	lsr	r24
     f10:	86 95       	lsr	r24
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	81 70       	andi	r24, 0x01	; 1
     f18:	90 70       	andi	r25, 0x00	; 0
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	09 f0       	breq	.+2      	; 0xf20 <main+0x232>
     f1e:	8b c0       	rjmp	.+278    	; 0x1036 <main+0x348>
		{
			LCD_goToRowColumn20(0,0);
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
			LCD_displayString("System Failure");
     f28:	83 e8       	ldi	r24, 0x83	; 131
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
			UART_sendByte(0);
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	0e 94 26 13 	call	0x264c	; 0x264c <UART_sendByte>
			SET_BIT(PORTC,PC7);
     f36:	a5 e3       	ldi	r26, 0x35	; 53
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e5 e3       	ldi	r30, 0x35	; 53
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 68       	ori	r24, 0x80	; 128
     f42:	8c 93       	st	X, r24
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	aa e7       	ldi	r26, 0x7A	; 122
     f4a:	b3 e4       	ldi	r27, 0x43	; 67
     f4c:	8f a3       	std	Y+39, r24	; 0x27
     f4e:	98 a7       	std	Y+40, r25	; 0x28
     f50:	a9 a7       	std	Y+41, r26	; 0x29
     f52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f54:	6f a1       	ldd	r22, Y+39	; 0x27
     f56:	78 a5       	ldd	r23, Y+40	; 0x28
     f58:	89 a5       	ldd	r24, Y+41	; 0x29
     f5a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	4a e7       	ldi	r20, 0x7A	; 122
     f62:	53 e4       	ldi	r21, 0x43	; 67
     f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	8b a3       	std	Y+35, r24	; 0x23
     f6e:	9c a3       	std	Y+36, r25	; 0x24
     f70:	ad a3       	std	Y+37, r26	; 0x25
     f72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f74:	6b a1       	ldd	r22, Y+35	; 0x23
     f76:	7c a1       	ldd	r23, Y+36	; 0x24
     f78:	8d a1       	ldd	r24, Y+37	; 0x25
     f7a:	9e a1       	ldd	r25, Y+38	; 0x26
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e8       	ldi	r20, 0x80	; 128
     f82:	5f e3       	ldi	r21, 0x3F	; 63
     f84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f88:	88 23       	and	r24, r24
     f8a:	2c f4       	brge	.+10     	; 0xf96 <main+0x2a8>
		__ticks = 1;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	9a a3       	std	Y+34, r25	; 0x22
     f92:	89 a3       	std	Y+33, r24	; 0x21
     f94:	3f c0       	rjmp	.+126    	; 0x1014 <main+0x326>
	else if (__tmp > 65535)
     f96:	6b a1       	ldd	r22, Y+35	; 0x23
     f98:	7c a1       	ldd	r23, Y+36	; 0x24
     f9a:	8d a1       	ldd	r24, Y+37	; 0x25
     f9c:	9e a1       	ldd	r25, Y+38	; 0x26
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	3f ef       	ldi	r19, 0xFF	; 255
     fa2:	4f e7       	ldi	r20, 0x7F	; 127
     fa4:	57 e4       	ldi	r21, 0x47	; 71
     fa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     faa:	18 16       	cp	r1, r24
     fac:	4c f5       	brge	.+82     	; 0x1000 <main+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fae:	6f a1       	ldd	r22, Y+39	; 0x27
     fb0:	78 a5       	ldd	r23, Y+40	; 0x28
     fb2:	89 a5       	ldd	r24, Y+41	; 0x29
     fb4:	9a a5       	ldd	r25, Y+42	; 0x2a
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e2       	ldi	r20, 0x20	; 32
     fbc:	51 e4       	ldi	r21, 0x41	; 65
     fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	bc 01       	movw	r22, r24
     fc8:	cd 01       	movw	r24, r26
     fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	9a a3       	std	Y+34, r25	; 0x22
     fd4:	89 a3       	std	Y+33, r24	; 0x21
     fd6:	0f c0       	rjmp	.+30     	; 0xff6 <main+0x308>
     fd8:	89 e1       	ldi	r24, 0x19	; 25
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	98 a3       	std	Y+32, r25	; 0x20
     fde:	8f 8f       	std	Y+31, r24	; 0x1f
     fe0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fe2:	98 a1       	ldd	r25, Y+32	; 0x20
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <main+0x2f6>
     fe8:	98 a3       	std	Y+32, r25	; 0x20
     fea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fec:	89 a1       	ldd	r24, Y+33	; 0x21
     fee:	9a a1       	ldd	r25, Y+34	; 0x22
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	9a a3       	std	Y+34, r25	; 0x22
     ff4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff6:	89 a1       	ldd	r24, Y+33	; 0x21
     ff8:	9a a1       	ldd	r25, Y+34	; 0x22
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	69 f7       	brne	.-38     	; 0xfd8 <main+0x2ea>
     ffe:	14 c0       	rjmp	.+40     	; 0x1028 <main+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1000:	6b a1       	ldd	r22, Y+35	; 0x23
    1002:	7c a1       	ldd	r23, Y+36	; 0x24
    1004:	8d a1       	ldd	r24, Y+37	; 0x25
    1006:	9e a1       	ldd	r25, Y+38	; 0x26
    1008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	9a a3       	std	Y+34, r25	; 0x22
    1012:	89 a3       	std	Y+33, r24	; 0x21
    1014:	89 a1       	ldd	r24, Y+33	; 0x21
    1016:	9a a1       	ldd	r25, Y+34	; 0x22
    1018:	9e 8f       	std	Y+30, r25	; 0x1e
    101a:	8d 8f       	std	Y+29, r24	; 0x1d
    101c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    101e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <main+0x332>
    1024:	9e 8f       	std	Y+30, r25	; 0x1e
    1026:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(250);
			CLR_BIT(PORTC,PC7);
    1028:	a5 e3       	ldi	r26, 0x35	; 53
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e5 e3       	ldi	r30, 0x35	; 53
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8f 77       	andi	r24, 0x7F	; 127
    1034:	8c 93       	st	X, r24
		}
		if(interrupt == 0)
    1036:	80 91 49 01 	lds	r24, 0x0149
    103a:	88 23       	and	r24, r24
    103c:	19 f4       	brne	.+6      	; 0x1044 <main+0x356>
		{
			key = KeyPad_getPressedKey();
    103e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <KeyPad_getPressedKey>
    1042:	8d af       	std	Y+61, r24	; 0x3d
		}
		if(key == 1 || ((key == -1 && current_screen == 2) && GET_BIT(PIND,PD2) == 1))
    1044:	8d ad       	ldd	r24, Y+61	; 0x3d
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	a9 f0       	breq	.+42     	; 0x1074 <main+0x386>
    104a:	8d ad       	ldd	r24, Y+61	; 0x3d
    104c:	8f 3f       	cpi	r24, 0xFF	; 255
    104e:	09 f0       	breq	.+2      	; 0x1052 <main+0x364>
    1050:	f1 c0       	rjmp	.+482    	; 0x1234 <main+0x546>
    1052:	80 91 46 01 	lds	r24, 0x0146
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	09 f0       	breq	.+2      	; 0x105c <main+0x36e>
    105a:	ec c0       	rjmp	.+472    	; 0x1234 <main+0x546>
    105c:	e0 e3       	ldi	r30, 0x30	; 48
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	86 95       	lsr	r24
    1064:	86 95       	lsr	r24
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	81 70       	andi	r24, 0x01	; 1
    106c:	90 70       	andi	r25, 0x00	; 0
    106e:	88 23       	and	r24, r24
    1070:	09 f4       	brne	.+2      	; 0x1074 <main+0x386>
    1072:	e0 c0       	rjmp	.+448    	; 0x1234 <main+0x546>
		{
			LCD_clearScreen();
    1074:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_clearScreen>
			LCD_goToRowColumn(0,0);
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	0e 94 37 12 	call	0x246e	; 0x246e <LCD_goToRowColumn>
			LCD_displayString("Speed :");
    1080:	82 e9       	ldi	r24, 0x92	; 146
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
			current_screen = 2;
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	80 93 46 01 	sts	0x0146, r24
			interrupt = 0;
    108e:	10 92 49 01 	sts	0x0149, r1
			speed = LCD_ReadInput();
    1092:	0e 94 27 0a 	call	0x144e	; 0x144e <LCD_ReadInput>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	9c af       	std	Y+60, r25	; 0x3c
    109c:	8b af       	std	Y+59, r24	; 0x3b
			if(speed != -1)
    109e:	8b ad       	ldd	r24, Y+59	; 0x3b
    10a0:	9c ad       	ldd	r25, Y+60	; 0x3c
    10a2:	2f ef       	ldi	r18, 0xFF	; 255
    10a4:	8f 3f       	cpi	r24, 0xFF	; 255
    10a6:	92 07       	cpc	r25, r18
    10a8:	09 f4       	brne	.+2      	; 0x10ac <main+0x3be>
    10aa:	07 cf       	rjmp	.-498    	; 0xeba <main+0x1cc>
			{
				if (speed >100)
    10ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    10ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    10b0:	85 36       	cpi	r24, 0x65	; 101
    10b2:	91 05       	cpc	r25, r1
    10b4:	fc f0       	brlt	.+62     	; 0x10f4 <main+0x406>
				{
					LCD_clearScreen();
    10b6:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_clearScreen>
					LCD_displayString("Invalid speed ");
    10ba:	8a e9       	ldi	r24, 0x9A	; 154
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
					LCD_goToRowColumn20(1,0);
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
					LCD_displayString("to go back enter ");
    10ca:	89 ea       	ldi	r24, 0xA9	; 169
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
					LCD_goToRowColumn20(2,0);
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
					LCD_displayString("1 to control motor");
    10da:	8b eb       	ldi	r24, 0xBB	; 187
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
					LCD_goToRowColumn20(3,0);
    10e2:	83 e0       	ldi	r24, 0x03	; 3
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
					LCD_displayString("2 to control light");
    10ea:	8e ec       	ldi	r24, 0xCE	; 206
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
    10f2:	e3 ce       	rjmp	.-570    	; 0xeba <main+0x1cc>
				}
				else
				{
					LCD_displayString(" %");
    10f4:	81 ee       	ldi	r24, 0xE1	; 225
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
					LCD_goToRowColumn20(1,0);
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
					LCD_displayString("to go back enter ");
    1104:	89 ea       	ldi	r24, 0xA9	; 169
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
					LCD_goToRowColumn20(2,0);
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
					LCD_displayString("1 to control motor");
    1114:	8b eb       	ldi	r24, 0xBB	; 187
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
					LCD_goToRowColumn20(3,0);
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
					LCD_displayString("2 to control light");
    1124:	8e ec       	ldi	r24, 0xCE	; 206
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
					/*Control the speed using UART*/
					UART_sendByte(speed);
    112c:	8b ad       	ldd	r24, Y+59	; 0x3b
    112e:	0e 94 26 13 	call	0x264c	; 0x264c <UART_sendByte>
					SET_BIT(PORTC,PC7);
    1132:	a5 e3       	ldi	r26, 0x35	; 53
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e5 e3       	ldi	r30, 0x35	; 53
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	80 68       	ori	r24, 0x80	; 128
    113e:	8c 93       	st	X, r24
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	aa e7       	ldi	r26, 0x7A	; 122
    1146:	b3 e4       	ldi	r27, 0x43	; 67
    1148:	89 8f       	std	Y+25, r24	; 0x19
    114a:	9a 8f       	std	Y+26, r25	; 0x1a
    114c:	ab 8f       	std	Y+27, r26	; 0x1b
    114e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1150:	69 8d       	ldd	r22, Y+25	; 0x19
    1152:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1154:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1156:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	4a e7       	ldi	r20, 0x7A	; 122
    115e:	53 e4       	ldi	r21, 0x43	; 67
    1160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	8d 8b       	std	Y+21, r24	; 0x15
    116a:	9e 8b       	std	Y+22, r25	; 0x16
    116c:	af 8b       	std	Y+23, r26	; 0x17
    116e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1170:	6d 89       	ldd	r22, Y+21	; 0x15
    1172:	7e 89       	ldd	r23, Y+22	; 0x16
    1174:	8f 89       	ldd	r24, Y+23	; 0x17
    1176:	98 8d       	ldd	r25, Y+24	; 0x18
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e8       	ldi	r20, 0x80	; 128
    117e:	5f e3       	ldi	r21, 0x3F	; 63
    1180:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1184:	88 23       	and	r24, r24
    1186:	2c f4       	brge	.+10     	; 0x1192 <main+0x4a4>
		__ticks = 1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9c 8b       	std	Y+20, r25	; 0x14
    118e:	8b 8b       	std	Y+19, r24	; 0x13
    1190:	3f c0       	rjmp	.+126    	; 0x1210 <main+0x522>
	else if (__tmp > 65535)
    1192:	6d 89       	ldd	r22, Y+21	; 0x15
    1194:	7e 89       	ldd	r23, Y+22	; 0x16
    1196:	8f 89       	ldd	r24, Y+23	; 0x17
    1198:	98 8d       	ldd	r25, Y+24	; 0x18
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	3f ef       	ldi	r19, 0xFF	; 255
    119e:	4f e7       	ldi	r20, 0x7F	; 127
    11a0:	57 e4       	ldi	r21, 0x47	; 71
    11a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11a6:	18 16       	cp	r1, r24
    11a8:	4c f5       	brge	.+82     	; 0x11fc <main+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11aa:	69 8d       	ldd	r22, Y+25	; 0x19
    11ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e2       	ldi	r20, 0x20	; 32
    11b8:	51 e4       	ldi	r21, 0x41	; 65
    11ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	9c 8b       	std	Y+20, r25	; 0x14
    11d0:	8b 8b       	std	Y+19, r24	; 0x13
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <main+0x504>
    11d4:	89 e1       	ldi	r24, 0x19	; 25
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	9a 8b       	std	Y+18, r25	; 0x12
    11da:	89 8b       	std	Y+17, r24	; 0x11
    11dc:	89 89       	ldd	r24, Y+17	; 0x11
    11de:	9a 89       	ldd	r25, Y+18	; 0x12
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <main+0x4f2>
    11e4:	9a 8b       	std	Y+18, r25	; 0x12
    11e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ea:	9c 89       	ldd	r25, Y+20	; 0x14
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	9c 8b       	std	Y+20, r25	; 0x14
    11f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f2:	8b 89       	ldd	r24, Y+19	; 0x13
    11f4:	9c 89       	ldd	r25, Y+20	; 0x14
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	69 f7       	brne	.-38     	; 0x11d4 <main+0x4e6>
    11fa:	14 c0       	rjmp	.+40     	; 0x1224 <main+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fc:	6d 89       	ldd	r22, Y+21	; 0x15
    11fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1200:	8f 89       	ldd	r24, Y+23	; 0x17
    1202:	98 8d       	ldd	r25, Y+24	; 0x18
    1204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	9c 8b       	std	Y+20, r25	; 0x14
    120e:	8b 8b       	std	Y+19, r24	; 0x13
    1210:	8b 89       	ldd	r24, Y+19	; 0x13
    1212:	9c 89       	ldd	r25, Y+20	; 0x14
    1214:	98 8b       	std	Y+16, r25	; 0x10
    1216:	8f 87       	std	Y+15, r24	; 0x0f
    1218:	8f 85       	ldd	r24, Y+15	; 0x0f
    121a:	98 89       	ldd	r25, Y+16	; 0x10
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <main+0x52e>
    1220:	98 8b       	std	Y+16, r25	; 0x10
    1222:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(250);
					CLR_BIT(PORTC,PC7);
    1224:	a5 e3       	ldi	r26, 0x35	; 53
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e5 e3       	ldi	r30, 0x35	; 53
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	8f 77       	andi	r24, 0x7F	; 127
    1230:	8c 93       	st	X, r24
    1232:	43 ce       	rjmp	.-890    	; 0xeba <main+0x1cc>
				}

			}

		}
		else if(key == 2 || ((interrupt == 1 && current_screen == 3) && GET_BIT(PIND,PD2) == 1))
    1234:	8d ad       	ldd	r24, Y+61	; 0x3d
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	b1 f0       	breq	.+44     	; 0x1266 <main+0x578>
    123a:	80 91 49 01 	lds	r24, 0x0149
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	09 f0       	breq	.+2      	; 0x1244 <main+0x556>
    1242:	3b ce       	rjmp	.-906    	; 0xeba <main+0x1cc>
    1244:	80 91 46 01 	lds	r24, 0x0146
    1248:	83 30       	cpi	r24, 0x03	; 3
    124a:	09 f0       	breq	.+2      	; 0x124e <main+0x560>
    124c:	36 ce       	rjmp	.-916    	; 0xeba <main+0x1cc>
    124e:	e0 e3       	ldi	r30, 0x30	; 48
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	86 95       	lsr	r24
    1256:	86 95       	lsr	r24
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	81 70       	andi	r24, 0x01	; 1
    125e:	90 70       	andi	r25, 0x00	; 0
    1260:	88 23       	and	r24, r24
    1262:	09 f4       	brne	.+2      	; 0x1266 <main+0x578>
    1264:	2a ce       	rjmp	.-940    	; 0xeba <main+0x1cc>
		{
			LCD_clearScreen();
    1266:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_clearScreen>
			LCD_goToRowColumn(0,0);
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	0e 94 37 12 	call	0x246e	; 0x246e <LCD_goToRowColumn>
			LCD_displayString("FL:11, FR:12, F:15");
    1272:	84 ee       	ldi	r24, 0xE4	; 228
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
			LCD_goToRowColumn(1,0);
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	0e 94 37 12 	call	0x246e	; 0x246e <LCD_goToRowColumn>
			LCD_displayString("RL:13, RR:14, R:16");
    1282:	87 ef       	ldi	r24, 0xF7	; 247
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
			current_screen = 3;
    128a:	83 e0       	ldi	r24, 0x03	; 3
    128c:	80 93 46 01 	sts	0x0146, r24
			interrupt = 0;
    1290:	10 92 49 01 	sts	0x0149, r1
			LCD_goToRowColumn20(2,0);
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
			led = LCD_ReadInput();
    129c:	0e 94 27 0a 	call	0x144e	; 0x144e <LCD_ReadInput>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9a af       	std	Y+58, r25	; 0x3a
    12a6:	89 af       	std	Y+57, r24	; 0x39
			if(led != -1)
    12a8:	89 ad       	ldd	r24, Y+57	; 0x39
    12aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    12ac:	2f ef       	ldi	r18, 0xFF	; 255
    12ae:	8f 3f       	cpi	r24, 0xFF	; 255
    12b0:	92 07       	cpc	r25, r18
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <main+0x5c8>
    12b4:	02 ce       	rjmp	.-1020   	; 0xeba <main+0x1cc>
			{
				if(led < 11 || led > 16)
    12b6:	89 ad       	ldd	r24, Y+57	; 0x39
    12b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    12ba:	8b 30       	cpi	r24, 0x0B	; 11
    12bc:	91 05       	cpc	r25, r1
    12be:	2c f0       	brlt	.+10     	; 0x12ca <main+0x5dc>
    12c0:	89 ad       	ldd	r24, Y+57	; 0x39
    12c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    12c4:	81 31       	cpi	r24, 0x11	; 17
    12c6:	91 05       	cpc	r25, r1
    12c8:	fc f0       	brlt	.+62     	; 0x1308 <main+0x61a>
				{
					LCD_clearScreen();
    12ca:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_clearScreen>
					LCD_displayString("Invalid option ");
    12ce:	8a e0       	ldi	r24, 0x0A	; 10
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
					LCD_goToRowColumn20(1,0);
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
					LCD_displayString("to go back enter ");
    12de:	89 ea       	ldi	r24, 0xA9	; 169
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
					LCD_goToRowColumn20(2,0);
    12e6:	82 e0       	ldi	r24, 0x02	; 2
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
					LCD_displayString("1 to control motor");
    12ee:	8b eb       	ldi	r24, 0xBB	; 187
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
					LCD_goToRowColumn20(3,0);
    12f6:	83 e0       	ldi	r24, 0x03	; 3
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
					LCD_displayString("2 to control light");
    12fe:	8e ec       	ldi	r24, 0xCE	; 206
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
    1306:	d9 cd       	rjmp	.-1102   	; 0xeba <main+0x1cc>
				}
				else
				{
					LCD_clearScreen();
    1308:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_clearScreen>
					LCD_displayString("option ");
    130c:	8a e1       	ldi	r24, 0x1A	; 26
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
					LCD_intgerToString(led);
    1314:	89 ad       	ldd	r24, Y+57	; 0x39
    1316:	9a ad       	ldd	r25, Y+58	; 0x3a
    1318:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <LCD_intgerToString>
					LCD_goToRowColumn20(1,0);
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
					LCD_displayString("to go back enter ");
    1324:	89 ea       	ldi	r24, 0xA9	; 169
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
					LCD_goToRowColumn20(2,0);
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
					LCD_displayString("1 to control motor");
    1334:	8b eb       	ldi	r24, 0xBB	; 187
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
					LCD_goToRowColumn20(3,0);
    133c:	83 e0       	ldi	r24, 0x03	; 3
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
					LCD_displayString("2 to control light");
    1344:	8e ec       	ldi	r24, 0xCE	; 206
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>

					// Function to initialize TWI
					TWI_start(); // Function to send start condition
    134c:	0e 94 b1 05 	call	0xb62	; 0xb62 <TWI_start>
					TWI_write_address(address+write); // Function to write address and data direction bit(write) on SDA
    1350:	90 91 43 01 	lds	r25, 0x0143
    1354:	80 91 48 01 	lds	r24, 0x0148
    1358:	89 0f       	add	r24, r25
    135a:	0e 94 e5 05 	call	0xbca	; 0xbca <TWI_write_address>
					TWI_write_data(led);      // Function to write data in slave
    135e:	89 ad       	ldd	r24, Y+57	; 0x39
    1360:	0e 94 27 06 	call	0xc4e	; 0xc4e <TWI_write_data>
					TWI_stop(); // Function to send stop condition
    1364:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <TWI_stop>
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a0 e2       	ldi	r26, 0x20	; 32
    136e:	b1 e4       	ldi	r27, 0x41	; 65
    1370:	8b 87       	std	Y+11, r24	; 0x0b
    1372:	9c 87       	std	Y+12, r25	; 0x0c
    1374:	ad 87       	std	Y+13, r26	; 0x0d
    1376:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1378:	6b 85       	ldd	r22, Y+11	; 0x0b
    137a:	7c 85       	ldd	r23, Y+12	; 0x0c
    137c:	8d 85       	ldd	r24, Y+13	; 0x0d
    137e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	4a e7       	ldi	r20, 0x7A	; 122
    1386:	53 e4       	ldi	r21, 0x43	; 67
    1388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	8f 83       	std	Y+7, r24	; 0x07
    1392:	98 87       	std	Y+8, r25	; 0x08
    1394:	a9 87       	std	Y+9, r26	; 0x09
    1396:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1398:	6f 81       	ldd	r22, Y+7	; 0x07
    139a:	78 85       	ldd	r23, Y+8	; 0x08
    139c:	89 85       	ldd	r24, Y+9	; 0x09
    139e:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e8       	ldi	r20, 0x80	; 128
    13a6:	5f e3       	ldi	r21, 0x3F	; 63
    13a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ac:	88 23       	and	r24, r24
    13ae:	2c f4       	brge	.+10     	; 0x13ba <main+0x6cc>
		__ticks = 1;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	3f c0       	rjmp	.+126    	; 0x1438 <main+0x74a>
	else if (__tmp > 65535)
    13ba:	6f 81       	ldd	r22, Y+7	; 0x07
    13bc:	78 85       	ldd	r23, Y+8	; 0x08
    13be:	89 85       	ldd	r24, Y+9	; 0x09
    13c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	3f ef       	ldi	r19, 0xFF	; 255
    13c6:	4f e7       	ldi	r20, 0x7F	; 127
    13c8:	57 e4       	ldi	r21, 0x47	; 71
    13ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ce:	18 16       	cp	r1, r24
    13d0:	4c f5       	brge	.+82     	; 0x1424 <main+0x736>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e2       	ldi	r20, 0x20	; 32
    13e0:	51 e4       	ldi	r21, 0x41	; 65
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    13fa:	0f c0       	rjmp	.+30     	; 0x141a <main+0x72c>
    13fc:	89 e1       	ldi	r24, 0x19	; 25
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	8b 83       	std	Y+3, r24	; 0x03
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <main+0x71a>
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1410:	8d 81       	ldd	r24, Y+5	; 0x05
    1412:	9e 81       	ldd	r25, Y+6	; 0x06
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	9e 83       	std	Y+6, r25	; 0x06
    1418:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	9e 81       	ldd	r25, Y+6	; 0x06
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	69 f7       	brne	.-38     	; 0x13fc <main+0x70e>
    1422:	4b cd       	rjmp	.-1386   	; 0xeba <main+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1424:	6f 81       	ldd	r22, Y+7	; 0x07
    1426:	78 85       	ldd	r23, Y+8	; 0x08
    1428:	89 85       	ldd	r24, Y+9	; 0x09
    142a:	9a 85       	ldd	r25, Y+10	; 0x0a
    142c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9e 83       	std	Y+6, r25	; 0x06
    1436:	8d 83       	std	Y+5, r24	; 0x05
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	9e 81       	ldd	r25, Y+6	; 0x06
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	f1 f7       	brne	.-4      	; 0x1444 <main+0x756>
    1448:	9a 83       	std	Y+2, r25	; 0x02
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	36 cd       	rjmp	.-1428   	; 0xeba <main+0x1cc>

0000144e <LCD_ReadInput>:
		}
	}
	return 0;
}

s32 LCD_ReadInput(){
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	2a 97       	sbiw	r28, 0x0a	; 10
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
	s8 Local_u8PressedKey = 0xFF;
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	8e 83       	std	Y+6, r24	; 0x06
	s32 Local_input = 0;
    1466:	1a 82       	std	Y+2, r1	; 0x02
    1468:	1b 82       	std	Y+3, r1	; 0x03
    146a:	1c 82       	std	Y+4, r1	; 0x04
    146c:	1d 82       	std	Y+5, r1	; 0x05
	u8 counter = 0;
    146e:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		Local_u8PressedKey = KeyPad_getPressedKey();
    1470:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <KeyPad_getPressedKey>
    1474:	8e 83       	std	Y+6, r24	; 0x06
		if(Local_u8PressedKey != 0xFF){
			if(Local_u8PressedKey == 'k' && counter != 0)
    1476:	8e 81       	ldd	r24, Y+6	; 0x06
    1478:	8b 36       	cpi	r24, 0x6B	; 107
    147a:	21 f4       	brne	.+8      	; 0x1484 <LCD_ReadInput+0x36>
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	88 23       	and	r24, r24
    1480:	09 f0       	breq	.+2      	; 0x1484 <LCD_ReadInput+0x36>
    1482:	77 c0       	rjmp	.+238    	; 0x1572 <LCD_ReadInput+0x124>
			{
				break;
			}
			else if(Local_u8PressedKey == -1)
    1484:	8e 81       	ldd	r24, Y+6	; 0x06
    1486:	8f 3f       	cpi	r24, 0xFF	; 255
    1488:	49 f4       	brne	.+18     	; 0x149c <LCD_ReadInput+0x4e>
			{
				return -1;
    148a:	8f ef       	ldi	r24, 0xFF	; 255
    148c:	9f ef       	ldi	r25, 0xFF	; 255
    148e:	af ef       	ldi	r26, 0xFF	; 255
    1490:	bf ef       	ldi	r27, 0xFF	; 255
    1492:	8f 83       	std	Y+7, r24	; 0x07
    1494:	98 87       	std	Y+8, r25	; 0x08
    1496:	a9 87       	std	Y+9, r26	; 0x09
    1498:	ba 87       	std	Y+10, r27	; 0x0a
    149a:	73 c0       	rjmp	.+230    	; 0x1582 <LCD_ReadInput+0x134>
			}
			else if(Local_u8PressedKey != 'k' && Local_u8PressedKey != 'd')
    149c:	8e 81       	ldd	r24, Y+6	; 0x06
    149e:	8b 36       	cpi	r24, 0x6B	; 107
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <LCD_ReadInput+0x56>
    14a2:	40 c0       	rjmp	.+128    	; 0x1524 <LCD_ReadInput+0xd6>
    14a4:	8e 81       	ldd	r24, Y+6	; 0x06
    14a6:	84 36       	cpi	r24, 0x64	; 100
    14a8:	e9 f1       	breq	.+122    	; 0x1524 <LCD_ReadInput+0xd6>
			{
				if(counter != 0)
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	88 23       	and	r24, r24
    14ae:	31 f1       	breq	.+76     	; 0x14fc <LCD_ReadInput+0xae>
				{
					Local_input *= 10;
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	9b 81       	ldd	r25, Y+3	; 0x03
    14b4:	ac 81       	ldd	r26, Y+4	; 0x04
    14b6:	bd 81       	ldd	r27, Y+5	; 0x05
    14b8:	2a e0       	ldi	r18, 0x0A	; 10
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	bc 01       	movw	r22, r24
    14c2:	cd 01       	movw	r24, r26
    14c4:	0e 94 ae 13 	call	0x275c	; 0x275c <__mulsi3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8a 83       	std	Y+2, r24	; 0x02
    14ce:	9b 83       	std	Y+3, r25	; 0x03
    14d0:	ac 83       	std	Y+4, r26	; 0x04
    14d2:	bd 83       	std	Y+5, r27	; 0x05
					Local_input += Local_u8PressedKey;
    14d4:	8e 81       	ldd	r24, Y+6	; 0x06
    14d6:	28 2f       	mov	r18, r24
    14d8:	33 27       	eor	r19, r19
    14da:	27 fd       	sbrc	r18, 7
    14dc:	30 95       	com	r19
    14de:	43 2f       	mov	r20, r19
    14e0:	53 2f       	mov	r21, r19
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	9b 81       	ldd	r25, Y+3	; 0x03
    14e6:	ac 81       	ldd	r26, Y+4	; 0x04
    14e8:	bd 81       	ldd	r27, Y+5	; 0x05
    14ea:	82 0f       	add	r24, r18
    14ec:	93 1f       	adc	r25, r19
    14ee:	a4 1f       	adc	r26, r20
    14f0:	b5 1f       	adc	r27, r21
    14f2:	8a 83       	std	Y+2, r24	; 0x02
    14f4:	9b 83       	std	Y+3, r25	; 0x03
    14f6:	ac 83       	std	Y+4, r26	; 0x04
    14f8:	bd 83       	std	Y+5, r27	; 0x05
    14fa:	0a c0       	rjmp	.+20     	; 0x1510 <LCD_ReadInput+0xc2>
				}
				else
				{
					Local_input = Local_u8PressedKey;
    14fc:	8e 81       	ldd	r24, Y+6	; 0x06
    14fe:	99 27       	eor	r25, r25
    1500:	87 fd       	sbrc	r24, 7
    1502:	90 95       	com	r25
    1504:	a9 2f       	mov	r26, r25
    1506:	b9 2f       	mov	r27, r25
    1508:	8a 83       	std	Y+2, r24	; 0x02
    150a:	9b 83       	std	Y+3, r25	; 0x03
    150c:	ac 83       	std	Y+4, r26	; 0x04
    150e:	bd 83       	std	Y+5, r27	; 0x05
				}
				counter++;
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	8f 5f       	subi	r24, 0xFF	; 255
    1514:	89 83       	std	Y+1, r24	; 0x01
				LCD_intgerToString(Local_u8PressedKey);
    1516:	8e 81       	ldd	r24, Y+6	; 0x06
    1518:	99 27       	eor	r25, r25
    151a:	87 fd       	sbrc	r24, 7
    151c:	90 95       	com	r25
    151e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <LCD_intgerToString>
    1522:	a6 cf       	rjmp	.-180    	; 0x1470 <LCD_ReadInput+0x22>
			}
			else if(counter != 0 && Local_u8PressedKey == 'd')
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	88 23       	and	r24, r24
    1528:	09 f4       	brne	.+2      	; 0x152c <LCD_ReadInput+0xde>
    152a:	a2 cf       	rjmp	.-188    	; 0x1470 <LCD_ReadInput+0x22>
    152c:	8e 81       	ldd	r24, Y+6	; 0x06
    152e:	84 36       	cpi	r24, 0x64	; 100
    1530:	09 f0       	breq	.+2      	; 0x1534 <LCD_ReadInput+0xe6>
    1532:	9e cf       	rjmp	.-196    	; 0x1470 <LCD_ReadInput+0x22>
			{
				LCD_sendCommand(0x10);
    1534:	80 e1       	ldi	r24, 0x10	; 16
    1536:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <LCD_sendCommand>
				LCD_displayCharacter(' ');
    153a:	80 e2       	ldi	r24, 0x20	; 32
    153c:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_displayCharacter>
				LCD_sendCommand(0x10);
    1540:	80 e1       	ldi	r24, 0x10	; 16
    1542:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <LCD_sendCommand>
				Local_input /= 10;
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	9b 81       	ldd	r25, Y+3	; 0x03
    154a:	ac 81       	ldd	r26, Y+4	; 0x04
    154c:	bd 81       	ldd	r27, Y+5	; 0x05
    154e:	2a e0       	ldi	r18, 0x0A	; 10
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e0       	ldi	r20, 0x00	; 0
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	bc 01       	movw	r22, r24
    1558:	cd 01       	movw	r24, r26
    155a:	0e 94 cd 13 	call	0x279a	; 0x279a <__divmodsi4>
    155e:	da 01       	movw	r26, r20
    1560:	c9 01       	movw	r24, r18
    1562:	8a 83       	std	Y+2, r24	; 0x02
    1564:	9b 83       	std	Y+3, r25	; 0x03
    1566:	ac 83       	std	Y+4, r26	; 0x04
    1568:	bd 83       	std	Y+5, r27	; 0x05
				counter--;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	81 50       	subi	r24, 0x01	; 1
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	7f cf       	rjmp	.-258    	; 0x1470 <LCD_ReadInput+0x22>
			}
		}
	}
	return Local_input;
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	9b 81       	ldd	r25, Y+3	; 0x03
    1576:	ac 81       	ldd	r26, Y+4	; 0x04
    1578:	bd 81       	ldd	r27, Y+5	; 0x05
    157a:	8f 83       	std	Y+7, r24	; 0x07
    157c:	98 87       	std	Y+8, r25	; 0x08
    157e:	a9 87       	std	Y+9, r26	; 0x09
    1580:	ba 87       	std	Y+10, r27	; 0x0a
    1582:	8f 81       	ldd	r24, Y+7	; 0x07
    1584:	98 85       	ldd	r25, Y+8	; 0x08
    1586:	a9 85       	ldd	r26, Y+9	; 0x09
    1588:	ba 85       	ldd	r27, Y+10	; 0x0a
}
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	2a 96       	adiw	r28, 0x0a	; 10
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <__vector_1>:

ISR(INT0_vect)
{
    15a0:	1f 92       	push	r1
    15a2:	0f 92       	push	r0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	2f 93       	push	r18
    15ac:	3f 93       	push	r19
    15ae:	4f 93       	push	r20
    15b0:	5f 93       	push	r21
    15b2:	6f 93       	push	r22
    15b4:	7f 93       	push	r23
    15b6:	8f 93       	push	r24
    15b8:	9f 93       	push	r25
    15ba:	af 93       	push	r26
    15bc:	bf 93       	push	r27
    15be:	ef 93       	push	r30
    15c0:	ff 93       	push	r31
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	2e 97       	sbiw	r28, 0x0e	; 14
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(0);
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	0e 94 26 13 	call	0x264c	; 0x264c <UART_sendByte>
	SET_BIT(PORTC,PC7);
    15d6:	a5 e3       	ldi	r26, 0x35	; 53
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e5 e3       	ldi	r30, 0x35	; 53
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	80 68       	ori	r24, 0x80	; 128
    15e2:	8c 93       	st	X, r24
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	aa e7       	ldi	r26, 0x7A	; 122
    15ea:	b3 e4       	ldi	r27, 0x43	; 67
    15ec:	8b 87       	std	Y+11, r24	; 0x0b
    15ee:	9c 87       	std	Y+12, r25	; 0x0c
    15f0:	ad 87       	std	Y+13, r26	; 0x0d
    15f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	4a e7       	ldi	r20, 0x7A	; 122
    1602:	53 e4       	ldi	r21, 0x43	; 67
    1604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	8f 83       	std	Y+7, r24	; 0x07
    160e:	98 87       	std	Y+8, r25	; 0x08
    1610:	a9 87       	std	Y+9, r26	; 0x09
    1612:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1614:	6f 81       	ldd	r22, Y+7	; 0x07
    1616:	78 85       	ldd	r23, Y+8	; 0x08
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e8       	ldi	r20, 0x80	; 128
    1622:	5f e3       	ldi	r21, 0x3F	; 63
    1624:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1628:	88 23       	and	r24, r24
    162a:	2c f4       	brge	.+10     	; 0x1636 <__vector_1+0x96>
		__ticks = 1;
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	9e 83       	std	Y+6, r25	; 0x06
    1632:	8d 83       	std	Y+5, r24	; 0x05
    1634:	3f c0       	rjmp	.+126    	; 0x16b4 <__vector_1+0x114>
	else if (__tmp > 65535)
    1636:	6f 81       	ldd	r22, Y+7	; 0x07
    1638:	78 85       	ldd	r23, Y+8	; 0x08
    163a:	89 85       	ldd	r24, Y+9	; 0x09
    163c:	9a 85       	ldd	r25, Y+10	; 0x0a
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	3f ef       	ldi	r19, 0xFF	; 255
    1642:	4f e7       	ldi	r20, 0x7F	; 127
    1644:	57 e4       	ldi	r21, 0x47	; 71
    1646:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    164a:	18 16       	cp	r1, r24
    164c:	4c f5       	brge	.+82     	; 0x16a0 <__vector_1+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1650:	7c 85       	ldd	r23, Y+12	; 0x0c
    1652:	8d 85       	ldd	r24, Y+13	; 0x0d
    1654:	9e 85       	ldd	r25, Y+14	; 0x0e
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e2       	ldi	r20, 0x20	; 32
    165c:	51 e4       	ldi	r21, 0x41	; 65
    165e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	9e 83       	std	Y+6, r25	; 0x06
    1674:	8d 83       	std	Y+5, r24	; 0x05
    1676:	0f c0       	rjmp	.+30     	; 0x1696 <__vector_1+0xf6>
    1678:	89 e1       	ldi	r24, 0x19	; 25
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	9c 83       	std	Y+4, r25	; 0x04
    167e:	8b 83       	std	Y+3, r24	; 0x03
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	9c 81       	ldd	r25, Y+4	; 0x04
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	f1 f7       	brne	.-4      	; 0x1684 <__vector_1+0xe4>
    1688:	9c 83       	std	Y+4, r25	; 0x04
    168a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168c:	8d 81       	ldd	r24, Y+5	; 0x05
    168e:	9e 81       	ldd	r25, Y+6	; 0x06
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	9e 83       	std	Y+6, r25	; 0x06
    1694:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	9e 81       	ldd	r25, Y+6	; 0x06
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	69 f7       	brne	.-38     	; 0x1678 <__vector_1+0xd8>
    169e:	14 c0       	rjmp	.+40     	; 0x16c8 <__vector_1+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a0:	6f 81       	ldd	r22, Y+7	; 0x07
    16a2:	78 85       	ldd	r23, Y+8	; 0x08
    16a4:	89 85       	ldd	r24, Y+9	; 0x09
    16a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	9e 83       	std	Y+6, r25	; 0x06
    16b2:	8d 83       	std	Y+5, r24	; 0x05
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	9e 81       	ldd	r25, Y+6	; 0x06
    16b8:	9a 83       	std	Y+2, r25	; 0x02
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <__vector_1+0x120>
    16c4:	9a 83       	std	Y+2, r25	; 0x02
    16c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	CLR_BIT(PORTC,PC7);
    16c8:	a5 e3       	ldi	r26, 0x35	; 53
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e5 e3       	ldi	r30, 0x35	; 53
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	8f 77       	andi	r24, 0x7F	; 127
    16d4:	8c 93       	st	X, r24
	CLR_BIT(PORTC,PC2);
    16d6:	a5 e3       	ldi	r26, 0x35	; 53
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e5 e3       	ldi	r30, 0x35	; 53
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8b 7f       	andi	r24, 0xFB	; 251
    16e2:	8c 93       	st	X, r24
}
    16e4:	2e 96       	adiw	r28, 0x0e	; 14
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	ff 91       	pop	r31
    16f0:	ef 91       	pop	r30
    16f2:	bf 91       	pop	r27
    16f4:	af 91       	pop	r26
    16f6:	9f 91       	pop	r25
    16f8:	8f 91       	pop	r24
    16fa:	7f 91       	pop	r23
    16fc:	6f 91       	pop	r22
    16fe:	5f 91       	pop	r21
    1700:	4f 91       	pop	r20
    1702:	3f 91       	pop	r19
    1704:	2f 91       	pop	r18
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	0f 90       	pop	r0
    170c:	1f 90       	pop	r1
    170e:	18 95       	reti

00001710 <__vector_2>:

ISR(INT1_vect)
{
    1710:	1f 92       	push	r1
    1712:	0f 92       	push	r0
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	0f 92       	push	r0
    1718:	11 24       	eor	r1, r1
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    173a:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_clearScreen>
    173e:	13 c0       	rjmp	.+38     	; 0x1766 <__vector_2+0x56>
	while(GET_BIT(PIND,PD3) == 0)
	{
		LCD_goToRowColumn20(0,0);
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
		LCD_displayString("Overheating, ");
    1748:	82 e2       	ldi	r24, 0x22	; 34
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
		LCD_goToRowColumn20(1,0);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_goToRowColumn20>
		LCD_displayString("Cooling on");
    1758:	80 e3       	ldi	r24, 0x30	; 48
    175a:	91 e0       	ldi	r25, 0x01	; 1
    175c:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
		interrupt = 1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	80 93 49 01 	sts	0x0149, r24
}

ISR(INT1_vect)
{
	LCD_clearScreen();
	while(GET_BIT(PIND,PD3) == 0)
    1766:	e0 e3       	ldi	r30, 0x30	; 48
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	86 95       	lsr	r24
    176e:	86 95       	lsr	r24
    1770:	86 95       	lsr	r24
    1772:	88 2f       	mov	r24, r24
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	81 70       	andi	r24, 0x01	; 1
    1778:	90 70       	andi	r25, 0x00	; 0
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	09 f3       	breq	.-62     	; 0x1740 <__vector_2+0x30>
		LCD_displayString("Overheating, ");
		LCD_goToRowColumn20(1,0);
		LCD_displayString("Cooling on");
		interrupt = 1;
	}
	LCD_clearScreen();
    177e:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_clearScreen>

}
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	ff 91       	pop	r31
    1788:	ef 91       	pop	r30
    178a:	bf 91       	pop	r27
    178c:	af 91       	pop	r26
    178e:	9f 91       	pop	r25
    1790:	8f 91       	pop	r24
    1792:	7f 91       	pop	r23
    1794:	6f 91       	pop	r22
    1796:	5f 91       	pop	r21
    1798:	4f 91       	pop	r20
    179a:	3f 91       	pop	r19
    179c:	2f 91       	pop	r18
    179e:	0f 90       	pop	r0
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	0f 90       	pop	r0
    17a4:	1f 90       	pop	r1
    17a6:	18 95       	reti

000017a8 <timer0_init_overFlowMode>:
 *  Created on: Aug 21, 2022
 *      Author: Ghefo
 */
#include "Timer0.h"
void timer0_init_overFlowMode(void)
{
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I_BIT);
    17b0:	af e5       	ldi	r26, 0x5F	; 95
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	ef e5       	ldi	r30, 0x5F	; 95
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	8f 77       	andi	r24, 0x7F	; 127
    17bc:	8c 93       	st	X, r24
	/* Identity TCNT0 to be 12 (makes one overflow = 0.25 sec)*/
	TCNT0 = 0;   //Timer initial value
    17be:	e2 e5       	ldi	r30, 0x52	; 82
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	10 82       	st	Z, r1

	/* Timer0 OV Enable Interrupt*/
	SET_BIT(TIMISK,TOIE0);
    17c4:	a9 e5       	ldi	r26, 0x59	; 89
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e9 e5       	ldi	r30, 0x59	; 89
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	81 60       	ori	r24, 0x01	; 1
    17d0:	8c 93       	st	X, r24
	CLR_BIT(TIMISK,OCIE0);
    17d2:	a9 e5       	ldi	r26, 0x59	; 89
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e9 e5       	ldi	r30, 0x59	; 89
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	8d 7f       	andi	r24, 0xFD	; 253
    17de:	8c 93       	st	X, r24
	/* 1 - Non PWM Mode FOC0 = 1
	 * 2 - Normal Mode WGM01 = WGM00 = 0
	 * 3 - Normal Mode COM00 = COM01 = 0
	 * 4 - Clock prescaler 1024, CS00 = CS02 = 1, CS01 = 0
	 */
	TCCR0 = 0;
    17e0:	e3 e5       	ldi	r30, 0x53	; 83
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	10 82       	st	Z, r1
	TCCR0 = (1<<FOC0) | (1<<CS00) | (1<<CS02);
    17e6:	e3 e5       	ldi	r30, 0x53	; 83
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	85 e8       	ldi	r24, 0x85	; 133
    17ec:	80 83       	st	Z, r24
	SET_BIT(SREG,I_BIT);
    17ee:	af e5       	ldi	r26, 0x5F	; 95
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	ef e5       	ldi	r30, 0x5F	; 95
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	80 68       	ori	r24, 0x80	; 128
    17fa:	8c 93       	st	X, r24

}
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <timer0_init_CtcMode>:

void timer0_init_CtcMode(void)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;   //Timer initial value
    180a:	e2 e5       	ldi	r30, 0x52	; 82
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	10 82       	st	Z, r1

	/*OCR0 = */
	OCR0 = 250; /* Needed to be written one time only */
    1810:	ec e5       	ldi	r30, 0x5C	; 92
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	8a ef       	ldi	r24, 0xFA	; 250
    1816:	80 83       	st	Z, r24
	/* Timer0 OV Enable Interrupt*/
	SET_BIT(TIMISK,OCIE0);
	CLR_BIT(TIMISK,TOIE0);
#endif

	SET_BIT(DDRB,PB3);
    1818:	a7 e3       	ldi	r26, 0x37	; 55
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e7 e3       	ldi	r30, 0x37	; 55
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	88 60       	ori	r24, 0x08	; 8
    1824:	8c 93       	st	X, r24
	/* 1 - Non PWM Mode FOC0 = 1
	 * 2 - Compare WGM01 = 1, WGM00 = 0
	 * 3 - Normal Mode COM00 =1, COM01 = 0
	 * 4 - Clock prescaler 1024, CS00 = CS02 = 1, CS01 = 0
	 */
	TCCR0 = 0;
    1826:	e3 e5       	ldi	r30, 0x53	; 83
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	10 82       	st	Z, r1
	TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<COM00) | (1<<CS00);
    182c:	e3 e5       	ldi	r30, 0x53	; 83
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	89 e9       	ldi	r24, 0x99	; 153
    1832:	80 83       	st	Z, r24
}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <timer0_init_PWM>:

void timer0_init_PWM(void)
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I_BIT);
    1842:	af e5       	ldi	r26, 0x5F	; 95
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	ef e5       	ldi	r30, 0x5F	; 95
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	8f 77       	andi	r24, 0x7F	; 127
    184e:	8c 93       	st	X, r24
	TCNT0 = 0;   //Timer initial value
    1850:	e2 e5       	ldi	r30, 0x52	; 82
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	10 82       	st	Z, r1

	/*OCR0 = */
	OCR0 = 0; /* Needed to be written one time only */
    1856:	ec e5       	ldi	r30, 0x5C	; 92
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	10 82       	st	Z, r1

	SET_BIT(DDRB,PB3);   /* Make OC0 Pin output*/
    185c:	a7 e3       	ldi	r26, 0x37	; 55
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e7 e3       	ldi	r30, 0x37	; 55
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	88 60       	ori	r24, 0x08	; 8
    1868:	8c 93       	st	X, r24
	/* 1 - PWM Mode FOC0 = 0
	 * 2 - Fast PWM Mode  WGM01 = 1, WGM00 = 1
	 * 3 - Normal Mode COM00 =0, COM01 = 1
	 * 4 - Clock prescaler 8, CS00 = CS02 = , CS01 =
	 */
	TCCR0 = 0;
    186a:	e3 e5       	ldi	r30, 0x53	; 83
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	10 82       	st	Z, r1
	TCCR0 = (1<<WGM01) | (1<<WGM00) | (1<<COM01) | (1<<CS01);
    1870:	e3 e5       	ldi	r30, 0x53	; 83
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	8a e6       	ldi	r24, 0x6A	; 106
    1876:	80 83       	st	Z, r24
	SET_BIT(SREG,I_BIT);
    1878:	af e5       	ldi	r26, 0x5F	; 95
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	ef e5       	ldi	r30, 0x5F	; 95
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	80 68       	ori	r24, 0x80	; 128
    1884:	8c 93       	st	X, r24
}
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <timer0_set_dutyCycle>:

void timer0_set_dutyCycle(u8 duty)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	0f 92       	push	r0
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = duty;
    1898:	ec e5       	ldi	r30, 0x5C	; 92
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	80 83       	st	Z, r24
}
    18a0:	0f 90       	pop	r0
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
s8 KeyPad_getPressedKey(void)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <KeyPad_getPressedKey+0x6>
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <KeyPad_getPressedKey+0x8>
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
	u8 output_col,input_row;
	u8 pressed_key_order = 0;
    18b4:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		if(interrupt == 1)
    18b6:	80 91 49 01 	lds	r24, 0x0149
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	19 f4       	brne	.+6      	; 0x18c4 <KeyPad_getPressedKey+0x1c>
		{
			return -1;
    18be:	4f ef       	ldi	r20, 0xFF	; 255
    18c0:	4c 83       	std	Y+4, r20	; 0x04
    18c2:	67 c0       	rjmp	.+206    	; 0x1992 <KeyPad_getPressedKey+0xea>
		}
		for(output_col=0;output_col<N_col;output_col++) /* loop for columns */
    18c4:	1b 82       	std	Y+3, r1	; 0x03
    18c6:	60 c0       	rjmp	.+192    	; 0x1988 <KeyPad_getPressedKey+0xe0>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the input_row pins
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<output_col);
    18c8:	ea e3       	ldi	r30, 0x3A	; 58
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	80 e1       	ldi	r24, 0x10	; 16
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <KeyPad_getPressedKey+0x34>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	2a 95       	dec	r18
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <KeyPad_getPressedKey+0x30>
    18e0:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<output_col));
    18e2:	eb e3       	ldi	r30, 0x3B	; 59
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	80 e1       	ldi	r24, 0x10	; 16
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <KeyPad_getPressedKey+0x50>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <KeyPad_getPressedKey+0x4c>
    18fc:	80 95       	com	r24
    18fe:	80 83       	st	Z, r24

			for(input_row=0;input_row<N_row;input_row++) /* loop for rows */
    1900:	1a 82       	std	Y+2, r1	; 0x02
    1902:	3b c0       	rjmp	.+118    	; 0x197a <KeyPad_getPressedKey+0xd2>
			{
				if(!GET_BIT(KEYPAD_PORT_IN,input_row)) /* if the switch is press in this input_row */
    1904:	e9 e3       	ldi	r30, 0x39	; 57
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	a9 01       	movw	r20, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <KeyPad_getPressedKey+0x74>
    1918:	55 95       	asr	r21
    191a:	47 95       	ror	r20
    191c:	8a 95       	dec	r24
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <KeyPad_getPressedKey+0x70>
    1920:	ca 01       	movw	r24, r20
    1922:	81 70       	andi	r24, 0x01	; 1
    1924:	90 70       	andi	r25, 0x00	; 0
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	29 f5       	brne	.+74     	; 0x1974 <KeyPad_getPressedKey+0xcc>
				{
					pressed_key_order = (input_row*N_col)+output_col+1;
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	c9 01       	movw	r24, r18
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	82 0f       	add	r24, r18
    1938:	93 1f       	adc	r25, r19
    193a:	98 2f       	mov	r25, r24
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	89 0f       	add	r24, r25
    1940:	8f 5f       	subi	r24, 0xFF	; 255
    1942:	89 83       	std	Y+1, r24	; 0x01
					while(GET_BIT(KEYPAD_PORT_IN,input_row)==0);
    1944:	e9 e3       	ldi	r30, 0x39	; 57
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	88 2f       	mov	r24, r24
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a9 01       	movw	r20, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <KeyPad_getPressedKey+0xb4>
    1958:	55 95       	asr	r21
    195a:	47 95       	ror	r20
    195c:	8a 95       	dec	r24
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <KeyPad_getPressedKey+0xb0>
    1960:	ca 01       	movw	r24, r20
    1962:	81 70       	andi	r24, 0x01	; 1
    1964:	90 70       	andi	r25, 0x00	; 0
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	69 f3       	breq	.-38     	; 0x1944 <KeyPad_getPressedKey+0x9c>
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber(pressed_key_order);
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <KeyPad_4x3_adjustKeyNumber>
    1970:	8c 83       	std	Y+4, r24	; 0x04
    1972:	0f c0       	rjmp	.+30     	; 0x1992 <KeyPad_getPressedKey+0xea>
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<output_col));

			for(input_row=0;input_row<N_row;input_row++) /* loop for rows */
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	8f 5f       	subi	r24, 0xFF	; 255
    1978:	8a 83       	std	Y+2, r24	; 0x02
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	84 30       	cpi	r24, 0x04	; 4
    197e:	08 f4       	brcc	.+2      	; 0x1982 <KeyPad_getPressedKey+0xda>
    1980:	c1 cf       	rjmp	.-126    	; 0x1904 <KeyPad_getPressedKey+0x5c>
	{
		if(interrupt == 1)
		{
			return -1;
		}
		for(output_col=0;output_col<N_col;output_col++) /* loop for columns */
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	8f 5f       	subi	r24, 0xFF	; 255
    1986:	8b 83       	std	Y+3, r24	; 0x03
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	83 30       	cpi	r24, 0x03	; 3
    198c:	08 f4       	brcc	.+2      	; 0x1990 <KeyPad_getPressedKey+0xe8>
    198e:	9c cf       	rjmp	.-200    	; 0x18c8 <KeyPad_getPressedKey+0x20>
    1990:	92 cf       	rjmp	.-220    	; 0x18b6 <KeyPad_getPressedKey+0xe>
						return KeyPad_4x4_adjustKeyNumber(pressed_key_order);
					#endif
				}
			}
		}
	}	
    1992:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <KeyPad_4x3_adjustKeyNumber>:

#if (N_col == 3) 

static u8 KeyPad_4x3_adjustKeyNumber(u8 button_number)
{
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <KeyPad_4x3_adjustKeyNumber+0x6>
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <KeyPad_4x3_adjustKeyNumber+0x8>
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	3c 83       	std	Y+4, r19	; 0x04
    19b8:	2b 83       	std	Y+3, r18	; 0x03
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	9c 81       	ldd	r25, Y+4	; 0x04
    19be:	86 30       	cpi	r24, 0x06	; 6
    19c0:	91 05       	cpc	r25, r1
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <KeyPad_4x3_adjustKeyNumber+0x24>
    19c4:	5a c0       	rjmp	.+180    	; 0x1a7a <KeyPad_4x3_adjustKeyNumber+0xd8>
    19c6:	2b 81       	ldd	r18, Y+3	; 0x03
    19c8:	3c 81       	ldd	r19, Y+4	; 0x04
    19ca:	27 30       	cpi	r18, 0x07	; 7
    19cc:	31 05       	cpc	r19, r1
    19ce:	0c f5       	brge	.+66     	; 0x1a12 <KeyPad_4x3_adjustKeyNumber+0x70>
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	9c 81       	ldd	r25, Y+4	; 0x04
    19d4:	83 30       	cpi	r24, 0x03	; 3
    19d6:	91 05       	cpc	r25, r1
    19d8:	09 f4       	brne	.+2      	; 0x19dc <KeyPad_4x3_adjustKeyNumber+0x3a>
    19da:	46 c0       	rjmp	.+140    	; 0x1a68 <KeyPad_4x3_adjustKeyNumber+0xc6>
    19dc:	2b 81       	ldd	r18, Y+3	; 0x03
    19de:	3c 81       	ldd	r19, Y+4	; 0x04
    19e0:	24 30       	cpi	r18, 0x04	; 4
    19e2:	31 05       	cpc	r19, r1
    19e4:	5c f4       	brge	.+22     	; 0x19fc <KeyPad_4x3_adjustKeyNumber+0x5a>
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	81 30       	cpi	r24, 0x01	; 1
    19ec:	91 05       	cpc	r25, r1
    19ee:	b1 f1       	breq	.+108    	; 0x1a5c <KeyPad_4x3_adjustKeyNumber+0xba>
    19f0:	2b 81       	ldd	r18, Y+3	; 0x03
    19f2:	3c 81       	ldd	r19, Y+4	; 0x04
    19f4:	22 30       	cpi	r18, 0x02	; 2
    19f6:	31 05       	cpc	r19, r1
    19f8:	a1 f1       	breq	.+104    	; 0x1a62 <KeyPad_4x3_adjustKeyNumber+0xc0>
    19fa:	53 c0       	rjmp	.+166    	; 0x1aa2 <KeyPad_4x3_adjustKeyNumber+0x100>
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	84 30       	cpi	r24, 0x04	; 4
    1a02:	91 05       	cpc	r25, r1
    1a04:	a1 f1       	breq	.+104    	; 0x1a6e <KeyPad_4x3_adjustKeyNumber+0xcc>
    1a06:	2b 81       	ldd	r18, Y+3	; 0x03
    1a08:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0a:	25 30       	cpi	r18, 0x05	; 5
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	91 f1       	breq	.+100    	; 0x1a74 <KeyPad_4x3_adjustKeyNumber+0xd2>
    1a10:	48 c0       	rjmp	.+144    	; 0x1aa2 <KeyPad_4x3_adjustKeyNumber+0x100>
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	89 30       	cpi	r24, 0x09	; 9
    1a18:	91 05       	cpc	r25, r1
    1a1a:	c1 f1       	breq	.+112    	; 0x1a8c <KeyPad_4x3_adjustKeyNumber+0xea>
    1a1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a20:	2a 30       	cpi	r18, 0x0A	; 10
    1a22:	31 05       	cpc	r19, r1
    1a24:	5c f4       	brge	.+22     	; 0x1a3c <KeyPad_4x3_adjustKeyNumber+0x9a>
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2a:	87 30       	cpi	r24, 0x07	; 7
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	41 f1       	breq	.+80     	; 0x1a80 <KeyPad_4x3_adjustKeyNumber+0xde>
    1a30:	2b 81       	ldd	r18, Y+3	; 0x03
    1a32:	3c 81       	ldd	r19, Y+4	; 0x04
    1a34:	28 30       	cpi	r18, 0x08	; 8
    1a36:	31 05       	cpc	r19, r1
    1a38:	31 f1       	breq	.+76     	; 0x1a86 <KeyPad_4x3_adjustKeyNumber+0xe4>
    1a3a:	33 c0       	rjmp	.+102    	; 0x1aa2 <KeyPad_4x3_adjustKeyNumber+0x100>
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	8b 30       	cpi	r24, 0x0B	; 11
    1a42:	91 05       	cpc	r25, r1
    1a44:	49 f1       	breq	.+82     	; 0x1a98 <KeyPad_4x3_adjustKeyNumber+0xf6>
    1a46:	2b 81       	ldd	r18, Y+3	; 0x03
    1a48:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4a:	2b 30       	cpi	r18, 0x0B	; 11
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	0c f1       	brlt	.+66     	; 0x1a92 <KeyPad_4x3_adjustKeyNumber+0xf0>
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	8c 30       	cpi	r24, 0x0C	; 12
    1a56:	91 05       	cpc	r25, r1
    1a58:	09 f1       	breq	.+66     	; 0x1a9c <KeyPad_4x3_adjustKeyNumber+0xfa>
    1a5a:	23 c0       	rjmp	.+70     	; 0x1aa2 <KeyPad_4x3_adjustKeyNumber+0x100>
	{
		case 1: return 1; break;
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	9a 83       	std	Y+2, r25	; 0x02
    1a60:	22 c0       	rjmp	.+68     	; 0x1aa6 <KeyPad_4x3_adjustKeyNumber+0x104>
		case 2: return 2; break;
    1a62:	22 e0       	ldi	r18, 0x02	; 2
    1a64:	2a 83       	std	Y+2, r18	; 0x02
    1a66:	1f c0       	rjmp	.+62     	; 0x1aa6 <KeyPad_4x3_adjustKeyNumber+0x104>
		case 3: return 3; break;
    1a68:	33 e0       	ldi	r19, 0x03	; 3
    1a6a:	3a 83       	std	Y+2, r19	; 0x02
    1a6c:	1c c0       	rjmp	.+56     	; 0x1aa6 <KeyPad_4x3_adjustKeyNumber+0x104>
		case 4: return 4; break;
    1a6e:	84 e0       	ldi	r24, 0x04	; 4
    1a70:	8a 83       	std	Y+2, r24	; 0x02
    1a72:	19 c0       	rjmp	.+50     	; 0x1aa6 <KeyPad_4x3_adjustKeyNumber+0x104>
		case 5: return 5; break;
    1a74:	95 e0       	ldi	r25, 0x05	; 5
    1a76:	9a 83       	std	Y+2, r25	; 0x02
    1a78:	16 c0       	rjmp	.+44     	; 0x1aa6 <KeyPad_4x3_adjustKeyNumber+0x104>
		case 6: return 6; break;
    1a7a:	26 e0       	ldi	r18, 0x06	; 6
    1a7c:	2a 83       	std	Y+2, r18	; 0x02
    1a7e:	13 c0       	rjmp	.+38     	; 0x1aa6 <KeyPad_4x3_adjustKeyNumber+0x104>
		case 7: return 7; break;
    1a80:	37 e0       	ldi	r19, 0x07	; 7
    1a82:	3a 83       	std	Y+2, r19	; 0x02
    1a84:	10 c0       	rjmp	.+32     	; 0x1aa6 <KeyPad_4x3_adjustKeyNumber+0x104>
		case 8: return 8; break;
    1a86:	88 e0       	ldi	r24, 0x08	; 8
    1a88:	8a 83       	std	Y+2, r24	; 0x02
    1a8a:	0d c0       	rjmp	.+26     	; 0x1aa6 <KeyPad_4x3_adjustKeyNumber+0x104>
		case 9: return 9; break;
    1a8c:	99 e0       	ldi	r25, 0x09	; 9
    1a8e:	9a 83       	std	Y+2, r25	; 0x02
    1a90:	0a c0       	rjmp	.+20     	; 0x1aa6 <KeyPad_4x3_adjustKeyNumber+0x104>
		case 10: return 'd'; // ASCII Code of *
    1a92:	24 e6       	ldi	r18, 0x64	; 100
    1a94:	2a 83       	std	Y+2, r18	; 0x02
    1a96:	07 c0       	rjmp	.+14     	; 0x1aa6 <KeyPad_4x3_adjustKeyNumber+0x104>
				 break;
		case 11: return 0;
    1a98:	1a 82       	std	Y+2, r1	; 0x02
    1a9a:	05 c0       	rjmp	.+10     	; 0x1aa6 <KeyPad_4x3_adjustKeyNumber+0x104>
				 break;		
		case 12: return 'k'; // ASCII Code of #
    1a9c:	3b e6       	ldi	r19, 0x6B	; 107
    1a9e:	3a 83       	std	Y+2, r19	; 0x02
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <KeyPad_4x3_adjustKeyNumber+0x104>
				 break;
		default: return button_number;								 						
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	8a 83       	std	Y+2, r24	; 0x02
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1abe:	e7 e3       	ldi	r30, 0x37	; 55
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	8f ef       	ldi	r24, 0xFF	; 255
    1ac4:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1ac6:	a1 e3       	ldi	r26, 0x31	; 49
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e1 e3       	ldi	r30, 0x31	; 49
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	80 67       	ori	r24, 0x70	; 112
    1ad2:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1ad4:	88 e3       	ldi	r24, 0x38	; 56
    1ad6:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1ada:	8c e0       	ldi	r24, 0x0C	; 12
    1adc:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <LCD_sendCommand>
}
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <LCD_ReadCommand>:

u8 LCD_ReadCommand(){
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	2e 97       	sbiw	r28, 0x0e	; 14
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
  CLR_BIT(LCD_CTRL_PORT,RS); /*For RS*/
    1b00:	a2 e3       	ldi	r26, 0x32	; 50
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e2 e3       	ldi	r30, 0x32	; 50
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	8f 7e       	andi	r24, 0xEF	; 239
    1b0c:	8c 93       	st	X, r24

  /*RW is set*/
  SET_BIT(LCD_CTRL_PORT,RW);
    1b0e:	a2 e3       	ldi	r26, 0x32	; 50
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e2 e3       	ldi	r30, 0x32	; 50
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	80 62       	ori	r24, 0x20	; 32
    1b1a:	8c 93       	st	X, r24
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	a0 ea       	ldi	r26, 0xA0	; 160
    1b22:	b0 e4       	ldi	r27, 0x40	; 64
    1b24:	8b 87       	std	Y+11, r24	; 0x0b
    1b26:	9c 87       	std	Y+12, r25	; 0x0c
    1b28:	ad 87       	std	Y+13, r26	; 0x0d
    1b2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	4a e7       	ldi	r20, 0x7A	; 122
    1b3a:	53 e4       	ldi	r21, 0x43	; 67
    1b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	8f 83       	std	Y+7, r24	; 0x07
    1b46:	98 87       	std	Y+8, r25	; 0x08
    1b48:	a9 87       	std	Y+9, r26	; 0x09
    1b4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4e:	78 85       	ldd	r23, Y+8	; 0x08
    1b50:	89 85       	ldd	r24, Y+9	; 0x09
    1b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e8       	ldi	r20, 0x80	; 128
    1b5a:	5f e3       	ldi	r21, 0x3F	; 63
    1b5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b60:	88 23       	and	r24, r24
    1b62:	2c f4       	brge	.+10     	; 0x1b6e <LCD_ReadCommand+0x82>
		__ticks = 1;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
    1b6c:	3f c0       	rjmp	.+126    	; 0x1bec <LCD_ReadCommand+0x100>
	else if (__tmp > 65535)
    1b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b70:	78 85       	ldd	r23, Y+8	; 0x08
    1b72:	89 85       	ldd	r24, Y+9	; 0x09
    1b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	3f ef       	ldi	r19, 0xFF	; 255
    1b7a:	4f e7       	ldi	r20, 0x7F	; 127
    1b7c:	57 e4       	ldi	r21, 0x47	; 71
    1b7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	4c f5       	brge	.+82     	; 0x1bd8 <LCD_ReadCommand+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e2       	ldi	r20, 0x20	; 32
    1b94:	51 e4       	ldi	r21, 0x41	; 65
    1b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	cd 01       	movw	r24, r26
    1ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9e 83       	std	Y+6, r25	; 0x06
    1bac:	8d 83       	std	Y+5, r24	; 0x05
    1bae:	0f c0       	rjmp	.+30     	; 0x1bce <LCD_ReadCommand+0xe2>
    1bb0:	89 e1       	ldi	r24, 0x19	; 25
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9c 83       	std	Y+4, r25	; 0x04
    1bb6:	8b 83       	std	Y+3, r24	; 0x03
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <LCD_ReadCommand+0xd0>
    1bc0:	9c 83       	std	Y+4, r25	; 0x04
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	69 f7       	brne	.-38     	; 0x1bb0 <LCD_ReadCommand+0xc4>
    1bd6:	14 c0       	rjmp	.+40     	; 0x1c00 <LCD_ReadCommand+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bda:	78 85       	ldd	r23, Y+8	; 0x08
    1bdc:	89 85       	ldd	r24, Y+9	; 0x09
    1bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	9e 83       	std	Y+6, r25	; 0x06
    1bea:	8d 83       	std	Y+5, r24	; 0x05
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	9a 83       	std	Y+2, r25	; 0x02
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <LCD_ReadCommand+0x10c>
    1bfc:	9a 83       	std	Y+2, r25	; 0x02
    1bfe:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(5);
  return LCD_DATA_PORT;
    1c00:	e8 e3       	ldi	r30, 0x38	; 56
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
}
    1c06:	2e 96       	adiw	r28, 0x0e	; 14
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <LCD_sendCommand>:

void LCD_sendCommand(u8 command)
{
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	e9 97       	sbiw	r28, 0x39	; 57
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	89 af       	std	Y+57, r24	; 0x39
	CLR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1c2e:	a2 e3       	ldi	r26, 0x32	; 50
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e2 e3       	ldi	r30, 0x32	; 50
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	8f 7e       	andi	r24, 0xEF	; 239
    1c3a:	8c 93       	st	X, r24
	CLR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1c3c:	a2 e3       	ldi	r26, 0x32	; 50
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e2 e3       	ldi	r30, 0x32	; 50
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	8f 7d       	andi	r24, 0xDF	; 223
    1c48:	8c 93       	st	X, r24
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a0 e8       	ldi	r26, 0x80	; 128
    1c50:	bf e3       	ldi	r27, 0x3F	; 63
    1c52:	8d ab       	std	Y+53, r24	; 0x35
    1c54:	9e ab       	std	Y+54, r25	; 0x36
    1c56:	af ab       	std	Y+55, r26	; 0x37
    1c58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c5c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c5e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c60:	98 ad       	ldd	r25, Y+56	; 0x38
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	4a e7       	ldi	r20, 0x7A	; 122
    1c68:	53 e4       	ldi	r21, 0x43	; 67
    1c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	89 ab       	std	Y+49, r24	; 0x31
    1c74:	9a ab       	std	Y+50, r25	; 0x32
    1c76:	ab ab       	std	Y+51, r26	; 0x33
    1c78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c80:	9c a9       	ldd	r25, Y+52	; 0x34
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e8       	ldi	r20, 0x80	; 128
    1c88:	5f e3       	ldi	r21, 0x3F	; 63
    1c8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c8e:	88 23       	and	r24, r24
    1c90:	2c f4       	brge	.+10     	; 0x1c9c <LCD_sendCommand+0x84>
		__ticks = 1;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	98 ab       	std	Y+48, r25	; 0x30
    1c98:	8f a7       	std	Y+47, r24	; 0x2f
    1c9a:	3f c0       	rjmp	.+126    	; 0x1d1a <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1c9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	3f ef       	ldi	r19, 0xFF	; 255
    1ca8:	4f e7       	ldi	r20, 0x7F	; 127
    1caa:	57 e4       	ldi	r21, 0x47	; 71
    1cac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb0:	18 16       	cp	r1, r24
    1cb2:	4c f5       	brge	.+82     	; 0x1d06 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb4:	6d a9       	ldd	r22, Y+53	; 0x35
    1cb6:	7e a9       	ldd	r23, Y+54	; 0x36
    1cb8:	8f a9       	ldd	r24, Y+55	; 0x37
    1cba:	98 ad       	ldd	r25, Y+56	; 0x38
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e2       	ldi	r20, 0x20	; 32
    1cc2:	51 e4       	ldi	r21, 0x41	; 65
    1cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	98 ab       	std	Y+48, r25	; 0x30
    1cda:	8f a7       	std	Y+47, r24	; 0x2f
    1cdc:	0f c0       	rjmp	.+30     	; 0x1cfc <LCD_sendCommand+0xe4>
    1cde:	89 e1       	ldi	r24, 0x19	; 25
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9e a7       	std	Y+46, r25	; 0x2e
    1ce4:	8d a7       	std	Y+45, r24	; 0x2d
    1ce6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ce8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <LCD_sendCommand+0xd2>
    1cee:	9e a7       	std	Y+46, r25	; 0x2e
    1cf0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf4:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	98 ab       	std	Y+48, r25	; 0x30
    1cfa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cfe:	98 a9       	ldd	r25, Y+48	; 0x30
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	69 f7       	brne	.-38     	; 0x1cde <LCD_sendCommand+0xc6>
    1d04:	14 c0       	rjmp	.+40     	; 0x1d2e <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d06:	69 a9       	ldd	r22, Y+49	; 0x31
    1d08:	7a a9       	ldd	r23, Y+50	; 0x32
    1d0a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d0c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	98 ab       	std	Y+48, r25	; 0x30
    1d18:	8f a7       	std	Y+47, r24	; 0x2f
    1d1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1e:	9c a7       	std	Y+44, r25	; 0x2c
    1d20:	8b a7       	std	Y+43, r24	; 0x2b
    1d22:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d24:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <LCD_sendCommand+0x10e>
    1d2a:	9c a7       	std	Y+44, r25	; 0x2c
    1d2c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1d2e:	a2 e3       	ldi	r26, 0x32	; 50
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e2 e3       	ldi	r30, 0x32	; 50
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	80 64       	ori	r24, 0x40	; 64
    1d3a:	8c 93       	st	X, r24
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	a0 e8       	ldi	r26, 0x80	; 128
    1d42:	bf e3       	ldi	r27, 0x3F	; 63
    1d44:	8f a3       	std	Y+39, r24	; 0x27
    1d46:	98 a7       	std	Y+40, r25	; 0x28
    1d48:	a9 a7       	std	Y+41, r26	; 0x29
    1d4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d4e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d50:	89 a5       	ldd	r24, Y+41	; 0x29
    1d52:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	4a e7       	ldi	r20, 0x7A	; 122
    1d5a:	53 e4       	ldi	r21, 0x43	; 67
    1d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	8b a3       	std	Y+35, r24	; 0x23
    1d66:	9c a3       	std	Y+36, r25	; 0x24
    1d68:	ad a3       	std	Y+37, r26	; 0x25
    1d6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d70:	8d a1       	ldd	r24, Y+37	; 0x25
    1d72:	9e a1       	ldd	r25, Y+38	; 0x26
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e8       	ldi	r20, 0x80	; 128
    1d7a:	5f e3       	ldi	r21, 0x3F	; 63
    1d7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d80:	88 23       	and	r24, r24
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <LCD_sendCommand+0x176>
		__ticks = 1;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	9a a3       	std	Y+34, r25	; 0x22
    1d8a:	89 a3       	std	Y+33, r24	; 0x21
    1d8c:	3f c0       	rjmp	.+126    	; 0x1e0c <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1d8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d90:	7c a1       	ldd	r23, Y+36	; 0x24
    1d92:	8d a1       	ldd	r24, Y+37	; 0x25
    1d94:	9e a1       	ldd	r25, Y+38	; 0x26
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	3f ef       	ldi	r19, 0xFF	; 255
    1d9a:	4f e7       	ldi	r20, 0x7F	; 127
    1d9c:	57 e4       	ldi	r21, 0x47	; 71
    1d9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da2:	18 16       	cp	r1, r24
    1da4:	4c f5       	brge	.+82     	; 0x1df8 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da6:	6f a1       	ldd	r22, Y+39	; 0x27
    1da8:	78 a5       	ldd	r23, Y+40	; 0x28
    1daa:	89 a5       	ldd	r24, Y+41	; 0x29
    1dac:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e2       	ldi	r20, 0x20	; 32
    1db4:	51 e4       	ldi	r21, 0x41	; 65
    1db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9a a3       	std	Y+34, r25	; 0x22
    1dcc:	89 a3       	std	Y+33, r24	; 0x21
    1dce:	0f c0       	rjmp	.+30     	; 0x1dee <LCD_sendCommand+0x1d6>
    1dd0:	89 e1       	ldi	r24, 0x19	; 25
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	98 a3       	std	Y+32, r25	; 0x20
    1dd6:	8f 8f       	std	Y+31, r24	; 0x1f
    1dd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dda:	98 a1       	ldd	r25, Y+32	; 0x20
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <LCD_sendCommand+0x1c4>
    1de0:	98 a3       	std	Y+32, r25	; 0x20
    1de2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de4:	89 a1       	ldd	r24, Y+33	; 0x21
    1de6:	9a a1       	ldd	r25, Y+34	; 0x22
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	9a a3       	std	Y+34, r25	; 0x22
    1dec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dee:	89 a1       	ldd	r24, Y+33	; 0x21
    1df0:	9a a1       	ldd	r25, Y+34	; 0x22
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	69 f7       	brne	.-38     	; 0x1dd0 <LCD_sendCommand+0x1b8>
    1df6:	14 c0       	rjmp	.+40     	; 0x1e20 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dfa:	7c a1       	ldd	r23, Y+36	; 0x24
    1dfc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dfe:	9e a1       	ldd	r25, Y+38	; 0x26
    1e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9a a3       	std	Y+34, r25	; 0x22
    1e0a:	89 a3       	std	Y+33, r24	; 0x21
    1e0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e10:	9e 8f       	std	Y+30, r25	; 0x1e
    1e12:	8d 8f       	std	Y+29, r24	; 0x1d
    1e14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <LCD_sendCommand+0x200>
    1e1c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e1e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1e20:	e8 e3       	ldi	r30, 0x38	; 56
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	89 ad       	ldd	r24, Y+57	; 0x39
    1e26:	80 83       	st	Z, r24
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	a0 e8       	ldi	r26, 0x80	; 128
    1e2e:	bf e3       	ldi	r27, 0x3F	; 63
    1e30:	89 8f       	std	Y+25, r24	; 0x19
    1e32:	9a 8f       	std	Y+26, r25	; 0x1a
    1e34:	ab 8f       	std	Y+27, r26	; 0x1b
    1e36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e38:	69 8d       	ldd	r22, Y+25	; 0x19
    1e3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4a e7       	ldi	r20, 0x7A	; 122
    1e46:	53 e4       	ldi	r21, 0x43	; 67
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	8d 8b       	std	Y+21, r24	; 0x15
    1e52:	9e 8b       	std	Y+22, r25	; 0x16
    1e54:	af 8b       	std	Y+23, r26	; 0x17
    1e56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e58:	6d 89       	ldd	r22, Y+21	; 0x15
    1e5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e8       	ldi	r20, 0x80	; 128
    1e66:	5f e3       	ldi	r21, 0x3F	; 63
    1e68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e6c:	88 23       	and	r24, r24
    1e6e:	2c f4       	brge	.+10     	; 0x1e7a <LCD_sendCommand+0x262>
		__ticks = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	9c 8b       	std	Y+20, r25	; 0x14
    1e76:	8b 8b       	std	Y+19, r24	; 0x13
    1e78:	3f c0       	rjmp	.+126    	; 0x1ef8 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1e7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e80:	98 8d       	ldd	r25, Y+24	; 0x18
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	3f ef       	ldi	r19, 0xFF	; 255
    1e86:	4f e7       	ldi	r20, 0x7F	; 127
    1e88:	57 e4       	ldi	r21, 0x47	; 71
    1e8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e8e:	18 16       	cp	r1, r24
    1e90:	4c f5       	brge	.+82     	; 0x1ee4 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e92:	69 8d       	ldd	r22, Y+25	; 0x19
    1e94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9c 8b       	std	Y+20, r25	; 0x14
    1eb8:	8b 8b       	std	Y+19, r24	; 0x13
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <LCD_sendCommand+0x2c2>
    1ebc:	89 e1       	ldi	r24, 0x19	; 25
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9a 8b       	std	Y+18, r25	; 0x12
    1ec2:	89 8b       	std	Y+17, r24	; 0x11
    1ec4:	89 89       	ldd	r24, Y+17	; 0x11
    1ec6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <LCD_sendCommand+0x2b0>
    1ecc:	9a 8b       	std	Y+18, r25	; 0x12
    1ece:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	9c 8b       	std	Y+20, r25	; 0x14
    1ed8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eda:	8b 89       	ldd	r24, Y+19	; 0x13
    1edc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	69 f7       	brne	.-38     	; 0x1ebc <LCD_sendCommand+0x2a4>
    1ee2:	14 c0       	rjmp	.+40     	; 0x1f0c <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eea:	98 8d       	ldd	r25, Y+24	; 0x18
    1eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9c 8b       	std	Y+20, r25	; 0x14
    1ef6:	8b 8b       	std	Y+19, r24	; 0x13
    1ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    1efa:	9c 89       	ldd	r25, Y+20	; 0x14
    1efc:	98 8b       	std	Y+16, r25	; 0x10
    1efe:	8f 87       	std	Y+15, r24	; 0x0f
    1f00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f02:	98 89       	ldd	r25, Y+16	; 0x10
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <LCD_sendCommand+0x2ec>
    1f08:	98 8b       	std	Y+16, r25	; 0x10
    1f0a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1f0c:	a2 e3       	ldi	r26, 0x32	; 50
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e2 e3       	ldi	r30, 0x32	; 50
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	8f 7b       	andi	r24, 0xBF	; 191
    1f18:	8c 93       	st	X, r24
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	a0 e8       	ldi	r26, 0x80	; 128
    1f20:	bf e3       	ldi	r27, 0x3F	; 63
    1f22:	8b 87       	std	Y+11, r24	; 0x0b
    1f24:	9c 87       	std	Y+12, r25	; 0x0c
    1f26:	ad 87       	std	Y+13, r26	; 0x0d
    1f28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4a e7       	ldi	r20, 0x7A	; 122
    1f38:	53 e4       	ldi	r21, 0x43	; 67
    1f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	8f 83       	std	Y+7, r24	; 0x07
    1f44:	98 87       	std	Y+8, r25	; 0x08
    1f46:	a9 87       	std	Y+9, r26	; 0x09
    1f48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4c:	78 85       	ldd	r23, Y+8	; 0x08
    1f4e:	89 85       	ldd	r24, Y+9	; 0x09
    1f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	2c f4       	brge	.+10     	; 0x1f6c <LCD_sendCommand+0x354>
		__ticks = 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	9e 83       	std	Y+6, r25	; 0x06
    1f68:	8d 83       	std	Y+5, r24	; 0x05
    1f6a:	3f c0       	rjmp	.+126    	; 0x1fea <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6e:	78 85       	ldd	r23, Y+8	; 0x08
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	3f ef       	ldi	r19, 0xFF	; 255
    1f78:	4f e7       	ldi	r20, 0x7F	; 127
    1f7a:	57 e4       	ldi	r21, 0x47	; 71
    1f7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f80:	18 16       	cp	r1, r24
    1f82:	4c f5       	brge	.+82     	; 0x1fd6 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e2       	ldi	r20, 0x20	; 32
    1f92:	51 e4       	ldi	r21, 0x41	; 65
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9e 83       	std	Y+6, r25	; 0x06
    1faa:	8d 83       	std	Y+5, r24	; 0x05
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <LCD_sendCommand+0x3b4>
    1fae:	89 e1       	ldi	r24, 0x19	; 25
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <LCD_sendCommand+0x3a2>
    1fbe:	9c 83       	std	Y+4, r25	; 0x04
    1fc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	69 f7       	brne	.-38     	; 0x1fae <LCD_sendCommand+0x396>
    1fd4:	14 c0       	rjmp	.+40     	; 0x1ffe <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd8:	78 85       	ldd	r23, Y+8	; 0x08
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	9e 81       	ldd	r25, Y+6	; 0x06
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <LCD_sendCommand+0x3de>
    1ffa:	9a 83       	std	Y+2, r25	; 0x02
    1ffc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1ffe:	e9 96       	adiw	r28, 0x39	; 57
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <LCD_displayCharacter>:

void LCD_displayCharacter(u8 data)
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	e9 97       	sbiw	r28, 0x39	; 57
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2026:	a2 e3       	ldi	r26, 0x32	; 50
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e2 e3       	ldi	r30, 0x32	; 50
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	80 61       	ori	r24, 0x10	; 16
    2032:	8c 93       	st	X, r24
	CLR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2034:	a2 e3       	ldi	r26, 0x32	; 50
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e2 e3       	ldi	r30, 0x32	; 50
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	8f 7d       	andi	r24, 0xDF	; 223
    2040:	8c 93       	st	X, r24
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a0 e8       	ldi	r26, 0x80	; 128
    2048:	bf e3       	ldi	r27, 0x3F	; 63
    204a:	8d ab       	std	Y+53, r24	; 0x35
    204c:	9e ab       	std	Y+54, r25	; 0x36
    204e:	af ab       	std	Y+55, r26	; 0x37
    2050:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2052:	6d a9       	ldd	r22, Y+53	; 0x35
    2054:	7e a9       	ldd	r23, Y+54	; 0x36
    2056:	8f a9       	ldd	r24, Y+55	; 0x37
    2058:	98 ad       	ldd	r25, Y+56	; 0x38
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4a e7       	ldi	r20, 0x7A	; 122
    2060:	53 e4       	ldi	r21, 0x43	; 67
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	89 ab       	std	Y+49, r24	; 0x31
    206c:	9a ab       	std	Y+50, r25	; 0x32
    206e:	ab ab       	std	Y+51, r26	; 0x33
    2070:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2072:	69 a9       	ldd	r22, Y+49	; 0x31
    2074:	7a a9       	ldd	r23, Y+50	; 0x32
    2076:	8b a9       	ldd	r24, Y+51	; 0x33
    2078:	9c a9       	ldd	r25, Y+52	; 0x34
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	2c f4       	brge	.+10     	; 0x2094 <LCD_displayCharacter+0x84>
		__ticks = 1;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	98 ab       	std	Y+48, r25	; 0x30
    2090:	8f a7       	std	Y+47, r24	; 0x2f
    2092:	3f c0       	rjmp	.+126    	; 0x2112 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    2094:	69 a9       	ldd	r22, Y+49	; 0x31
    2096:	7a a9       	ldd	r23, Y+50	; 0x32
    2098:	8b a9       	ldd	r24, Y+51	; 0x33
    209a:	9c a9       	ldd	r25, Y+52	; 0x34
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	3f ef       	ldi	r19, 0xFF	; 255
    20a0:	4f e7       	ldi	r20, 0x7F	; 127
    20a2:	57 e4       	ldi	r21, 0x47	; 71
    20a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a8:	18 16       	cp	r1, r24
    20aa:	4c f5       	brge	.+82     	; 0x20fe <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ac:	6d a9       	ldd	r22, Y+53	; 0x35
    20ae:	7e a9       	ldd	r23, Y+54	; 0x36
    20b0:	8f a9       	ldd	r24, Y+55	; 0x37
    20b2:	98 ad       	ldd	r25, Y+56	; 0x38
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e2       	ldi	r20, 0x20	; 32
    20ba:	51 e4       	ldi	r21, 0x41	; 65
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	98 ab       	std	Y+48, r25	; 0x30
    20d2:	8f a7       	std	Y+47, r24	; 0x2f
    20d4:	0f c0       	rjmp	.+30     	; 0x20f4 <LCD_displayCharacter+0xe4>
    20d6:	89 e1       	ldi	r24, 0x19	; 25
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9e a7       	std	Y+46, r25	; 0x2e
    20dc:	8d a7       	std	Y+45, r24	; 0x2d
    20de:	8d a5       	ldd	r24, Y+45	; 0x2d
    20e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <LCD_displayCharacter+0xd2>
    20e6:	9e a7       	std	Y+46, r25	; 0x2e
    20e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ec:	98 a9       	ldd	r25, Y+48	; 0x30
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	98 ab       	std	Y+48, r25	; 0x30
    20f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f6:	98 a9       	ldd	r25, Y+48	; 0x30
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	69 f7       	brne	.-38     	; 0x20d6 <LCD_displayCharacter+0xc6>
    20fc:	14 c0       	rjmp	.+40     	; 0x2126 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2100:	7a a9       	ldd	r23, Y+50	; 0x32
    2102:	8b a9       	ldd	r24, Y+51	; 0x33
    2104:	9c a9       	ldd	r25, Y+52	; 0x34
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	98 ab       	std	Y+48, r25	; 0x30
    2110:	8f a7       	std	Y+47, r24	; 0x2f
    2112:	8f a5       	ldd	r24, Y+47	; 0x2f
    2114:	98 a9       	ldd	r25, Y+48	; 0x30
    2116:	9c a7       	std	Y+44, r25	; 0x2c
    2118:	8b a7       	std	Y+43, r24	; 0x2b
    211a:	8b a5       	ldd	r24, Y+43	; 0x2b
    211c:	9c a5       	ldd	r25, Y+44	; 0x2c
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <LCD_displayCharacter+0x10e>
    2122:	9c a7       	std	Y+44, r25	; 0x2c
    2124:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2126:	a2 e3       	ldi	r26, 0x32	; 50
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e2 e3       	ldi	r30, 0x32	; 50
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	80 64       	ori	r24, 0x40	; 64
    2132:	8c 93       	st	X, r24
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 e8       	ldi	r26, 0x80	; 128
    213a:	bf e3       	ldi	r27, 0x3F	; 63
    213c:	8f a3       	std	Y+39, r24	; 0x27
    213e:	98 a7       	std	Y+40, r25	; 0x28
    2140:	a9 a7       	std	Y+41, r26	; 0x29
    2142:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2144:	6f a1       	ldd	r22, Y+39	; 0x27
    2146:	78 a5       	ldd	r23, Y+40	; 0x28
    2148:	89 a5       	ldd	r24, Y+41	; 0x29
    214a:	9a a5       	ldd	r25, Y+42	; 0x2a
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	4a e7       	ldi	r20, 0x7A	; 122
    2152:	53 e4       	ldi	r21, 0x43	; 67
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	8b a3       	std	Y+35, r24	; 0x23
    215e:	9c a3       	std	Y+36, r25	; 0x24
    2160:	ad a3       	std	Y+37, r26	; 0x25
    2162:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2164:	6b a1       	ldd	r22, Y+35	; 0x23
    2166:	7c a1       	ldd	r23, Y+36	; 0x24
    2168:	8d a1       	ldd	r24, Y+37	; 0x25
    216a:	9e a1       	ldd	r25, Y+38	; 0x26
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2178:	88 23       	and	r24, r24
    217a:	2c f4       	brge	.+10     	; 0x2186 <LCD_displayCharacter+0x176>
		__ticks = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9a a3       	std	Y+34, r25	; 0x22
    2182:	89 a3       	std	Y+33, r24	; 0x21
    2184:	3f c0       	rjmp	.+126    	; 0x2204 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2186:	6b a1       	ldd	r22, Y+35	; 0x23
    2188:	7c a1       	ldd	r23, Y+36	; 0x24
    218a:	8d a1       	ldd	r24, Y+37	; 0x25
    218c:	9e a1       	ldd	r25, Y+38	; 0x26
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	3f ef       	ldi	r19, 0xFF	; 255
    2192:	4f e7       	ldi	r20, 0x7F	; 127
    2194:	57 e4       	ldi	r21, 0x47	; 71
    2196:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219a:	18 16       	cp	r1, r24
    219c:	4c f5       	brge	.+82     	; 0x21f0 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219e:	6f a1       	ldd	r22, Y+39	; 0x27
    21a0:	78 a5       	ldd	r23, Y+40	; 0x28
    21a2:	89 a5       	ldd	r24, Y+41	; 0x29
    21a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e2       	ldi	r20, 0x20	; 32
    21ac:	51 e4       	ldi	r21, 0x41	; 65
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9a a3       	std	Y+34, r25	; 0x22
    21c4:	89 a3       	std	Y+33, r24	; 0x21
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <LCD_displayCharacter+0x1d6>
    21c8:	89 e1       	ldi	r24, 0x19	; 25
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	98 a3       	std	Y+32, r25	; 0x20
    21ce:	8f 8f       	std	Y+31, r24	; 0x1f
    21d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21d2:	98 a1       	ldd	r25, Y+32	; 0x20
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_displayCharacter+0x1c4>
    21d8:	98 a3       	std	Y+32, r25	; 0x20
    21da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21dc:	89 a1       	ldd	r24, Y+33	; 0x21
    21de:	9a a1       	ldd	r25, Y+34	; 0x22
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	9a a3       	std	Y+34, r25	; 0x22
    21e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e6:	89 a1       	ldd	r24, Y+33	; 0x21
    21e8:	9a a1       	ldd	r25, Y+34	; 0x22
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	69 f7       	brne	.-38     	; 0x21c8 <LCD_displayCharacter+0x1b8>
    21ee:	14 c0       	rjmp	.+40     	; 0x2218 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f0:	6b a1       	ldd	r22, Y+35	; 0x23
    21f2:	7c a1       	ldd	r23, Y+36	; 0x24
    21f4:	8d a1       	ldd	r24, Y+37	; 0x25
    21f6:	9e a1       	ldd	r25, Y+38	; 0x26
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9a a3       	std	Y+34, r25	; 0x22
    2202:	89 a3       	std	Y+33, r24	; 0x21
    2204:	89 a1       	ldd	r24, Y+33	; 0x21
    2206:	9a a1       	ldd	r25, Y+34	; 0x22
    2208:	9e 8f       	std	Y+30, r25	; 0x1e
    220a:	8d 8f       	std	Y+29, r24	; 0x1d
    220c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    220e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <LCD_displayCharacter+0x200>
    2214:	9e 8f       	std	Y+30, r25	; 0x1e
    2216:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    2218:	e8 e3       	ldi	r30, 0x38	; 56
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	89 ad       	ldd	r24, Y+57	; 0x39
    221e:	80 83       	st	Z, r24
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	a0 e8       	ldi	r26, 0x80	; 128
    2226:	bf e3       	ldi	r27, 0x3F	; 63
    2228:	89 8f       	std	Y+25, r24	; 0x19
    222a:	9a 8f       	std	Y+26, r25	; 0x1a
    222c:	ab 8f       	std	Y+27, r26	; 0x1b
    222e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2230:	69 8d       	ldd	r22, Y+25	; 0x19
    2232:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2234:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2236:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	4a e7       	ldi	r20, 0x7A	; 122
    223e:	53 e4       	ldi	r21, 0x43	; 67
    2240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	8d 8b       	std	Y+21, r24	; 0x15
    224a:	9e 8b       	std	Y+22, r25	; 0x16
    224c:	af 8b       	std	Y+23, r26	; 0x17
    224e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2250:	6d 89       	ldd	r22, Y+21	; 0x15
    2252:	7e 89       	ldd	r23, Y+22	; 0x16
    2254:	8f 89       	ldd	r24, Y+23	; 0x17
    2256:	98 8d       	ldd	r25, Y+24	; 0x18
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e8       	ldi	r20, 0x80	; 128
    225e:	5f e3       	ldi	r21, 0x3F	; 63
    2260:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2264:	88 23       	and	r24, r24
    2266:	2c f4       	brge	.+10     	; 0x2272 <LCD_displayCharacter+0x262>
		__ticks = 1;
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	9c 8b       	std	Y+20, r25	; 0x14
    226e:	8b 8b       	std	Y+19, r24	; 0x13
    2270:	3f c0       	rjmp	.+126    	; 0x22f0 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2272:	6d 89       	ldd	r22, Y+21	; 0x15
    2274:	7e 89       	ldd	r23, Y+22	; 0x16
    2276:	8f 89       	ldd	r24, Y+23	; 0x17
    2278:	98 8d       	ldd	r25, Y+24	; 0x18
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	3f ef       	ldi	r19, 0xFF	; 255
    227e:	4f e7       	ldi	r20, 0x7F	; 127
    2280:	57 e4       	ldi	r21, 0x47	; 71
    2282:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2286:	18 16       	cp	r1, r24
    2288:	4c f5       	brge	.+82     	; 0x22dc <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228a:	69 8d       	ldd	r22, Y+25	; 0x19
    228c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    228e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2290:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e2       	ldi	r20, 0x20	; 32
    2298:	51 e4       	ldi	r21, 0x41	; 65
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	bc 01       	movw	r22, r24
    22a4:	cd 01       	movw	r24, r26
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9c 8b       	std	Y+20, r25	; 0x14
    22b0:	8b 8b       	std	Y+19, r24	; 0x13
    22b2:	0f c0       	rjmp	.+30     	; 0x22d2 <LCD_displayCharacter+0x2c2>
    22b4:	89 e1       	ldi	r24, 0x19	; 25
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9a 8b       	std	Y+18, r25	; 0x12
    22ba:	89 8b       	std	Y+17, r24	; 0x11
    22bc:	89 89       	ldd	r24, Y+17	; 0x11
    22be:	9a 89       	ldd	r25, Y+18	; 0x12
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <LCD_displayCharacter+0x2b0>
    22c4:	9a 8b       	std	Y+18, r25	; 0x12
    22c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ca:	9c 89       	ldd	r25, Y+20	; 0x14
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	9c 8b       	std	Y+20, r25	; 0x14
    22d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d2:	8b 89       	ldd	r24, Y+19	; 0x13
    22d4:	9c 89       	ldd	r25, Y+20	; 0x14
    22d6:	00 97       	sbiw	r24, 0x00	; 0
    22d8:	69 f7       	brne	.-38     	; 0x22b4 <LCD_displayCharacter+0x2a4>
    22da:	14 c0       	rjmp	.+40     	; 0x2304 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22dc:	6d 89       	ldd	r22, Y+21	; 0x15
    22de:	7e 89       	ldd	r23, Y+22	; 0x16
    22e0:	8f 89       	ldd	r24, Y+23	; 0x17
    22e2:	98 8d       	ldd	r25, Y+24	; 0x18
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9c 8b       	std	Y+20, r25	; 0x14
    22ee:	8b 8b       	std	Y+19, r24	; 0x13
    22f0:	8b 89       	ldd	r24, Y+19	; 0x13
    22f2:	9c 89       	ldd	r25, Y+20	; 0x14
    22f4:	98 8b       	std	Y+16, r25	; 0x10
    22f6:	8f 87       	std	Y+15, r24	; 0x0f
    22f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22fa:	98 89       	ldd	r25, Y+16	; 0x10
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_displayCharacter+0x2ec>
    2300:	98 8b       	std	Y+16, r25	; 0x10
    2302:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2304:	a2 e3       	ldi	r26, 0x32	; 50
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e2 e3       	ldi	r30, 0x32	; 50
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	8f 7b       	andi	r24, 0xBF	; 191
    2310:	8c 93       	st	X, r24
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	a0 e8       	ldi	r26, 0x80	; 128
    2318:	bf e3       	ldi	r27, 0x3F	; 63
    231a:	8b 87       	std	Y+11, r24	; 0x0b
    231c:	9c 87       	std	Y+12, r25	; 0x0c
    231e:	ad 87       	std	Y+13, r26	; 0x0d
    2320:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2322:	6b 85       	ldd	r22, Y+11	; 0x0b
    2324:	7c 85       	ldd	r23, Y+12	; 0x0c
    2326:	8d 85       	ldd	r24, Y+13	; 0x0d
    2328:	9e 85       	ldd	r25, Y+14	; 0x0e
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	4a e7       	ldi	r20, 0x7A	; 122
    2330:	53 e4       	ldi	r21, 0x43	; 67
    2332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	8f 83       	std	Y+7, r24	; 0x07
    233c:	98 87       	std	Y+8, r25	; 0x08
    233e:	a9 87       	std	Y+9, r26	; 0x09
    2340:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2342:	6f 81       	ldd	r22, Y+7	; 0x07
    2344:	78 85       	ldd	r23, Y+8	; 0x08
    2346:	89 85       	ldd	r24, Y+9	; 0x09
    2348:	9a 85       	ldd	r25, Y+10	; 0x0a
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	5f e3       	ldi	r21, 0x3F	; 63
    2352:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2356:	88 23       	and	r24, r24
    2358:	2c f4       	brge	.+10     	; 0x2364 <LCD_displayCharacter+0x354>
		__ticks = 1;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9e 83       	std	Y+6, r25	; 0x06
    2360:	8d 83       	std	Y+5, r24	; 0x05
    2362:	3f c0       	rjmp	.+126    	; 0x23e2 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2364:	6f 81       	ldd	r22, Y+7	; 0x07
    2366:	78 85       	ldd	r23, Y+8	; 0x08
    2368:	89 85       	ldd	r24, Y+9	; 0x09
    236a:	9a 85       	ldd	r25, Y+10	; 0x0a
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	3f ef       	ldi	r19, 0xFF	; 255
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2378:	18 16       	cp	r1, r24
    237a:	4c f5       	brge	.+82     	; 0x23ce <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237c:	6b 85       	ldd	r22, Y+11	; 0x0b
    237e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2380:	8d 85       	ldd	r24, Y+13	; 0x0d
    2382:	9e 85       	ldd	r25, Y+14	; 0x0e
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e2       	ldi	r20, 0x20	; 32
    238a:	51 e4       	ldi	r21, 0x41	; 65
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	bc 01       	movw	r22, r24
    2396:	cd 01       	movw	r24, r26
    2398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
    23a4:	0f c0       	rjmp	.+30     	; 0x23c4 <LCD_displayCharacter+0x3b4>
    23a6:	89 e1       	ldi	r24, 0x19	; 25
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9c 83       	std	Y+4, r25	; 0x04
    23ac:	8b 83       	std	Y+3, r24	; 0x03
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <LCD_displayCharacter+0x3a2>
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ba:	8d 81       	ldd	r24, Y+5	; 0x05
    23bc:	9e 81       	ldd	r25, Y+6	; 0x06
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	9e 83       	std	Y+6, r25	; 0x06
    23c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c4:	8d 81       	ldd	r24, Y+5	; 0x05
    23c6:	9e 81       	ldd	r25, Y+6	; 0x06
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	69 f7       	brne	.-38     	; 0x23a6 <LCD_displayCharacter+0x396>
    23cc:	14 c0       	rjmp	.+40     	; 0x23f6 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ce:	6f 81       	ldd	r22, Y+7	; 0x07
    23d0:	78 85       	ldd	r23, Y+8	; 0x08
    23d2:	89 85       	ldd	r24, Y+9	; 0x09
    23d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9e 83       	std	Y+6, r25	; 0x06
    23e0:	8d 83       	std	Y+5, r24	; 0x05
    23e2:	8d 81       	ldd	r24, Y+5	; 0x05
    23e4:	9e 81       	ldd	r25, Y+6	; 0x06
    23e6:	9a 83       	std	Y+2, r25	; 0x02
    23e8:	89 83       	std	Y+1, r24	; 0x01
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	9a 81       	ldd	r25, Y+2	; 0x02
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <LCD_displayCharacter+0x3de>
    23f2:	9a 83       	std	Y+2, r25	; 0x02
    23f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    23f6:	e9 96       	adiw	r28, 0x39	; 57
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	00 d0       	rcall	.+0      	; 0x240e <LCD_displayString+0x6>
    240e:	0f 92       	push	r0
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	9b 83       	std	Y+3, r25	; 0x03
    2416:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2418:	19 82       	std	Y+1, r1	; 0x01
    241a:	0e c0       	rjmp	.+28     	; 0x2438 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	9b 81       	ldd	r25, Y+3	; 0x03
    2426:	fc 01       	movw	r30, r24
    2428:	e2 0f       	add	r30, r18
    242a:	f3 1f       	adc	r31, r19
    242c:	80 81       	ld	r24, Z
    242e:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_displayCharacter>
		i++;
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	8f 5f       	subi	r24, 0xFF	; 255
    2436:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	u8 i = 0;
	while(Str[i] != '\0')
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	9b 81       	ldd	r25, Y+3	; 0x03
    2442:	fc 01       	movw	r30, r24
    2444:	e2 0f       	add	r30, r18
    2446:	f3 1f       	adc	r31, r19
    2448:	80 81       	ld	r24, Z
    244a:	88 23       	and	r24, r24
    244c:	39 f7       	brne	.-50     	; 0x241c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	08 95       	ret

0000245a <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <LCD_sendCommand>
}
    2468:	cf 91       	pop	r28
    246a:	df 91       	pop	r29
    246c:	08 95       	ret

0000246e <LCD_goToRowColumn>:

void LCD_goToRowColumn(u8 row,u8 col)
{
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	00 d0       	rcall	.+0      	; 0x2474 <LCD_goToRowColumn+0x6>
    2474:	00 d0       	rcall	.+0      	; 0x2476 <LCD_goToRowColumn+0x8>
    2476:	0f 92       	push	r0
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	8a 83       	std	Y+2, r24	; 0x02
    247e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	3d 83       	std	Y+5, r19	; 0x05
    2488:	2c 83       	std	Y+4, r18	; 0x04
    248a:	8c 81       	ldd	r24, Y+4	; 0x04
    248c:	9d 81       	ldd	r25, Y+5	; 0x05
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	91 05       	cpc	r25, r1
    2492:	c1 f0       	breq	.+48     	; 0x24c4 <LCD_goToRowColumn+0x56>
    2494:	2c 81       	ldd	r18, Y+4	; 0x04
    2496:	3d 81       	ldd	r19, Y+5	; 0x05
    2498:	22 30       	cpi	r18, 0x02	; 2
    249a:	31 05       	cpc	r19, r1
    249c:	2c f4       	brge	.+10     	; 0x24a8 <LCD_goToRowColumn+0x3a>
    249e:	8c 81       	ldd	r24, Y+4	; 0x04
    24a0:	9d 81       	ldd	r25, Y+5	; 0x05
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	61 f0       	breq	.+24     	; 0x24be <LCD_goToRowColumn+0x50>
    24a6:	19 c0       	rjmp	.+50     	; 0x24da <LCD_goToRowColumn+0x6c>
    24a8:	2c 81       	ldd	r18, Y+4	; 0x04
    24aa:	3d 81       	ldd	r19, Y+5	; 0x05
    24ac:	22 30       	cpi	r18, 0x02	; 2
    24ae:	31 05       	cpc	r19, r1
    24b0:	69 f0       	breq	.+26     	; 0x24cc <LCD_goToRowColumn+0x5e>
    24b2:	8c 81       	ldd	r24, Y+4	; 0x04
    24b4:	9d 81       	ldd	r25, Y+5	; 0x05
    24b6:	83 30       	cpi	r24, 0x03	; 3
    24b8:	91 05       	cpc	r25, r1
    24ba:	61 f0       	breq	.+24     	; 0x24d4 <LCD_goToRowColumn+0x66>
    24bc:	0e c0       	rjmp	.+28     	; 0x24da <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	0b c0       	rjmp	.+22     	; 0x24da <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	80 5c       	subi	r24, 0xC0	; 192
    24c8:	89 83       	std	Y+1, r24	; 0x01
    24ca:	07 c0       	rjmp	.+14     	; 0x24da <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	80 5f       	subi	r24, 0xF0	; 240
    24d0:	89 83       	std	Y+1, r24	; 0x01
    24d2:	03 c0       	rjmp	.+6      	; 0x24da <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	80 5b       	subi	r24, 0xB0	; 176
    24d8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	80 68       	ori	r24, 0x80	; 128
    24de:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <LCD_sendCommand>
}
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <LCD_goToRowColumn30>:
void LCD_goToRowColumn30(u8 local)
{
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	0f 92       	push	r0
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(local | SET_CURSOR_LOCATION);
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	80 68       	ori	r24, 0x80	; 128
    2502:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <LCD_sendCommand>
}
    2506:	0f 90       	pop	r0
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <LCD_goToRowColumn20>:
void LCD_goToRowColumn20(u8 row,u8 col)
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	00 d0       	rcall	.+0      	; 0x2514 <LCD_goToRowColumn20+0x6>
    2514:	00 d0       	rcall	.+0      	; 0x2516 <LCD_goToRowColumn20+0x8>
    2516:	0f 92       	push	r0
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
    251c:	8a 83       	std	Y+2, r24	; 0x02
    251e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;

	/* first of all calculate the required address */
	switch(row)
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	3d 83       	std	Y+5, r19	; 0x05
    2528:	2c 83       	std	Y+4, r18	; 0x04
    252a:	8c 81       	ldd	r24, Y+4	; 0x04
    252c:	9d 81       	ldd	r25, Y+5	; 0x05
    252e:	81 30       	cpi	r24, 0x01	; 1
    2530:	91 05       	cpc	r25, r1
    2532:	c9 f0       	breq	.+50     	; 0x2566 <LCD_goToRowColumn20+0x58>
    2534:	2c 81       	ldd	r18, Y+4	; 0x04
    2536:	3d 81       	ldd	r19, Y+5	; 0x05
    2538:	22 30       	cpi	r18, 0x02	; 2
    253a:	31 05       	cpc	r19, r1
    253c:	2c f4       	brge	.+10     	; 0x2548 <LCD_goToRowColumn20+0x3a>
    253e:	8c 81       	ldd	r24, Y+4	; 0x04
    2540:	9d 81       	ldd	r25, Y+5	; 0x05
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	61 f0       	breq	.+24     	; 0x255e <LCD_goToRowColumn20+0x50>
    2546:	1a c0       	rjmp	.+52     	; 0x257c <LCD_goToRowColumn20+0x6e>
    2548:	2c 81       	ldd	r18, Y+4	; 0x04
    254a:	3d 81       	ldd	r19, Y+5	; 0x05
    254c:	22 30       	cpi	r18, 0x02	; 2
    254e:	31 05       	cpc	r19, r1
    2550:	71 f0       	breq	.+28     	; 0x256e <LCD_goToRowColumn20+0x60>
    2552:	8c 81       	ldd	r24, Y+4	; 0x04
    2554:	9d 81       	ldd	r25, Y+5	; 0x05
    2556:	83 30       	cpi	r24, 0x03	; 3
    2558:	91 05       	cpc	r25, r1
    255a:	69 f0       	breq	.+26     	; 0x2576 <LCD_goToRowColumn20+0x68>
    255c:	0f c0       	rjmp	.+30     	; 0x257c <LCD_goToRowColumn20+0x6e>
	{
		case 0:
				Address=col+0x80;
    255e:	8b 81       	ldd	r24, Y+3	; 0x03
    2560:	80 58       	subi	r24, 0x80	; 128
    2562:	89 83       	std	Y+1, r24	; 0x01
    2564:	0b c0       	rjmp	.+22     	; 0x257c <LCD_goToRowColumn20+0x6e>
				break;
		case 1:
				Address=col+0xC0;
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	80 54       	subi	r24, 0x40	; 64
    256a:	89 83       	std	Y+1, r24	; 0x01
    256c:	07 c0       	rjmp	.+14     	; 0x257c <LCD_goToRowColumn20+0x6e>
				break;
		case 2:
				Address=col+0x94;
    256e:	8b 81       	ldd	r24, Y+3	; 0x03
    2570:	8c 56       	subi	r24, 0x6C	; 108
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	03 c0       	rjmp	.+6      	; 0x257c <LCD_goToRowColumn20+0x6e>
				break;
		case 3:
				Address=col+0xD4;
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	8c 52       	subi	r24, 0x2C	; 44
    257a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	80 68       	ori	r24, 0x80	; 128
    2580:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <LCD_sendCommand>
}
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <LCD_displayStringRowColumn>:


void LCD_displayStringRowColumn(u8 row,u8 col,const char *Str)
{
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	00 d0       	rcall	.+0      	; 0x259a <LCD_displayStringRowColumn+0x6>
    259a:	00 d0       	rcall	.+0      	; 0x259c <LCD_displayStringRowColumn+0x8>
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
    25a0:	89 83       	std	Y+1, r24	; 0x01
    25a2:	6a 83       	std	Y+2, r22	; 0x02
    25a4:	5c 83       	std	Y+4, r21	; 0x04
    25a6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	6a 81       	ldd	r22, Y+2	; 0x02
    25ac:	0e 94 37 12 	call	0x246e	; 0x246e <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	9c 81       	ldd	r25, Y+4	; 0x04
    25b4:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
}
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <LCD_intgerToString>:

void LCD_intgerToString(u16 data)
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	62 97       	sbiw	r28, 0x12	; 18
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	cd bf       	out	0x3d, r28	; 61
    25da:	9a 8b       	std	Y+18, r25	; 0x12
    25dc:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    25de:	89 89       	ldd	r24, Y+17	; 0x11
    25e0:	9a 89       	ldd	r25, Y+18	; 0x12
    25e2:	9e 01       	movw	r18, r28
    25e4:	2f 5f       	subi	r18, 0xFF	; 255
    25e6:	3f 4f       	sbci	r19, 0xFF	; 255
    25e8:	b9 01       	movw	r22, r18
    25ea:	4a e0       	ldi	r20, 0x0A	; 10
    25ec:	50 e0       	ldi	r21, 0x00	; 0
    25ee:	0e 94 41 14 	call	0x2882	; 0x2882 <itoa>
   LCD_displayString(buff);
    25f2:	ce 01       	movw	r24, r28
    25f4:	01 96       	adiw	r24, 0x01	; 1
    25f6:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_displayString>
}
    25fa:	62 96       	adiw	r28, 0x12	; 18
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <UART_init>:
 */
#include "uart.h"
#define UBRR_VALUE ((Frequancy/(8*USART_BAUDRATE))-1)

void UART_init(void)
{
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRA,U2X);    /* Configure UART double speed rate*/
    2614:	ab e2       	ldi	r26, 0x2B	; 43
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	eb e2       	ldi	r30, 0x2B	; 43
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	82 60       	ori	r24, 0x02	; 2
    2620:	8c 93       	st	X, r24
	/* RXCIE = TXCIE = UDRIE = 0  (No interrupt Mode)
	 * RXEN = TXEN = 1 (Enable receive and transmit)
	 * UCSZ2 = 0 (8-bit data size)
	 * RXB8 & TXB8 not used
	 */
	UCSRB = 0;
    2622:	ea e2       	ldi	r30, 0x2A	; 42
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	10 82       	st	Z, r1
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2628:	ea e2       	ldi	r30, 0x2A	; 42
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	88 e1       	ldi	r24, 0x18	; 24
    262e:	80 83       	st	Z, r24
	 * UPM1:0 = 0 (Disable parity)
	 * USBS   = 0 (One bit stop bit)
	 * UCSZ1  = UCSZ0 = 1 (8-bit data size)
	 * UCPOL  = 0  (0 for Asynch. mode)
	 */
	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1 <<UCSZ0);
    2630:	e0 e4       	ldi	r30, 0x40	; 64
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	86 e8       	ldi	r24, 0x86	; 134
    2636:	80 83       	st	Z, r24

	/* Write data in UBRR*/
	UBRRH = (UBRR_VALUE>>8);
    2638:	e0 e4       	ldi	r30, 0x40	; 64
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	10 82       	st	Z, r1
	UBRRL = UBRR_VALUE;
    263e:	e9 e2       	ldi	r30, 0x29	; 41
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	8c e0       	ldi	r24, 0x0C	; 12
    2644:	80 83       	st	Z, r24
}
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <UART_sendByte>:



void UART_sendByte(const u8 data)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	0f 92       	push	r0
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE is 1 once UDR register is empty*/
	while(!GET_BIT(UCSRA,UDRE));
    2658:	eb e2       	ldi	r30, 0x2B	; 43
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	82 95       	swap	r24
    2660:	86 95       	lsr	r24
    2662:	87 70       	andi	r24, 0x07	; 7
    2664:	88 2f       	mov	r24, r24
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	81 70       	andi	r24, 0x01	; 1
    266a:	90 70       	andi	r25, 0x00	; 0
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	a1 f3       	breq	.-24     	; 0x2658 <UART_sendByte+0xc>
	/*Once polling finished (UDR is empty) load ur new data in the UDR register*/
	UDR = data;
    2670:	ec e2       	ldi	r30, 0x2C	; 44
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	80 83       	st	Z, r24
}
    2678:	0f 90       	pop	r0
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <UART_recieveByte>:
u8   UART_recieveByte(void)
{
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(UCSRA,RXC));
    2688:	eb e2       	ldi	r30, 0x2B	; 43
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	88 23       	and	r24, r24
    2690:	dc f7       	brge	.-10     	; 0x2688 <UART_recieveByte+0x8>
	return UDR;
    2692:	ec e2       	ldi	r30, 0x2C	; 44
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
}
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <UART_sendString>:
void UART_sendString(const char* str)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <UART_sendString+0x6>
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	0a c0       	rjmp	.+20     	; 0x26c2 <UART_sendString+0x24>
	while(*str != '\0')
	{
		UART_sendByte(*str);
    26ae:	e9 81       	ldd	r30, Y+1	; 0x01
    26b0:	fa 81       	ldd	r31, Y+2	; 0x02
    26b2:	80 81       	ld	r24, Z
    26b4:	0e 94 26 13 	call	0x264c	; 0x264c <UART_sendByte>
		str++;
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	9a 81       	ldd	r25, Y+2	; 0x02
    26bc:	01 96       	adiw	r24, 0x01	; 1
    26be:	9a 83       	std	Y+2, r25	; 0x02
    26c0:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(UCSRA,RXC));
	return UDR;
}
void UART_sendString(const char* str)
{
	while(*str != '\0')
    26c2:	e9 81       	ldd	r30, Y+1	; 0x01
    26c4:	fa 81       	ldd	r31, Y+2	; 0x02
    26c6:	80 81       	ld	r24, Z
    26c8:	88 23       	and	r24, r24
    26ca:	89 f7       	brne	.-30     	; 0x26ae <UART_sendString+0x10>
	{
		UART_sendByte(*str);
		str++;
	}
}
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <UART_recieveString>:

void UART_recieveString(char* str)
{
    26d6:	0f 93       	push	r16
    26d8:	1f 93       	push	r17
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <UART_recieveString+0xa>
    26e0:	0f 92       	push	r0
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	9b 83       	std	Y+3, r25	; 0x03
    26e8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    26ea:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_recieveByte();
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	28 2f       	mov	r18, r24
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	8a 81       	ldd	r24, Y+2	; 0x02
    26f4:	9b 81       	ldd	r25, Y+3	; 0x03
    26f6:	8c 01       	movw	r16, r24
    26f8:	02 0f       	add	r16, r18
    26fa:	13 1f       	adc	r17, r19
    26fc:	0e 94 40 13 	call	0x2680	; 0x2680 <UART_recieveByte>
    2700:	f8 01       	movw	r30, r16
    2702:	80 83       	st	Z, r24
    2704:	0f c0       	rjmp	.+30     	; 0x2724 <UART_recieveString+0x4e>
	while(str[i] != '\0')
	{
		i++;
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	8f 5f       	subi	r24, 0xFF	; 255
    270a:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_recieveByte();
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	9b 81       	ldd	r25, Y+3	; 0x03
    2716:	8c 01       	movw	r16, r24
    2718:	02 0f       	add	r16, r18
    271a:	13 1f       	adc	r17, r19
    271c:	0e 94 40 13 	call	0x2680	; 0x2680 <UART_recieveByte>
    2720:	f8 01       	movw	r30, r16
    2722:	80 83       	st	Z, r24

void UART_recieveString(char* str)
{
	u8 i = 0;
	str[i] = UART_recieveByte();
	while(str[i] != '\0')
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	9b 81       	ldd	r25, Y+3	; 0x03
    272e:	fc 01       	movw	r30, r24
    2730:	e2 0f       	add	r30, r18
    2732:	f3 1f       	adc	r31, r19
    2734:	80 81       	ld	r24, Z
    2736:	88 23       	and	r24, r24
    2738:	31 f7       	brne	.-52     	; 0x2706 <UART_recieveString+0x30>
	{
		i++;
		str[i] = UART_recieveByte();
	}
	str[i]= '\0';
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	9b 81       	ldd	r25, Y+3	; 0x03
    2744:	fc 01       	movw	r30, r24
    2746:	e2 0f       	add	r30, r18
    2748:	f3 1f       	adc	r31, r19
    274a:	10 82       	st	Z, r1

}
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	1f 91       	pop	r17
    2758:	0f 91       	pop	r16
    275a:	08 95       	ret

0000275c <__mulsi3>:
    275c:	62 9f       	mul	r22, r18
    275e:	d0 01       	movw	r26, r0
    2760:	73 9f       	mul	r23, r19
    2762:	f0 01       	movw	r30, r0
    2764:	82 9f       	mul	r24, r18
    2766:	e0 0d       	add	r30, r0
    2768:	f1 1d       	adc	r31, r1
    276a:	64 9f       	mul	r22, r20
    276c:	e0 0d       	add	r30, r0
    276e:	f1 1d       	adc	r31, r1
    2770:	92 9f       	mul	r25, r18
    2772:	f0 0d       	add	r31, r0
    2774:	83 9f       	mul	r24, r19
    2776:	f0 0d       	add	r31, r0
    2778:	74 9f       	mul	r23, r20
    277a:	f0 0d       	add	r31, r0
    277c:	65 9f       	mul	r22, r21
    277e:	f0 0d       	add	r31, r0
    2780:	99 27       	eor	r25, r25
    2782:	72 9f       	mul	r23, r18
    2784:	b0 0d       	add	r27, r0
    2786:	e1 1d       	adc	r30, r1
    2788:	f9 1f       	adc	r31, r25
    278a:	63 9f       	mul	r22, r19
    278c:	b0 0d       	add	r27, r0
    278e:	e1 1d       	adc	r30, r1
    2790:	f9 1f       	adc	r31, r25
    2792:	bd 01       	movw	r22, r26
    2794:	cf 01       	movw	r24, r30
    2796:	11 24       	eor	r1, r1
    2798:	08 95       	ret

0000279a <__divmodsi4>:
    279a:	97 fb       	bst	r25, 7
    279c:	09 2e       	mov	r0, r25
    279e:	05 26       	eor	r0, r21
    27a0:	0e d0       	rcall	.+28     	; 0x27be <__divmodsi4_neg1>
    27a2:	57 fd       	sbrc	r21, 7
    27a4:	04 d0       	rcall	.+8      	; 0x27ae <__divmodsi4_neg2>
    27a6:	14 d0       	rcall	.+40     	; 0x27d0 <__udivmodsi4>
    27a8:	0a d0       	rcall	.+20     	; 0x27be <__divmodsi4_neg1>
    27aa:	00 1c       	adc	r0, r0
    27ac:	38 f4       	brcc	.+14     	; 0x27bc <__divmodsi4_exit>

000027ae <__divmodsi4_neg2>:
    27ae:	50 95       	com	r21
    27b0:	40 95       	com	r20
    27b2:	30 95       	com	r19
    27b4:	21 95       	neg	r18
    27b6:	3f 4f       	sbci	r19, 0xFF	; 255
    27b8:	4f 4f       	sbci	r20, 0xFF	; 255
    27ba:	5f 4f       	sbci	r21, 0xFF	; 255

000027bc <__divmodsi4_exit>:
    27bc:	08 95       	ret

000027be <__divmodsi4_neg1>:
    27be:	f6 f7       	brtc	.-4      	; 0x27bc <__divmodsi4_exit>
    27c0:	90 95       	com	r25
    27c2:	80 95       	com	r24
    27c4:	70 95       	com	r23
    27c6:	61 95       	neg	r22
    27c8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ca:	8f 4f       	sbci	r24, 0xFF	; 255
    27cc:	9f 4f       	sbci	r25, 0xFF	; 255
    27ce:	08 95       	ret

000027d0 <__udivmodsi4>:
    27d0:	a1 e2       	ldi	r26, 0x21	; 33
    27d2:	1a 2e       	mov	r1, r26
    27d4:	aa 1b       	sub	r26, r26
    27d6:	bb 1b       	sub	r27, r27
    27d8:	fd 01       	movw	r30, r26
    27da:	0d c0       	rjmp	.+26     	; 0x27f6 <__udivmodsi4_ep>

000027dc <__udivmodsi4_loop>:
    27dc:	aa 1f       	adc	r26, r26
    27de:	bb 1f       	adc	r27, r27
    27e0:	ee 1f       	adc	r30, r30
    27e2:	ff 1f       	adc	r31, r31
    27e4:	a2 17       	cp	r26, r18
    27e6:	b3 07       	cpc	r27, r19
    27e8:	e4 07       	cpc	r30, r20
    27ea:	f5 07       	cpc	r31, r21
    27ec:	20 f0       	brcs	.+8      	; 0x27f6 <__udivmodsi4_ep>
    27ee:	a2 1b       	sub	r26, r18
    27f0:	b3 0b       	sbc	r27, r19
    27f2:	e4 0b       	sbc	r30, r20
    27f4:	f5 0b       	sbc	r31, r21

000027f6 <__udivmodsi4_ep>:
    27f6:	66 1f       	adc	r22, r22
    27f8:	77 1f       	adc	r23, r23
    27fa:	88 1f       	adc	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	1a 94       	dec	r1
    2800:	69 f7       	brne	.-38     	; 0x27dc <__udivmodsi4_loop>
    2802:	60 95       	com	r22
    2804:	70 95       	com	r23
    2806:	80 95       	com	r24
    2808:	90 95       	com	r25
    280a:	9b 01       	movw	r18, r22
    280c:	ac 01       	movw	r20, r24
    280e:	bd 01       	movw	r22, r26
    2810:	cf 01       	movw	r24, r30
    2812:	08 95       	ret

00002814 <__prologue_saves__>:
    2814:	2f 92       	push	r2
    2816:	3f 92       	push	r3
    2818:	4f 92       	push	r4
    281a:	5f 92       	push	r5
    281c:	6f 92       	push	r6
    281e:	7f 92       	push	r7
    2820:	8f 92       	push	r8
    2822:	9f 92       	push	r9
    2824:	af 92       	push	r10
    2826:	bf 92       	push	r11
    2828:	cf 92       	push	r12
    282a:	df 92       	push	r13
    282c:	ef 92       	push	r14
    282e:	ff 92       	push	r15
    2830:	0f 93       	push	r16
    2832:	1f 93       	push	r17
    2834:	cf 93       	push	r28
    2836:	df 93       	push	r29
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	ca 1b       	sub	r28, r26
    283e:	db 0b       	sbc	r29, r27
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	09 94       	ijmp

0000284c <__epilogue_restores__>:
    284c:	2a 88       	ldd	r2, Y+18	; 0x12
    284e:	39 88       	ldd	r3, Y+17	; 0x11
    2850:	48 88       	ldd	r4, Y+16	; 0x10
    2852:	5f 84       	ldd	r5, Y+15	; 0x0f
    2854:	6e 84       	ldd	r6, Y+14	; 0x0e
    2856:	7d 84       	ldd	r7, Y+13	; 0x0d
    2858:	8c 84       	ldd	r8, Y+12	; 0x0c
    285a:	9b 84       	ldd	r9, Y+11	; 0x0b
    285c:	aa 84       	ldd	r10, Y+10	; 0x0a
    285e:	b9 84       	ldd	r11, Y+9	; 0x09
    2860:	c8 84       	ldd	r12, Y+8	; 0x08
    2862:	df 80       	ldd	r13, Y+7	; 0x07
    2864:	ee 80       	ldd	r14, Y+6	; 0x06
    2866:	fd 80       	ldd	r15, Y+5	; 0x05
    2868:	0c 81       	ldd	r16, Y+4	; 0x04
    286a:	1b 81       	ldd	r17, Y+3	; 0x03
    286c:	aa 81       	ldd	r26, Y+2	; 0x02
    286e:	b9 81       	ldd	r27, Y+1	; 0x01
    2870:	ce 0f       	add	r28, r30
    2872:	d1 1d       	adc	r29, r1
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	ed 01       	movw	r28, r26
    2880:	08 95       	ret

00002882 <itoa>:
    2882:	fb 01       	movw	r30, r22
    2884:	9f 01       	movw	r18, r30
    2886:	e8 94       	clt
    2888:	42 30       	cpi	r20, 0x02	; 2
    288a:	c4 f0       	brlt	.+48     	; 0x28bc <itoa+0x3a>
    288c:	45 32       	cpi	r20, 0x25	; 37
    288e:	b4 f4       	brge	.+44     	; 0x28bc <itoa+0x3a>
    2890:	4a 30       	cpi	r20, 0x0A	; 10
    2892:	29 f4       	brne	.+10     	; 0x289e <itoa+0x1c>
    2894:	97 fb       	bst	r25, 7
    2896:	1e f4       	brtc	.+6      	; 0x289e <itoa+0x1c>
    2898:	90 95       	com	r25
    289a:	81 95       	neg	r24
    289c:	9f 4f       	sbci	r25, 0xFF	; 255
    289e:	64 2f       	mov	r22, r20
    28a0:	77 27       	eor	r23, r23
    28a2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__udivmodhi4>
    28a6:	80 5d       	subi	r24, 0xD0	; 208
    28a8:	8a 33       	cpi	r24, 0x3A	; 58
    28aa:	0c f0       	brlt	.+2      	; 0x28ae <itoa+0x2c>
    28ac:	89 5d       	subi	r24, 0xD9	; 217
    28ae:	81 93       	st	Z+, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	a1 f7       	brne	.-24     	; 0x289e <itoa+0x1c>
    28b6:	16 f4       	brtc	.+4      	; 0x28bc <itoa+0x3a>
    28b8:	5d e2       	ldi	r21, 0x2D	; 45
    28ba:	51 93       	st	Z+, r21
    28bc:	10 82       	st	Z, r1
    28be:	c9 01       	movw	r24, r18
    28c0:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <strrev>

000028c4 <strrev>:
    28c4:	dc 01       	movw	r26, r24
    28c6:	fc 01       	movw	r30, r24
    28c8:	67 2f       	mov	r22, r23
    28ca:	71 91       	ld	r23, Z+
    28cc:	77 23       	and	r23, r23
    28ce:	e1 f7       	brne	.-8      	; 0x28c8 <strrev+0x4>
    28d0:	32 97       	sbiw	r30, 0x02	; 2
    28d2:	04 c0       	rjmp	.+8      	; 0x28dc <strrev+0x18>
    28d4:	7c 91       	ld	r23, X
    28d6:	6d 93       	st	X+, r22
    28d8:	70 83       	st	Z, r23
    28da:	62 91       	ld	r22, -Z
    28dc:	ae 17       	cp	r26, r30
    28de:	bf 07       	cpc	r27, r31
    28e0:	c8 f3       	brcs	.-14     	; 0x28d4 <strrev+0x10>
    28e2:	08 95       	ret

000028e4 <__udivmodhi4>:
    28e4:	aa 1b       	sub	r26, r26
    28e6:	bb 1b       	sub	r27, r27
    28e8:	51 e1       	ldi	r21, 0x11	; 17
    28ea:	07 c0       	rjmp	.+14     	; 0x28fa <__udivmodhi4_ep>

000028ec <__udivmodhi4_loop>:
    28ec:	aa 1f       	adc	r26, r26
    28ee:	bb 1f       	adc	r27, r27
    28f0:	a6 17       	cp	r26, r22
    28f2:	b7 07       	cpc	r27, r23
    28f4:	10 f0       	brcs	.+4      	; 0x28fa <__udivmodhi4_ep>
    28f6:	a6 1b       	sub	r26, r22
    28f8:	b7 0b       	sbc	r27, r23

000028fa <__udivmodhi4_ep>:
    28fa:	88 1f       	adc	r24, r24
    28fc:	99 1f       	adc	r25, r25
    28fe:	5a 95       	dec	r21
    2900:	a9 f7       	brne	.-22     	; 0x28ec <__udivmodhi4_loop>
    2902:	80 95       	com	r24
    2904:	90 95       	com	r25
    2906:	bc 01       	movw	r22, r24
    2908:	cd 01       	movw	r24, r26
    290a:	08 95       	ret

0000290c <_exit>:
    290c:	f8 94       	cli

0000290e <__stop_program>:
    290e:	ff cf       	rjmp	.-2      	; 0x290e <__stop_program>
