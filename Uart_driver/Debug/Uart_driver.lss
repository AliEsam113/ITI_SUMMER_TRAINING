
Uart_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000318c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  0000318c  00003220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000c2  008000c2  00003282  2**0
                  ALLOC
  3 .stab         00002ad8  00000000  00000000  00003284  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011a1  00000000  00000000  00005d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006efd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000703d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000071ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aa90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000abf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ae7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b64b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 10 	call	0x2188	; 0x2188 <main>
      8a:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 eb       	ldi	r26, 0xB9	; 185
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 eb       	ldi	r24, 0xB9	; 185
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_u8SetPinDirection>:
#include "DIO_interface.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	6b 83       	std	Y+3, r22	; 0x03
     b5e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState= OK;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	88 30       	cpi	r24, 0x08	; 8
     b68:	08 f0       	brcs	.+2      	; 0xb6c <DIO_u8SetPinDirection+0x26>
     b6a:	f1 c0       	rjmp	.+482    	; 0xd4e <DIO_u8SetPinDirection+0x208>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
     b6c:	8c 81       	ldd	r24, Y+4	; 0x04
     b6e:	88 23       	and	r24, r24
     b70:	09 f0       	breq	.+2      	; 0xb74 <DIO_u8SetPinDirection+0x2e>
     b72:	76 c0       	rjmp	.+236    	; 0xc60 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
     b74:	8a 81       	ldd	r24, Y+2	; 0x02
     b76:	28 2f       	mov	r18, r24
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	38 87       	std	Y+8, r19	; 0x08
     b7c:	2f 83       	std	Y+7, r18	; 0x07
     b7e:	8f 81       	ldd	r24, Y+7	; 0x07
     b80:	98 85       	ldd	r25, Y+8	; 0x08
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	91 05       	cpc	r25, r1
     b86:	59 f1       	breq	.+86     	; 0xbde <DIO_u8SetPinDirection+0x98>
     b88:	2f 81       	ldd	r18, Y+7	; 0x07
     b8a:	38 85       	ldd	r19, Y+8	; 0x08
     b8c:	22 30       	cpi	r18, 0x02	; 2
     b8e:	31 05       	cpc	r19, r1
     b90:	2c f4       	brge	.+10     	; 0xb9c <DIO_u8SetPinDirection+0x56>
     b92:	8f 81       	ldd	r24, Y+7	; 0x07
     b94:	98 85       	ldd	r25, Y+8	; 0x08
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	69 f0       	breq	.+26     	; 0xbb4 <DIO_u8SetPinDirection+0x6e>
     b9a:	60 c0       	rjmp	.+192    	; 0xc5c <DIO_u8SetPinDirection+0x116>
     b9c:	2f 81       	ldd	r18, Y+7	; 0x07
     b9e:	38 85       	ldd	r19, Y+8	; 0x08
     ba0:	22 30       	cpi	r18, 0x02	; 2
     ba2:	31 05       	cpc	r19, r1
     ba4:	89 f1       	breq	.+98     	; 0xc08 <DIO_u8SetPinDirection+0xc2>
     ba6:	8f 81       	ldd	r24, Y+7	; 0x07
     ba8:	98 85       	ldd	r25, Y+8	; 0x08
     baa:	83 30       	cpi	r24, 0x03	; 3
     bac:	91 05       	cpc	r25, r1
     bae:	09 f4       	brne	.+2      	; 0xbb2 <DIO_u8SetPinDirection+0x6c>
     bb0:	40 c0       	rjmp	.+128    	; 0xc32 <DIO_u8SetPinDirection+0xec>
     bb2:	54 c0       	rjmp	.+168    	; 0xc5c <DIO_u8SetPinDirection+0x116>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <DIO_u8SetPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <DIO_u8SetPinDirection+0x88>
     bd6:	80 95       	com	r24
     bd8:	84 23       	and	r24, r20
     bda:	8c 93       	st	X, r24
     bdc:	b9 c0       	rjmp	.+370    	; 0xd50 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
     bde:	a7 e3       	ldi	r26, 0x37	; 55
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e7 e3       	ldi	r30, 0x37	; 55
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 2e       	mov	r0, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <DIO_u8SetPinDirection+0xb6>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <DIO_u8SetPinDirection+0xb2>
     c00:	80 95       	com	r24
     c02:	84 23       	and	r24, r20
     c04:	8c 93       	st	X, r24
     c06:	a4 c0       	rjmp	.+328    	; 0xd50 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
     c08:	a4 e3       	ldi	r26, 0x34	; 52
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e4 e3       	ldi	r30, 0x34	; 52
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	48 2f       	mov	r20, r24
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	02 2e       	mov	r0, r18
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <DIO_u8SetPinDirection+0xe0>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	0a 94       	dec	r0
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <DIO_u8SetPinDirection+0xdc>
     c2a:	80 95       	com	r24
     c2c:	84 23       	and	r24, r20
     c2e:	8c 93       	st	X, r24
     c30:	8f c0       	rjmp	.+286    	; 0xd50 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
     c32:	a1 e3       	ldi	r26, 0x31	; 49
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e1 e3       	ldi	r30, 0x31	; 49
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_u8SetPinDirection+0x10a>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_u8SetPinDirection+0x106>
     c54:	80 95       	com	r24
     c56:	84 23       	and	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	7a c0       	rjmp	.+244    	; 0xd50 <DIO_u8SetPinDirection+0x20a>
			default: Local_u8ErrorState=NOK; 			break;
     c5c:	19 82       	std	Y+1, r1	; 0x01
     c5e:	78 c0       	rjmp	.+240    	; 0xd50 <DIO_u8SetPinDirection+0x20a>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
     c60:	8c 81       	ldd	r24, Y+4	; 0x04
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	09 f0       	breq	.+2      	; 0xc68 <DIO_u8SetPinDirection+0x122>
     c66:	71 c0       	rjmp	.+226    	; 0xd4a <DIO_u8SetPinDirection+0x204>
		{
			switch(Copy_u8Port)
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	3e 83       	std	Y+6, r19	; 0x06
     c70:	2d 83       	std	Y+5, r18	; 0x05
     c72:	8d 81       	ldd	r24, Y+5	; 0x05
     c74:	9e 81       	ldd	r25, Y+6	; 0x06
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	91 05       	cpc	r25, r1
     c7a:	49 f1       	breq	.+82     	; 0xcce <DIO_u8SetPinDirection+0x188>
     c7c:	2d 81       	ldd	r18, Y+5	; 0x05
     c7e:	3e 81       	ldd	r19, Y+6	; 0x06
     c80:	22 30       	cpi	r18, 0x02	; 2
     c82:	31 05       	cpc	r19, r1
     c84:	2c f4       	brge	.+10     	; 0xc90 <DIO_u8SetPinDirection+0x14a>
     c86:	8d 81       	ldd	r24, Y+5	; 0x05
     c88:	9e 81       	ldd	r25, Y+6	; 0x06
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	61 f0       	breq	.+24     	; 0xca6 <DIO_u8SetPinDirection+0x160>
     c8e:	5b c0       	rjmp	.+182    	; 0xd46 <DIO_u8SetPinDirection+0x200>
     c90:	2d 81       	ldd	r18, Y+5	; 0x05
     c92:	3e 81       	ldd	r19, Y+6	; 0x06
     c94:	22 30       	cpi	r18, 0x02	; 2
     c96:	31 05       	cpc	r19, r1
     c98:	71 f1       	breq	.+92     	; 0xcf6 <DIO_u8SetPinDirection+0x1b0>
     c9a:	8d 81       	ldd	r24, Y+5	; 0x05
     c9c:	9e 81       	ldd	r25, Y+6	; 0x06
     c9e:	83 30       	cpi	r24, 0x03	; 3
     ca0:	91 05       	cpc	r25, r1
     ca2:	e9 f1       	breq	.+122    	; 0xd1e <DIO_u8SetPinDirection+0x1d8>
     ca4:	50 c0       	rjmp	.+160    	; 0xd46 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
     ca6:	aa e3       	ldi	r26, 0x3A	; 58
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ea e3       	ldi	r30, 0x3A	; 58
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	48 2f       	mov	r20, r24
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	02 2e       	mov	r0, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <DIO_u8SetPinDirection+0x17e>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <DIO_u8SetPinDirection+0x17a>
     cc8:	84 2b       	or	r24, r20
     cca:	8c 93       	st	X, r24
     ccc:	41 c0       	rjmp	.+130    	; 0xd50 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
     cce:	a7 e3       	ldi	r26, 0x37	; 55
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e7 e3       	ldi	r30, 0x37	; 55
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	48 2f       	mov	r20, r24
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 2e       	mov	r0, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <DIO_u8SetPinDirection+0x1a6>
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	0a 94       	dec	r0
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <DIO_u8SetPinDirection+0x1a2>
     cf0:	84 2b       	or	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	2d c0       	rjmp	.+90     	; 0xd50 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
     cf6:	a4 e3       	ldi	r26, 0x34	; 52
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e4 e3       	ldi	r30, 0x34	; 52
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_u8SetPinDirection+0x1ce>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_u8SetPinDirection+0x1ca>
     d18:	84 2b       	or	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	19 c0       	rjmp	.+50     	; 0xd50 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
     d1e:	a1 e3       	ldi	r26, 0x31	; 49
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e1 e3       	ldi	r30, 0x31	; 49
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_u8SetPinDirection+0x1f6>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_u8SetPinDirection+0x1f2>
     d40:	84 2b       	or	r24, r20
     d42:	8c 93       	st	X, r24
     d44:	05 c0       	rjmp	.+10     	; 0xd50 <DIO_u8SetPinDirection+0x20a>
			default: Local_u8ErrorState=NOK; 			break;
     d46:	19 82       	std	Y+1, r1	; 0x01
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <DIO_u8SetPinDirection+0x20a>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
     d4a:	19 82       	std	Y+1, r1	; 0x01
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <DIO_u8SetPinDirection+0x20a>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
     d4e:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     d50:	89 81       	ldd	r24, Y+1	; 0x01
}
     d52:	28 96       	adiw	r28, 0x08	; 8
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <DIO_u8SetPortDirection>:


u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	00 d0       	rcall	.+0      	; 0xd6a <DIO_u8SetPortDirection+0x6>
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <DIO_u8SetPortDirection+0x8>
     d6c:	0f 92       	push	r0
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	8a 83       	std	Y+2, r24	; 0x02
     d74:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= OK;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Port)
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	3d 83       	std	Y+5, r19	; 0x05
     d82:	2c 83       	std	Y+4, r18	; 0x04
     d84:	8c 81       	ldd	r24, Y+4	; 0x04
     d86:	9d 81       	ldd	r25, Y+5	; 0x05
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	91 05       	cpc	r25, r1
     d8c:	d1 f0       	breq	.+52     	; 0xdc2 <DIO_u8SetPortDirection+0x5e>
     d8e:	2c 81       	ldd	r18, Y+4	; 0x04
     d90:	3d 81       	ldd	r19, Y+5	; 0x05
     d92:	22 30       	cpi	r18, 0x02	; 2
     d94:	31 05       	cpc	r19, r1
     d96:	2c f4       	brge	.+10     	; 0xda2 <DIO_u8SetPortDirection+0x3e>
     d98:	8c 81       	ldd	r24, Y+4	; 0x04
     d9a:	9d 81       	ldd	r25, Y+5	; 0x05
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	61 f0       	breq	.+24     	; 0xdb8 <DIO_u8SetPortDirection+0x54>
     da0:	1f c0       	rjmp	.+62     	; 0xde0 <DIO_u8SetPortDirection+0x7c>
     da2:	2c 81       	ldd	r18, Y+4	; 0x04
     da4:	3d 81       	ldd	r19, Y+5	; 0x05
     da6:	22 30       	cpi	r18, 0x02	; 2
     da8:	31 05       	cpc	r19, r1
     daa:	81 f0       	breq	.+32     	; 0xdcc <DIO_u8SetPortDirection+0x68>
     dac:	8c 81       	ldd	r24, Y+4	; 0x04
     dae:	9d 81       	ldd	r25, Y+5	; 0x05
     db0:	83 30       	cpi	r24, 0x03	; 3
     db2:	91 05       	cpc	r25, r1
     db4:	81 f0       	breq	.+32     	; 0xdd6 <DIO_u8SetPortDirection+0x72>
     db6:	14 c0       	rjmp	.+40     	; 0xde0 <DIO_u8SetPortDirection+0x7c>
	{
	case DIO_u8PORTA: DDRA= Copy_u8Direction; break;
     db8:	ea e3       	ldi	r30, 0x3A	; 58
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	80 83       	st	Z, r24
     dc0:	10 c0       	rjmp	.+32     	; 0xde2 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB= Copy_u8Direction; break;
     dc2:	e7 e3       	ldi	r30, 0x37	; 55
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	80 83       	st	Z, r24
     dca:	0b c0       	rjmp	.+22     	; 0xde2 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC= Copy_u8Direction; break;
     dcc:	e4 e3       	ldi	r30, 0x34	; 52
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	80 83       	st	Z, r24
     dd4:	06 c0       	rjmp	.+12     	; 0xde2 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD= Copy_u8Direction; break;
     dd6:	e1 e3       	ldi	r30, 0x31	; 49
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	80 83       	st	Z, r24
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=NOK; 		  break;
     de0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     de2:	89 81       	ldd	r24, Y+1	; 0x01
}
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	08 95       	ret

00000df4 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	28 97       	sbiw	r28, 0x08	; 8
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	8a 83       	std	Y+2, r24	; 0x02
     e0a:	6b 83       	std	Y+3, r22	; 0x03
     e0c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState= OK;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	88 30       	cpi	r24, 0x08	; 8
     e16:	08 f0       	brcs	.+2      	; 0xe1a <DIO_u8SetPinValue+0x26>
     e18:	f1 c0       	rjmp	.+482    	; 0xffc <DIO_u8SetPinValue+0x208>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	88 23       	and	r24, r24
     e1e:	09 f0       	breq	.+2      	; 0xe22 <DIO_u8SetPinValue+0x2e>
     e20:	76 c0       	rjmp	.+236    	; 0xf0e <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	38 87       	std	Y+8, r19	; 0x08
     e2a:	2f 83       	std	Y+7, r18	; 0x07
     e2c:	8f 81       	ldd	r24, Y+7	; 0x07
     e2e:	98 85       	ldd	r25, Y+8	; 0x08
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	91 05       	cpc	r25, r1
     e34:	59 f1       	breq	.+86     	; 0xe8c <DIO_u8SetPinValue+0x98>
     e36:	2f 81       	ldd	r18, Y+7	; 0x07
     e38:	38 85       	ldd	r19, Y+8	; 0x08
     e3a:	22 30       	cpi	r18, 0x02	; 2
     e3c:	31 05       	cpc	r19, r1
     e3e:	2c f4       	brge	.+10     	; 0xe4a <DIO_u8SetPinValue+0x56>
     e40:	8f 81       	ldd	r24, Y+7	; 0x07
     e42:	98 85       	ldd	r25, Y+8	; 0x08
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	69 f0       	breq	.+26     	; 0xe62 <DIO_u8SetPinValue+0x6e>
     e48:	60 c0       	rjmp	.+192    	; 0xf0a <DIO_u8SetPinValue+0x116>
     e4a:	2f 81       	ldd	r18, Y+7	; 0x07
     e4c:	38 85       	ldd	r19, Y+8	; 0x08
     e4e:	22 30       	cpi	r18, 0x02	; 2
     e50:	31 05       	cpc	r19, r1
     e52:	89 f1       	breq	.+98     	; 0xeb6 <DIO_u8SetPinValue+0xc2>
     e54:	8f 81       	ldd	r24, Y+7	; 0x07
     e56:	98 85       	ldd	r25, Y+8	; 0x08
     e58:	83 30       	cpi	r24, 0x03	; 3
     e5a:	91 05       	cpc	r25, r1
     e5c:	09 f4       	brne	.+2      	; 0xe60 <DIO_u8SetPinValue+0x6c>
     e5e:	40 c0       	rjmp	.+128    	; 0xee0 <DIO_u8SetPinValue+0xec>
     e60:	54 c0       	rjmp	.+168    	; 0xf0a <DIO_u8SetPinValue+0x116>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
     e62:	ab e3       	ldi	r26, 0x3B	; 59
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	eb e3       	ldi	r30, 0x3B	; 59
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_u8SetPinValue+0x8c>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_u8SetPinValue+0x88>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	b9 c0       	rjmp	.+370    	; 0xffe <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
     e8c:	a8 e3       	ldi	r26, 0x38	; 56
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e8 e3       	ldi	r30, 0x38	; 56
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_u8SetPinValue+0xb6>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_u8SetPinValue+0xb2>
     eae:	80 95       	com	r24
     eb0:	84 23       	and	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	a4 c0       	rjmp	.+328    	; 0xffe <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
     eb6:	a5 e3       	ldi	r26, 0x35	; 53
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e5 e3       	ldi	r30, 0x35	; 53
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_u8SetPinValue+0xe0>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_u8SetPinValue+0xdc>
     ed8:	80 95       	com	r24
     eda:	84 23       	and	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	8f c0       	rjmp	.+286    	; 0xffe <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
     ee0:	a2 e3       	ldi	r26, 0x32	; 50
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e2 e3       	ldi	r30, 0x32	; 50
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_u8SetPinValue+0x10a>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_u8SetPinValue+0x106>
     f02:	80 95       	com	r24
     f04:	84 23       	and	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	7a c0       	rjmp	.+244    	; 0xffe <DIO_u8SetPinValue+0x20a>
			default: Local_u8ErrorState=NOK; 			break;
     f0a:	19 82       	std	Y+1, r1	; 0x01
     f0c:	78 c0       	rjmp	.+240    	; 0xffe <DIO_u8SetPinValue+0x20a>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
     f0e:	8c 81       	ldd	r24, Y+4	; 0x04
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	09 f0       	breq	.+2      	; 0xf16 <DIO_u8SetPinValue+0x122>
     f14:	71 c0       	rjmp	.+226    	; 0xff8 <DIO_u8SetPinValue+0x204>
		{
			switch(Copy_u8Port)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3e 83       	std	Y+6, r19	; 0x06
     f1e:	2d 83       	std	Y+5, r18	; 0x05
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	9e 81       	ldd	r25, Y+6	; 0x06
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	91 05       	cpc	r25, r1
     f28:	49 f1       	breq	.+82     	; 0xf7c <DIO_u8SetPinValue+0x188>
     f2a:	2d 81       	ldd	r18, Y+5	; 0x05
     f2c:	3e 81       	ldd	r19, Y+6	; 0x06
     f2e:	22 30       	cpi	r18, 0x02	; 2
     f30:	31 05       	cpc	r19, r1
     f32:	2c f4       	brge	.+10     	; 0xf3e <DIO_u8SetPinValue+0x14a>
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	61 f0       	breq	.+24     	; 0xf54 <DIO_u8SetPinValue+0x160>
     f3c:	5b c0       	rjmp	.+182    	; 0xff4 <DIO_u8SetPinValue+0x200>
     f3e:	2d 81       	ldd	r18, Y+5	; 0x05
     f40:	3e 81       	ldd	r19, Y+6	; 0x06
     f42:	22 30       	cpi	r18, 0x02	; 2
     f44:	31 05       	cpc	r19, r1
     f46:	71 f1       	breq	.+92     	; 0xfa4 <DIO_u8SetPinValue+0x1b0>
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	91 05       	cpc	r25, r1
     f50:	e9 f1       	breq	.+122    	; 0xfcc <DIO_u8SetPinValue+0x1d8>
     f52:	50 c0       	rjmp	.+160    	; 0xff4 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
     f54:	ab e3       	ldi	r26, 0x3B	; 59
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	eb e3       	ldi	r30, 0x3B	; 59
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <DIO_u8SetPinValue+0x17e>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <DIO_u8SetPinValue+0x17a>
     f76:	84 2b       	or	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	41 c0       	rjmp	.+130    	; 0xffe <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
     f7c:	a8 e3       	ldi	r26, 0x38	; 56
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e8 e3       	ldi	r30, 0x38	; 56
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_u8SetPinValue+0x1a6>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_u8SetPinValue+0x1a2>
     f9e:	84 2b       	or	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	2d c0       	rjmp	.+90     	; 0xffe <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
     fa4:	a5 e3       	ldi	r26, 0x35	; 53
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e5 e3       	ldi	r30, 0x35	; 53
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_u8SetPinValue+0x1ce>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_u8SetPinValue+0x1ca>
     fc6:	84 2b       	or	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	19 c0       	rjmp	.+50     	; 0xffe <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
     fcc:	a2 e3       	ldi	r26, 0x32	; 50
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e2 e3       	ldi	r30, 0x32	; 50
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_u8SetPinValue+0x1f6>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <DIO_u8SetPinValue+0x1f2>
     fee:	84 2b       	or	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <DIO_u8SetPinValue+0x20a>
			default: Local_u8ErrorState=NOK; 			break;
     ff4:	19 82       	std	Y+1, r1	; 0x01
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <DIO_u8SetPinValue+0x20a>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
     ff8:	19 82       	std	Y+1, r1	; 0x01
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <DIO_u8SetPinValue+0x20a>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
     ffc:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1000:	28 96       	adiw	r28, 0x08	; 8
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <DIO_u8SetPortValue+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <DIO_u8SetPortValue+0x8>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= OK;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port)
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3d 83       	std	Y+5, r19	; 0x05
    1030:	2c 83       	std	Y+4, r18	; 0x04
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	91 05       	cpc	r25, r1
    103a:	d1 f0       	breq	.+52     	; 0x1070 <DIO_u8SetPortValue+0x5e>
    103c:	2c 81       	ldd	r18, Y+4	; 0x04
    103e:	3d 81       	ldd	r19, Y+5	; 0x05
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	2c f4       	brge	.+10     	; 0x1050 <DIO_u8SetPortValue+0x3e>
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	61 f0       	breq	.+24     	; 0x1066 <DIO_u8SetPortValue+0x54>
    104e:	1f c0       	rjmp	.+62     	; 0x108e <DIO_u8SetPortValue+0x7c>
    1050:	2c 81       	ldd	r18, Y+4	; 0x04
    1052:	3d 81       	ldd	r19, Y+5	; 0x05
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	31 05       	cpc	r19, r1
    1058:	81 f0       	breq	.+32     	; 0x107a <DIO_u8SetPortValue+0x68>
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	83 30       	cpi	r24, 0x03	; 3
    1060:	91 05       	cpc	r25, r1
    1062:	81 f0       	breq	.+32     	; 0x1084 <DIO_u8SetPortValue+0x72>
    1064:	14 c0       	rjmp	.+40     	; 0x108e <DIO_u8SetPortValue+0x7c>
	{
	case DIO_u8PORTA: PORTA= Copy_u8Value; break;
    1066:	eb e3       	ldi	r30, 0x3B	; 59
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	80 83       	st	Z, r24
    106e:	10 c0       	rjmp	.+32     	; 0x1090 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB= Copy_u8Value; break;
    1070:	e8 e3       	ldi	r30, 0x38	; 56
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	80 83       	st	Z, r24
    1078:	0b c0       	rjmp	.+22     	; 0x1090 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC= Copy_u8Value; break;
    107a:	e5 e3       	ldi	r30, 0x35	; 53
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	80 83       	st	Z, r24
    1082:	06 c0       	rjmp	.+12     	; 0x1090 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD= Copy_u8Value; break;
    1084:	e2 e3       	ldi	r30, 0x32	; 50
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	80 83       	st	Z, r24
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=NOK; 	   break;
    108e:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	27 97       	sbiw	r28, 0x07	; 7
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	8a 83       	std	Y+2, r24	; 0x02
    10b8:	6b 83       	std	Y+3, r22	; 0x03
    10ba:	5d 83       	std	Y+5, r21	; 0x05
    10bc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState= OK;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_pu8Value != NULL)  && (Copy_u8Pin<= DIO_u8PIN7))
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	9d 81       	ldd	r25, Y+5	; 0x05
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	09 f4       	brne	.+2      	; 0x10cc <DIO_u8GetPinValue+0x2a>
    10ca:	77 c0       	rjmp	.+238    	; 0x11ba <DIO_u8GetPinValue+0x118>
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	88 30       	cpi	r24, 0x08	; 8
    10d0:	08 f0       	brcs	.+2      	; 0x10d4 <DIO_u8GetPinValue+0x32>
    10d2:	73 c0       	rjmp	.+230    	; 0x11ba <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	3f 83       	std	Y+7, r19	; 0x07
    10dc:	2e 83       	std	Y+6, r18	; 0x06
    10de:	4e 81       	ldd	r20, Y+6	; 0x06
    10e0:	5f 81       	ldd	r21, Y+7	; 0x07
    10e2:	41 30       	cpi	r20, 0x01	; 1
    10e4:	51 05       	cpc	r21, r1
    10e6:	59 f1       	breq	.+86     	; 0x113e <DIO_u8GetPinValue+0x9c>
    10e8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ea:	9f 81       	ldd	r25, Y+7	; 0x07
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	91 05       	cpc	r25, r1
    10f0:	34 f4       	brge	.+12     	; 0x10fe <DIO_u8GetPinValue+0x5c>
    10f2:	2e 81       	ldd	r18, Y+6	; 0x06
    10f4:	3f 81       	ldd	r19, Y+7	; 0x07
    10f6:	21 15       	cp	r18, r1
    10f8:	31 05       	cpc	r19, r1
    10fa:	69 f0       	breq	.+26     	; 0x1116 <DIO_u8GetPinValue+0x74>
    10fc:	5c c0       	rjmp	.+184    	; 0x11b6 <DIO_u8GetPinValue+0x114>
    10fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1100:	5f 81       	ldd	r21, Y+7	; 0x07
    1102:	42 30       	cpi	r20, 0x02	; 2
    1104:	51 05       	cpc	r21, r1
    1106:	79 f1       	breq	.+94     	; 0x1166 <DIO_u8GetPinValue+0xc4>
    1108:	8e 81       	ldd	r24, Y+6	; 0x06
    110a:	9f 81       	ldd	r25, Y+7	; 0x07
    110c:	83 30       	cpi	r24, 0x03	; 3
    110e:	91 05       	cpc	r25, r1
    1110:	09 f4       	brne	.+2      	; 0x1114 <DIO_u8GetPinValue+0x72>
    1112:	3d c0       	rjmp	.+122    	; 0x118e <DIO_u8GetPinValue+0xec>
    1114:	50 c0       	rjmp	.+160    	; 0x11b6 <DIO_u8GetPinValue+0x114>
		{
		case DIO_u8PORTA: *Copy_pu8Value= GET_BIT(PINA,Copy_u8Pin); break;
    1116:	e9 e3       	ldi	r30, 0x39	; 57
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	a9 01       	movw	r20, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_u8GetPinValue+0x8c>
    112a:	55 95       	asr	r21
    112c:	47 95       	ror	r20
    112e:	8a 95       	dec	r24
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_u8GetPinValue+0x88>
    1132:	ca 01       	movw	r24, r20
    1134:	81 70       	andi	r24, 0x01	; 1
    1136:	ec 81       	ldd	r30, Y+4	; 0x04
    1138:	fd 81       	ldd	r31, Y+5	; 0x05
    113a:	80 83       	st	Z, r24
    113c:	3f c0       	rjmp	.+126    	; 0x11bc <DIO_u8GetPinValue+0x11a>
		case DIO_u8PORTB: *Copy_pu8Value= GET_BIT(PINB,Copy_u8Pin); break;
    113e:	e6 e3       	ldi	r30, 0x36	; 54
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a9 01       	movw	r20, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_u8GetPinValue+0xb4>
    1152:	55 95       	asr	r21
    1154:	47 95       	ror	r20
    1156:	8a 95       	dec	r24
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_u8GetPinValue+0xb0>
    115a:	ca 01       	movw	r24, r20
    115c:	81 70       	andi	r24, 0x01	; 1
    115e:	ec 81       	ldd	r30, Y+4	; 0x04
    1160:	fd 81       	ldd	r31, Y+5	; 0x05
    1162:	80 83       	st	Z, r24
    1164:	2b c0       	rjmp	.+86     	; 0x11bc <DIO_u8GetPinValue+0x11a>
		case DIO_u8PORTC: *Copy_pu8Value= GET_BIT(PINC,Copy_u8Pin); break;
    1166:	e3 e3       	ldi	r30, 0x33	; 51
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a9 01       	movw	r20, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_u8GetPinValue+0xdc>
    117a:	55 95       	asr	r21
    117c:	47 95       	ror	r20
    117e:	8a 95       	dec	r24
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_u8GetPinValue+0xd8>
    1182:	ca 01       	movw	r24, r20
    1184:	81 70       	andi	r24, 0x01	; 1
    1186:	ec 81       	ldd	r30, Y+4	; 0x04
    1188:	fd 81       	ldd	r31, Y+5	; 0x05
    118a:	80 83       	st	Z, r24
    118c:	17 c0       	rjmp	.+46     	; 0x11bc <DIO_u8GetPinValue+0x11a>
		case DIO_u8PORTD: *Copy_pu8Value= GET_BIT(PIND,Copy_u8Pin); break;
    118e:	e0 e3       	ldi	r30, 0x30	; 48
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	a9 01       	movw	r20, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_u8GetPinValue+0x104>
    11a2:	55 95       	asr	r21
    11a4:	47 95       	ror	r20
    11a6:	8a 95       	dec	r24
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_u8GetPinValue+0x100>
    11aa:	ca 01       	movw	r24, r20
    11ac:	81 70       	andi	r24, 0x01	; 1
    11ae:	ec 81       	ldd	r30, Y+4	; 0x04
    11b0:	fd 81       	ldd	r31, Y+5	; 0x05
    11b2:	80 83       	st	Z, r24
    11b4:	03 c0       	rjmp	.+6      	; 0x11bc <DIO_u8GetPinValue+0x11a>
		default: Local_u8ErrorState=NOK; 							break;
    11b6:	19 82       	std	Y+1, r1	; 0x01
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <DIO_u8GetPinValue+0x11a>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    11ba:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11be:	27 96       	adiw	r28, 0x07	; 7
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <INT0_init>:
#include "INT.h"

void INT0_init(void)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_R,I_BIT);
    11d8:	af e5       	ldi	r26, 0x5F	; 95
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	ef e5       	ldi	r30, 0x5F	; 95
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	8f 77       	andi	r24, 0x7F	; 127
    11e4:	8c 93       	st	X, r24
	CLR_BIT(DDRD,PD2);
    11e6:	a1 e3       	ldi	r26, 0x31	; 49
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e1 e3       	ldi	r30, 0x31	; 49
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8b 7f       	andi	r24, 0xFB	; 251
    11f2:	8c 93       	st	X, r24
	SET_BIT(PORTD,PD2);
    11f4:	a2 e3       	ldi	r26, 0x32	; 50
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e2 e3       	ldi	r30, 0x32	; 50
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	84 60       	ori	r24, 0x04	; 4
    1200:	8c 93       	st	X, r24
	SET_BIT(GICR_R,INT0_BIT);
    1202:	ab e5       	ldi	r26, 0x5B	; 91
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	eb e5       	ldi	r30, 0x5B	; 91
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	80 64       	ori	r24, 0x40	; 64
    120e:	8c 93       	st	X, r24
	MCUCR |=(INT0_TRIGGER<<0);
    1210:	a5 e5       	ldi	r26, 0x55	; 85
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e5 e5       	ldi	r30, 0x55	; 85
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	82 60       	ori	r24, 0x02	; 2
    121c:	8c 93       	st	X, r24
	SET_BIT(SREG_R,I_BIT);
    121e:	af e5       	ldi	r26, 0x5F	; 95
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ef e5       	ldi	r30, 0x5F	; 95
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	80 68       	ori	r24, 0x80	; 128
    122a:	8c 93       	st	X, r24
}
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <INT1_init>:
void INT1_init(void)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_R,I_BIT);
    123a:	af e5       	ldi	r26, 0x5F	; 95
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	ef e5       	ldi	r30, 0x5F	; 95
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8f 77       	andi	r24, 0x7F	; 127
    1246:	8c 93       	st	X, r24
	CLR_BIT(DDRD,PD3);
    1248:	a1 e3       	ldi	r26, 0x31	; 49
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e1 e3       	ldi	r30, 0x31	; 49
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	87 7f       	andi	r24, 0xF7	; 247
    1254:	8c 93       	st	X, r24
	SET_BIT(PORTD,PD3);
    1256:	a2 e3       	ldi	r26, 0x32	; 50
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e2 e3       	ldi	r30, 0x32	; 50
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	88 60       	ori	r24, 0x08	; 8
    1262:	8c 93       	st	X, r24
	SET_BIT(GICR_R,INT1_BIT);
    1264:	ab e5       	ldi	r26, 0x5B	; 91
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	eb e5       	ldi	r30, 0x5B	; 91
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	80 68       	ori	r24, 0x80	; 128
    1270:	8c 93       	st	X, r24
	MCUCR |=(INT1_TRIGGER<<2);
    1272:	a5 e5       	ldi	r26, 0x55	; 85
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e5 e5       	ldi	r30, 0x55	; 85
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	88 60       	ori	r24, 0x08	; 8
    127e:	8c 93       	st	X, r24
	SET_BIT(SREG_R,I_BIT);
    1280:	af e5       	ldi	r26, 0x5F	; 95
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	ef e5       	ldi	r30, 0x5F	; 95
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	80 68       	ori	r24, 0x80	; 128
    128c:	8c 93       	st	X, r24
}
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <INT2_init>:
void INT2_init(void)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(SREG_R,I_BIT,DIO_u8PIN_INPUT);
    129c:	ef e5       	ldi	r30, 0x5F	; 95
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	67 e0       	ldi	r22, 0x07	; 7
    12a4:	40 e0       	ldi	r20, 0x00	; 0
    12a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DDRB,PB2,DIO_u8PIN_INPUT);
    12aa:	e7 e3       	ldi	r30, 0x37	; 55
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	62 e0       	ldi	r22, 0x02	; 2
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTB,PB2,DIO_u8PIN_OUTPUT);
    12b8:	e8 e3       	ldi	r30, 0x38	; 56
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	62 e0       	ldi	r22, 0x02	; 2
    12c0:	41 e0       	ldi	r20, 0x01	; 1
    12c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(GICR_R,INT2_BIT,DIO_u8PIN_OUTPUT);
    12c6:	eb e5       	ldi	r30, 0x5B	; 91
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	65 e0       	ldi	r22, 0x05	; 5
    12ce:	41 e0       	ldi	r20, 0x01	; 1
    12d0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	MCUCR |=(INT2_TRIGGER<<3);
    12d4:	a5 e5       	ldi	r26, 0x55	; 85
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e5 e5       	ldi	r30, 0x55	; 85
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	8c 93       	st	X, r24
	DIO_u8SetPinDirection(SREG_R,I_BIT,DIO_u8PIN_OUTPUT);
    12e0:	ef e5       	ldi	r30, 0x5F	; 95
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	67 e0       	ldi	r22, 0x07	; 7
    12e8:	41 e0       	ldi	r20, 0x01	; 1
    12ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
}
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <EXTI_init>:
void EXTI_init(void)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
#if INT0_MODE == ENABLE
	INT0_init();
    12fc:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <INT0_init>
#endif
#if INT1_MODE == ENABLE
	INT1_init();
    1300:	0e 94 19 09 	call	0x1232	; 0x1232 <INT1_init>
#endif
#if INT2_MODE == ENABLE
	INT2_init();
    1304:	0e 94 4a 09 	call	0x1294	; 0x1294 <INT2_init>
#endif
}
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <LCD_vidwritecommand>:
#include <stdio.h>
#include <stdlib.h>
#define f_cpu 8000000

extern void LCD_vidwritecommand (u8 command)
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	2f 97       	sbiw	r28, 0x0f	; 15
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	8f 87       	std	Y+15, r24	; 0x0f
	//RW=0
	DIO_u8SetPinValue (control_port,RW,DIO_u8PIN_LOW);
    1324:	83 e0       	ldi	r24, 0x03	; 3
    1326:	63 e0       	ldi	r22, 0x03	; 3
    1328:	40 e0       	ldi	r20, 0x00	; 0
    132a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
	//RS=0
	DIO_u8SetPinValue (control_port,RS,DIO_u8PIN_LOW);
    132e:	83 e0       	ldi	r24, 0x03	; 3
    1330:	62 e0       	ldi	r22, 0x02	; 2
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
	//Data
	DIO_u8SetPortValue (data_port,command);
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	6f 85       	ldd	r22, Y+15	; 0x0f
    133c:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_u8SetPortValue>
	//start execution E=1
	DIO_u8SetPinValue(control_port,E,DIO_u8PIN_HIGH);
    1340:	83 e0       	ldi	r24, 0x03	; 3
    1342:	64 e0       	ldi	r22, 0x04	; 4
    1344:	41 e0       	ldi	r20, 0x01	; 1
    1346:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a0 e0       	ldi	r26, 0x00	; 0
    1350:	b0 e4       	ldi	r27, 0x40	; 64
    1352:	8b 87       	std	Y+11, r24	; 0x0b
    1354:	9c 87       	std	Y+12, r25	; 0x0c
    1356:	ad 87       	std	Y+13, r26	; 0x0d
    1358:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135a:	6b 85       	ldd	r22, Y+11	; 0x0b
    135c:	7c 85       	ldd	r23, Y+12	; 0x0c
    135e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1360:	9e 85       	ldd	r25, Y+14	; 0x0e
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	4a e7       	ldi	r20, 0x7A	; 122
    1368:	53 e4       	ldi	r21, 0x43	; 67
    136a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	8f 83       	std	Y+7, r24	; 0x07
    1374:	98 87       	std	Y+8, r25	; 0x08
    1376:	a9 87       	std	Y+9, r26	; 0x09
    1378:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    137a:	6f 81       	ldd	r22, Y+7	; 0x07
    137c:	78 85       	ldd	r23, Y+8	; 0x08
    137e:	89 85       	ldd	r24, Y+9	; 0x09
    1380:	9a 85       	ldd	r25, Y+10	; 0x0a
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e8       	ldi	r20, 0x80	; 128
    1388:	5f e3       	ldi	r21, 0x3F	; 63
    138a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    138e:	88 23       	and	r24, r24
    1390:	2c f4       	brge	.+10     	; 0x139c <LCD_vidwritecommand+0x8e>
		__ticks = 1;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	9e 83       	std	Y+6, r25	; 0x06
    1398:	8d 83       	std	Y+5, r24	; 0x05
    139a:	3f c0       	rjmp	.+126    	; 0x141a <LCD_vidwritecommand+0x10c>
	else if (__tmp > 65535)
    139c:	6f 81       	ldd	r22, Y+7	; 0x07
    139e:	78 85       	ldd	r23, Y+8	; 0x08
    13a0:	89 85       	ldd	r24, Y+9	; 0x09
    13a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	3f ef       	ldi	r19, 0xFF	; 255
    13a8:	4f e7       	ldi	r20, 0x7F	; 127
    13aa:	57 e4       	ldi	r21, 0x47	; 71
    13ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13b0:	18 16       	cp	r1, r24
    13b2:	4c f5       	brge	.+82     	; 0x1406 <LCD_vidwritecommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e2       	ldi	r20, 0x20	; 32
    13c2:	51 e4       	ldi	r21, 0x41	; 65
    13c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	bc 01       	movw	r22, r24
    13ce:	cd 01       	movw	r24, r26
    13d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	9e 83       	std	Y+6, r25	; 0x06
    13da:	8d 83       	std	Y+5, r24	; 0x05
    13dc:	0f c0       	rjmp	.+30     	; 0x13fc <LCD_vidwritecommand+0xee>
    13de:	89 e1       	ldi	r24, 0x19	; 25
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9c 83       	std	Y+4, r25	; 0x04
    13e4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <LCD_vidwritecommand+0xdc>
    13ee:	9c 83       	std	Y+4, r25	; 0x04
    13f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	9e 81       	ldd	r25, Y+6	; 0x06
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	9e 83       	std	Y+6, r25	; 0x06
    13fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	69 f7       	brne	.-38     	; 0x13de <LCD_vidwritecommand+0xd0>
    1404:	14 c0       	rjmp	.+40     	; 0x142e <LCD_vidwritecommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1406:	6f 81       	ldd	r22, Y+7	; 0x07
    1408:	78 85       	ldd	r23, Y+8	; 0x08
    140a:	89 85       	ldd	r24, Y+9	; 0x09
    140c:	9a 85       	ldd	r25, Y+10	; 0x0a
    140e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	9e 83       	std	Y+6, r25	; 0x06
    1418:	8d 83       	std	Y+5, r24	; 0x05
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	9e 81       	ldd	r25, Y+6	; 0x06
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <LCD_vidwritecommand+0x118>
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(control_port,E,DIO_u8PIN_LOW);
    142e:	83 e0       	ldi	r24, 0x03	; 3
    1430:	64 e0       	ldi	r22, 0x04	; 4
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
}
    1438:	2f 96       	adiw	r28, 0x0f	; 15
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <LCD_vidwritedata>:
extern void LCD_vidwritedata (u8 data)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	2f 97       	sbiw	r28, 0x0f	; 15
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	8f 87       	std	Y+15, r24	; 0x0f
	//RW=0
	DIO_u8SetPinValue (control_port,RW,DIO_u8PIN_LOW);
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	63 e0       	ldi	r22, 0x03	; 3
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
	//RS=0
	DIO_u8SetPinValue (control_port,RS,DIO_u8PIN_HIGH);
    146a:	83 e0       	ldi	r24, 0x03	; 3
    146c:	62 e0       	ldi	r22, 0x02	; 2
    146e:	41 e0       	ldi	r20, 0x01	; 1
    1470:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
	//Data
	DIO_u8SetPortValue (data_port,data);
    1474:	82 e0       	ldi	r24, 0x02	; 2
    1476:	6f 85       	ldd	r22, Y+15	; 0x0f
    1478:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_u8SetPortValue>
	//start execution E=1
	DIO_u8SetPinValue(control_port,E,DIO_u8PIN_HIGH);
    147c:	83 e0       	ldi	r24, 0x03	; 3
    147e:	64 e0       	ldi	r22, 0x04	; 4
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a0 e0       	ldi	r26, 0x00	; 0
    148c:	b0 e4       	ldi	r27, 0x40	; 64
    148e:	8b 87       	std	Y+11, r24	; 0x0b
    1490:	9c 87       	std	Y+12, r25	; 0x0c
    1492:	ad 87       	std	Y+13, r26	; 0x0d
    1494:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1496:	6b 85       	ldd	r22, Y+11	; 0x0b
    1498:	7c 85       	ldd	r23, Y+12	; 0x0c
    149a:	8d 85       	ldd	r24, Y+13	; 0x0d
    149c:	9e 85       	ldd	r25, Y+14	; 0x0e
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	4a e7       	ldi	r20, 0x7A	; 122
    14a4:	53 e4       	ldi	r21, 0x43	; 67
    14a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	8f 83       	std	Y+7, r24	; 0x07
    14b0:	98 87       	std	Y+8, r25	; 0x08
    14b2:	a9 87       	std	Y+9, r26	; 0x09
    14b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14b6:	6f 81       	ldd	r22, Y+7	; 0x07
    14b8:	78 85       	ldd	r23, Y+8	; 0x08
    14ba:	89 85       	ldd	r24, Y+9	; 0x09
    14bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e8       	ldi	r20, 0x80	; 128
    14c4:	5f e3       	ldi	r21, 0x3F	; 63
    14c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ca:	88 23       	and	r24, r24
    14cc:	2c f4       	brge	.+10     	; 0x14d8 <LCD_vidwritedata+0x8e>
		__ticks = 1;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	8d 83       	std	Y+5, r24	; 0x05
    14d6:	3f c0       	rjmp	.+126    	; 0x1556 <LCD_vidwritedata+0x10c>
	else if (__tmp > 65535)
    14d8:	6f 81       	ldd	r22, Y+7	; 0x07
    14da:	78 85       	ldd	r23, Y+8	; 0x08
    14dc:	89 85       	ldd	r24, Y+9	; 0x09
    14de:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	3f ef       	ldi	r19, 0xFF	; 255
    14e4:	4f e7       	ldi	r20, 0x7F	; 127
    14e6:	57 e4       	ldi	r21, 0x47	; 71
    14e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ec:	18 16       	cp	r1, r24
    14ee:	4c f5       	brge	.+82     	; 0x1542 <LCD_vidwritedata+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e2       	ldi	r20, 0x20	; 32
    14fe:	51 e4       	ldi	r21, 0x41	; 65
    1500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	bc 01       	movw	r22, r24
    150a:	cd 01       	movw	r24, r26
    150c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	9e 83       	std	Y+6, r25	; 0x06
    1516:	8d 83       	std	Y+5, r24	; 0x05
    1518:	0f c0       	rjmp	.+30     	; 0x1538 <LCD_vidwritedata+0xee>
    151a:	89 e1       	ldi	r24, 0x19	; 25
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9c 83       	std	Y+4, r25	; 0x04
    1520:	8b 83       	std	Y+3, r24	; 0x03
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <LCD_vidwritedata+0xdc>
    152a:	9c 83       	std	Y+4, r25	; 0x04
    152c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	9e 83       	std	Y+6, r25	; 0x06
    1536:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	69 f7       	brne	.-38     	; 0x151a <LCD_vidwritedata+0xd0>
    1540:	14 c0       	rjmp	.+40     	; 0x156a <LCD_vidwritedata+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1542:	6f 81       	ldd	r22, Y+7	; 0x07
    1544:	78 85       	ldd	r23, Y+8	; 0x08
    1546:	89 85       	ldd	r24, Y+9	; 0x09
    1548:	9a 85       	ldd	r25, Y+10	; 0x0a
    154a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	9a 83       	std	Y+2, r25	; 0x02
    155c:	89 83       	std	Y+1, r24	; 0x01
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <LCD_vidwritedata+0x118>
    1566:	9a 83       	std	Y+2, r25	; 0x02
    1568:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(control_port,E,DIO_u8PIN_LOW);
    156a:	83 e0       	ldi	r24, 0x03	; 3
    156c:	64 e0       	ldi	r22, 0x04	; 4
    156e:	40 e0       	ldi	r20, 0x00	; 0
    1570:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
}
    1574:	2f 96       	adiw	r28, 0x0f	; 15
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <LCD_vidinit>:
extern void LCD_vidinit (void)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	aa 97       	sbiw	r28, 0x2a	; 42
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinDirection(control_port,RS,DIO_u8PIN_OUTPUT);
    159a:	83 e0       	ldi	r24, 0x03	; 3
    159c:	62 e0       	ldi	r22, 0x02	; 2
    159e:	41 e0       	ldi	r20, 0x01	; 1
    15a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(control_port,RW ,DIO_u8PIN_OUTPUT);
    15a4:	83 e0       	ldi	r24, 0x03	; 3
    15a6:	63 e0       	ldi	r22, 0x03	; 3
    15a8:	41 e0       	ldi	r20, 0x01	; 1
    15aa:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(control_port,E,DIO_u8PIN_OUTPUT);
    15ae:	83 e0       	ldi	r24, 0x03	; 3
    15b0:	64 e0       	ldi	r22, 0x04	; 4
    15b2:	41 e0       	ldi	r20, 0x01	; 1
    15b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPortDirection(data_port,0b11111111);
    15b8:	82 e0       	ldi	r24, 0x02	; 2
    15ba:	6f ef       	ldi	r22, 0xFF	; 255
    15bc:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_u8SetPortDirection>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a8 e4       	ldi	r26, 0x48	; 72
    15c6:	b2 e4       	ldi	r27, 0x42	; 66
    15c8:	8f a3       	std	Y+39, r24	; 0x27
    15ca:	98 a7       	std	Y+40, r25	; 0x28
    15cc:	a9 a7       	std	Y+41, r26	; 0x29
    15ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d0:	6f a1       	ldd	r22, Y+39	; 0x27
    15d2:	78 a5       	ldd	r23, Y+40	; 0x28
    15d4:	89 a5       	ldd	r24, Y+41	; 0x29
    15d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	4a e7       	ldi	r20, 0x7A	; 122
    15de:	53 e4       	ldi	r21, 0x43	; 67
    15e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	8b a3       	std	Y+35, r24	; 0x23
    15ea:	9c a3       	std	Y+36, r25	; 0x24
    15ec:	ad a3       	std	Y+37, r26	; 0x25
    15ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15f0:	6b a1       	ldd	r22, Y+35	; 0x23
    15f2:	7c a1       	ldd	r23, Y+36	; 0x24
    15f4:	8d a1       	ldd	r24, Y+37	; 0x25
    15f6:	9e a1       	ldd	r25, Y+38	; 0x26
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e8       	ldi	r20, 0x80	; 128
    15fe:	5f e3       	ldi	r21, 0x3F	; 63
    1600:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1604:	88 23       	and	r24, r24
    1606:	2c f4       	brge	.+10     	; 0x1612 <LCD_vidinit+0x8c>
		__ticks = 1;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9a a3       	std	Y+34, r25	; 0x22
    160e:	89 a3       	std	Y+33, r24	; 0x21
    1610:	3f c0       	rjmp	.+126    	; 0x1690 <LCD_vidinit+0x10a>
	else if (__tmp > 65535)
    1612:	6b a1       	ldd	r22, Y+35	; 0x23
    1614:	7c a1       	ldd	r23, Y+36	; 0x24
    1616:	8d a1       	ldd	r24, Y+37	; 0x25
    1618:	9e a1       	ldd	r25, Y+38	; 0x26
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	3f ef       	ldi	r19, 0xFF	; 255
    161e:	4f e7       	ldi	r20, 0x7F	; 127
    1620:	57 e4       	ldi	r21, 0x47	; 71
    1622:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1626:	18 16       	cp	r1, r24
    1628:	4c f5       	brge	.+82     	; 0x167c <LCD_vidinit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162a:	6f a1       	ldd	r22, Y+39	; 0x27
    162c:	78 a5       	ldd	r23, Y+40	; 0x28
    162e:	89 a5       	ldd	r24, Y+41	; 0x29
    1630:	9a a5       	ldd	r25, Y+42	; 0x2a
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e2       	ldi	r20, 0x20	; 32
    1638:	51 e4       	ldi	r21, 0x41	; 65
    163a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	bc 01       	movw	r22, r24
    1644:	cd 01       	movw	r24, r26
    1646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9a a3       	std	Y+34, r25	; 0x22
    1650:	89 a3       	std	Y+33, r24	; 0x21
    1652:	0f c0       	rjmp	.+30     	; 0x1672 <LCD_vidinit+0xec>
    1654:	89 e1       	ldi	r24, 0x19	; 25
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	98 a3       	std	Y+32, r25	; 0x20
    165a:	8f 8f       	std	Y+31, r24	; 0x1f
    165c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    165e:	98 a1       	ldd	r25, Y+32	; 0x20
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	f1 f7       	brne	.-4      	; 0x1660 <LCD_vidinit+0xda>
    1664:	98 a3       	std	Y+32, r25	; 0x20
    1666:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1668:	89 a1       	ldd	r24, Y+33	; 0x21
    166a:	9a a1       	ldd	r25, Y+34	; 0x22
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	9a a3       	std	Y+34, r25	; 0x22
    1670:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1672:	89 a1       	ldd	r24, Y+33	; 0x21
    1674:	9a a1       	ldd	r25, Y+34	; 0x22
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	69 f7       	brne	.-38     	; 0x1654 <LCD_vidinit+0xce>
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <LCD_vidinit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167c:	6b a1       	ldd	r22, Y+35	; 0x23
    167e:	7c a1       	ldd	r23, Y+36	; 0x24
    1680:	8d a1       	ldd	r24, Y+37	; 0x25
    1682:	9e a1       	ldd	r25, Y+38	; 0x26
    1684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	9a a3       	std	Y+34, r25	; 0x22
    168e:	89 a3       	std	Y+33, r24	; 0x21
    1690:	89 a1       	ldd	r24, Y+33	; 0x21
    1692:	9a a1       	ldd	r25, Y+34	; 0x22
    1694:	9e 8f       	std	Y+30, r25	; 0x1e
    1696:	8d 8f       	std	Y+29, r24	; 0x1d
    1698:	8d 8d       	ldd	r24, Y+29	; 0x1d
    169a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <LCD_vidinit+0x116>
    16a0:	9e 8f       	std	Y+30, r25	; 0x1e
    16a2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms (50);
	LCD_vidwritecommand(0b00111100);
    16a4:	8c e3       	ldi	r24, 0x3C	; 60
    16a6:	0e 94 87 09 	call	0x130e	; 0x130e <LCD_vidwritecommand>
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	a0 e0       	ldi	r26, 0x00	; 0
    16b0:	b0 e4       	ldi	r27, 0x40	; 64
    16b2:	89 8f       	std	Y+25, r24	; 0x19
    16b4:	9a 8f       	std	Y+26, r25	; 0x1a
    16b6:	ab 8f       	std	Y+27, r26	; 0x1b
    16b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ba:	69 8d       	ldd	r22, Y+25	; 0x19
    16bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	4a e7       	ldi	r20, 0x7A	; 122
    16c8:	53 e4       	ldi	r21, 0x43	; 67
    16ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	8d 8b       	std	Y+21, r24	; 0x15
    16d4:	9e 8b       	std	Y+22, r25	; 0x16
    16d6:	af 8b       	std	Y+23, r26	; 0x17
    16d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16da:	6d 89       	ldd	r22, Y+21	; 0x15
    16dc:	7e 89       	ldd	r23, Y+22	; 0x16
    16de:	8f 89       	ldd	r24, Y+23	; 0x17
    16e0:	98 8d       	ldd	r25, Y+24	; 0x18
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e8       	ldi	r20, 0x80	; 128
    16e8:	5f e3       	ldi	r21, 0x3F	; 63
    16ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ee:	88 23       	and	r24, r24
    16f0:	2c f4       	brge	.+10     	; 0x16fc <LCD_vidinit+0x176>
		__ticks = 1;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	9c 8b       	std	Y+20, r25	; 0x14
    16f8:	8b 8b       	std	Y+19, r24	; 0x13
    16fa:	3f c0       	rjmp	.+126    	; 0x177a <LCD_vidinit+0x1f4>
	else if (__tmp > 65535)
    16fc:	6d 89       	ldd	r22, Y+21	; 0x15
    16fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1700:	8f 89       	ldd	r24, Y+23	; 0x17
    1702:	98 8d       	ldd	r25, Y+24	; 0x18
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	3f ef       	ldi	r19, 0xFF	; 255
    1708:	4f e7       	ldi	r20, 0x7F	; 127
    170a:	57 e4       	ldi	r21, 0x47	; 71
    170c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1710:	18 16       	cp	r1, r24
    1712:	4c f5       	brge	.+82     	; 0x1766 <LCD_vidinit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1714:	69 8d       	ldd	r22, Y+25	; 0x19
    1716:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1718:	8b 8d       	ldd	r24, Y+27	; 0x1b
    171a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e2       	ldi	r20, 0x20	; 32
    1722:	51 e4       	ldi	r21, 0x41	; 65
    1724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9c 8b       	std	Y+20, r25	; 0x14
    173a:	8b 8b       	std	Y+19, r24	; 0x13
    173c:	0f c0       	rjmp	.+30     	; 0x175c <LCD_vidinit+0x1d6>
    173e:	89 e1       	ldi	r24, 0x19	; 25
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	9a 8b       	std	Y+18, r25	; 0x12
    1744:	89 8b       	std	Y+17, r24	; 0x11
    1746:	89 89       	ldd	r24, Y+17	; 0x11
    1748:	9a 89       	ldd	r25, Y+18	; 0x12
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <LCD_vidinit+0x1c4>
    174e:	9a 8b       	std	Y+18, r25	; 0x12
    1750:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1752:	8b 89       	ldd	r24, Y+19	; 0x13
    1754:	9c 89       	ldd	r25, Y+20	; 0x14
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	9c 8b       	std	Y+20, r25	; 0x14
    175a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175c:	8b 89       	ldd	r24, Y+19	; 0x13
    175e:	9c 89       	ldd	r25, Y+20	; 0x14
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	69 f7       	brne	.-38     	; 0x173e <LCD_vidinit+0x1b8>
    1764:	14 c0       	rjmp	.+40     	; 0x178e <LCD_vidinit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1766:	6d 89       	ldd	r22, Y+21	; 0x15
    1768:	7e 89       	ldd	r23, Y+22	; 0x16
    176a:	8f 89       	ldd	r24, Y+23	; 0x17
    176c:	98 8d       	ldd	r25, Y+24	; 0x18
    176e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	9c 8b       	std	Y+20, r25	; 0x14
    1778:	8b 8b       	std	Y+19, r24	; 0x13
    177a:	8b 89       	ldd	r24, Y+19	; 0x13
    177c:	9c 89       	ldd	r25, Y+20	; 0x14
    177e:	98 8b       	std	Y+16, r25	; 0x10
    1780:	8f 87       	std	Y+15, r24	; 0x0f
    1782:	8f 85       	ldd	r24, Y+15	; 0x0f
    1784:	98 89       	ldd	r25, Y+16	; 0x10
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <LCD_vidinit+0x200>
    178a:	98 8b       	std	Y+16, r25	; 0x10
    178c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (2);
	LCD_vidwritecommand(0b00001110);
    178e:	8e e0       	ldi	r24, 0x0E	; 14
    1790:	0e 94 87 09 	call	0x130e	; 0x130e <LCD_vidwritecommand>
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	a0 e0       	ldi	r26, 0x00	; 0
    179a:	b0 e4       	ldi	r27, 0x40	; 64
    179c:	8b 87       	std	Y+11, r24	; 0x0b
    179e:	9c 87       	std	Y+12, r25	; 0x0c
    17a0:	ad 87       	std	Y+13, r26	; 0x0d
    17a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	4a e7       	ldi	r20, 0x7A	; 122
    17b2:	53 e4       	ldi	r21, 0x43	; 67
    17b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	8f 83       	std	Y+7, r24	; 0x07
    17be:	98 87       	std	Y+8, r25	; 0x08
    17c0:	a9 87       	std	Y+9, r26	; 0x09
    17c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17c4:	6f 81       	ldd	r22, Y+7	; 0x07
    17c6:	78 85       	ldd	r23, Y+8	; 0x08
    17c8:	89 85       	ldd	r24, Y+9	; 0x09
    17ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d8:	88 23       	and	r24, r24
    17da:	2c f4       	brge	.+10     	; 0x17e6 <LCD_vidinit+0x260>
		__ticks = 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	9e 83       	std	Y+6, r25	; 0x06
    17e2:	8d 83       	std	Y+5, r24	; 0x05
    17e4:	3f c0       	rjmp	.+126    	; 0x1864 <LCD_vidinit+0x2de>
	else if (__tmp > 65535)
    17e6:	6f 81       	ldd	r22, Y+7	; 0x07
    17e8:	78 85       	ldd	r23, Y+8	; 0x08
    17ea:	89 85       	ldd	r24, Y+9	; 0x09
    17ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	3f ef       	ldi	r19, 0xFF	; 255
    17f2:	4f e7       	ldi	r20, 0x7F	; 127
    17f4:	57 e4       	ldi	r21, 0x47	; 71
    17f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17fa:	18 16       	cp	r1, r24
    17fc:	4c f5       	brge	.+82     	; 0x1850 <LCD_vidinit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1800:	7c 85       	ldd	r23, Y+12	; 0x0c
    1802:	8d 85       	ldd	r24, Y+13	; 0x0d
    1804:	9e 85       	ldd	r25, Y+14	; 0x0e
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e2       	ldi	r20, 0x20	; 32
    180c:	51 e4       	ldi	r21, 0x41	; 65
    180e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	bc 01       	movw	r22, r24
    1818:	cd 01       	movw	r24, r26
    181a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	9e 83       	std	Y+6, r25	; 0x06
    1824:	8d 83       	std	Y+5, r24	; 0x05
    1826:	0f c0       	rjmp	.+30     	; 0x1846 <LCD_vidinit+0x2c0>
    1828:	89 e1       	ldi	r24, 0x19	; 25
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9c 83       	std	Y+4, r25	; 0x04
    182e:	8b 83       	std	Y+3, r24	; 0x03
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <LCD_vidinit+0x2ae>
    1838:	9c 83       	std	Y+4, r25	; 0x04
    183a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183c:	8d 81       	ldd	r24, Y+5	; 0x05
    183e:	9e 81       	ldd	r25, Y+6	; 0x06
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	9e 81       	ldd	r25, Y+6	; 0x06
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	69 f7       	brne	.-38     	; 0x1828 <LCD_vidinit+0x2a2>
    184e:	14 c0       	rjmp	.+40     	; 0x1878 <LCD_vidinit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1850:	6f 81       	ldd	r22, Y+7	; 0x07
    1852:	78 85       	ldd	r23, Y+8	; 0x08
    1854:	89 85       	ldd	r24, Y+9	; 0x09
    1856:	9a 85       	ldd	r25, Y+10	; 0x0a
    1858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	9e 83       	std	Y+6, r25	; 0x06
    1862:	8d 83       	std	Y+5, r24	; 0x05
    1864:	8d 81       	ldd	r24, Y+5	; 0x05
    1866:	9e 81       	ldd	r25, Y+6	; 0x06
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	9a 81       	ldd	r25, Y+2	; 0x02
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <LCD_vidinit+0x2ea>
    1874:	9a 83       	std	Y+2, r25	; 0x02
    1876:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);
	LCD_vidwritecommand(0b00000001);
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	0e 94 87 09 	call	0x130e	; 0x130e <LCD_vidwritecommand>
}
    187e:	aa 96       	adiw	r28, 0x2a	; 42
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <LCD_setposition>:
void LCD_setposition(u8 row , u8 column)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	00 d0       	rcall	.+0      	; 0x1896 <LCD_setposition+0x6>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	6a 83       	std	Y+2, r22	; 0x02
	if(row==0){
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	88 23       	and	r24, r24
    18a2:	29 f4       	brne	.+10     	; 0x18ae <LCD_setposition+0x1e>
		LCD_vidwritecommand(128+column);
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	80 58       	subi	r24, 0x80	; 128
    18a8:	0e 94 87 09 	call	0x130e	; 0x130e <LCD_vidwritecommand>
    18ac:	07 c0       	rjmp	.+14     	; 0x18bc <LCD_setposition+0x2c>
	}
	else if (row==1){
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	21 f4       	brne	.+8      	; 0x18bc <LCD_setposition+0x2c>
		LCD_vidwritecommand(128+64+column);
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	80 54       	subi	r24, 0x40	; 64
    18b8:	0e 94 87 09 	call	0x130e	; 0x130e <LCD_vidwritecommand>
	}
}
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <LCD_vidwritestring>:
extern void LCD_vidwritestring (u8 line,u8 column,u8 string[])
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	a1 97       	sbiw	r28, 0x21	; 33
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	8e 8f       	std	Y+30, r24	; 0x1e
    18dc:	6f 8f       	std	Y+31, r22	; 0x1f
    18de:	59 a3       	std	Y+33, r21	; 0x21
    18e0:	48 a3       	std	Y+32, r20	; 0x20
	u8 i=0;
    18e2:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_setposition(line,column);
    18e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18e8:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_setposition>
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a0 e0       	ldi	r26, 0x00	; 0
    18f2:	b0 e4       	ldi	r27, 0x40	; 64
    18f4:	89 8f       	std	Y+25, r24	; 0x19
    18f6:	9a 8f       	std	Y+26, r25	; 0x1a
    18f8:	ab 8f       	std	Y+27, r26	; 0x1b
    18fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fc:	69 8d       	ldd	r22, Y+25	; 0x19
    18fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1900:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1902:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	4a e7       	ldi	r20, 0x7A	; 122
    190a:	53 e4       	ldi	r21, 0x43	; 67
    190c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	8d 8b       	std	Y+21, r24	; 0x15
    1916:	9e 8b       	std	Y+22, r25	; 0x16
    1918:	af 8b       	std	Y+23, r26	; 0x17
    191a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    191c:	6d 89       	ldd	r22, Y+21	; 0x15
    191e:	7e 89       	ldd	r23, Y+22	; 0x16
    1920:	8f 89       	ldd	r24, Y+23	; 0x17
    1922:	98 8d       	ldd	r25, Y+24	; 0x18
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e8       	ldi	r20, 0x80	; 128
    192a:	5f e3       	ldi	r21, 0x3F	; 63
    192c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1930:	88 23       	and	r24, r24
    1932:	2c f4       	brge	.+10     	; 0x193e <LCD_vidwritestring+0x78>
		__ticks = 1;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	9c 8b       	std	Y+20, r25	; 0x14
    193a:	8b 8b       	std	Y+19, r24	; 0x13
    193c:	3f c0       	rjmp	.+126    	; 0x19bc <LCD_vidwritestring+0xf6>
	else if (__tmp > 65535)
    193e:	6d 89       	ldd	r22, Y+21	; 0x15
    1940:	7e 89       	ldd	r23, Y+22	; 0x16
    1942:	8f 89       	ldd	r24, Y+23	; 0x17
    1944:	98 8d       	ldd	r25, Y+24	; 0x18
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	3f ef       	ldi	r19, 0xFF	; 255
    194a:	4f e7       	ldi	r20, 0x7F	; 127
    194c:	57 e4       	ldi	r21, 0x47	; 71
    194e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1952:	18 16       	cp	r1, r24
    1954:	4c f5       	brge	.+82     	; 0x19a8 <LCD_vidwritestring+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1956:	69 8d       	ldd	r22, Y+25	; 0x19
    1958:	7a 8d       	ldd	r23, Y+26	; 0x1a
    195a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    195c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e2       	ldi	r20, 0x20	; 32
    1964:	51 e4       	ldi	r21, 0x41	; 65
    1966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	bc 01       	movw	r22, r24
    1970:	cd 01       	movw	r24, r26
    1972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	9c 8b       	std	Y+20, r25	; 0x14
    197c:	8b 8b       	std	Y+19, r24	; 0x13
    197e:	0f c0       	rjmp	.+30     	; 0x199e <LCD_vidwritestring+0xd8>
    1980:	89 e1       	ldi	r24, 0x19	; 25
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	9a 8b       	std	Y+18, r25	; 0x12
    1986:	89 8b       	std	Y+17, r24	; 0x11
    1988:	89 89       	ldd	r24, Y+17	; 0x11
    198a:	9a 89       	ldd	r25, Y+18	; 0x12
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <LCD_vidwritestring+0xc6>
    1990:	9a 8b       	std	Y+18, r25	; 0x12
    1992:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1994:	8b 89       	ldd	r24, Y+19	; 0x13
    1996:	9c 89       	ldd	r25, Y+20	; 0x14
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	9c 8b       	std	Y+20, r25	; 0x14
    199c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199e:	8b 89       	ldd	r24, Y+19	; 0x13
    19a0:	9c 89       	ldd	r25, Y+20	; 0x14
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	69 f7       	brne	.-38     	; 0x1980 <LCD_vidwritestring+0xba>
    19a6:	95 c0       	rjmp	.+298    	; 0x1ad2 <LCD_vidwritestring+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a8:	6d 89       	ldd	r22, Y+21	; 0x15
    19aa:	7e 89       	ldd	r23, Y+22	; 0x16
    19ac:	8f 89       	ldd	r24, Y+23	; 0x17
    19ae:	98 8d       	ldd	r25, Y+24	; 0x18
    19b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	9c 8b       	std	Y+20, r25	; 0x14
    19ba:	8b 8b       	std	Y+19, r24	; 0x13
    19bc:	8b 89       	ldd	r24, Y+19	; 0x13
    19be:	9c 89       	ldd	r25, Y+20	; 0x14
    19c0:	98 8b       	std	Y+16, r25	; 0x10
    19c2:	8f 87       	std	Y+15, r24	; 0x0f
    19c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c6:	98 89       	ldd	r25, Y+16	; 0x10
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <LCD_vidwritestring+0x102>
    19cc:	98 8b       	std	Y+16, r25	; 0x10
    19ce:	8f 87       	std	Y+15, r24	; 0x0f
    19d0:	80 c0       	rjmp	.+256    	; 0x1ad2 <LCD_vidwritestring+0x20c>
	_delay_ms(2);
	while (string[i]!= 0)
	{
		LCD_vidwritedata(string[i]);
    19d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	88 a1       	ldd	r24, Y+32	; 0x20
    19da:	99 a1       	ldd	r25, Y+33	; 0x21
    19dc:	fc 01       	movw	r30, r24
    19de:	e2 0f       	add	r30, r18
    19e0:	f3 1f       	adc	r31, r19
    19e2:	80 81       	ld	r24, Z
    19e4:	0e 94 25 0a 	call	0x144a	; 0x144a <LCD_vidwritedata>
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	a0 e0       	ldi	r26, 0x00	; 0
    19ee:	b0 e4       	ldi	r27, 0x40	; 64
    19f0:	8b 87       	std	Y+11, r24	; 0x0b
    19f2:	9c 87       	std	Y+12, r25	; 0x0c
    19f4:	ad 87       	std	Y+13, r26	; 0x0d
    19f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    19fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	4a e7       	ldi	r20, 0x7A	; 122
    1a06:	53 e4       	ldi	r21, 0x43	; 67
    1a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	8f 83       	std	Y+7, r24	; 0x07
    1a12:	98 87       	std	Y+8, r25	; 0x08
    1a14:	a9 87       	std	Y+9, r26	; 0x09
    1a16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a18:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1a:	78 85       	ldd	r23, Y+8	; 0x08
    1a1c:	89 85       	ldd	r24, Y+9	; 0x09
    1a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e8       	ldi	r20, 0x80	; 128
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	2c f4       	brge	.+10     	; 0x1a3a <LCD_vidwritestring+0x174>
		__ticks = 1;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9e 83       	std	Y+6, r25	; 0x06
    1a36:	8d 83       	std	Y+5, r24	; 0x05
    1a38:	3f c0       	rjmp	.+126    	; 0x1ab8 <LCD_vidwritestring+0x1f2>
	else if (__tmp > 65535)
    1a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3c:	78 85       	ldd	r23, Y+8	; 0x08
    1a3e:	89 85       	ldd	r24, Y+9	; 0x09
    1a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	3f ef       	ldi	r19, 0xFF	; 255
    1a46:	4f e7       	ldi	r20, 0x7F	; 127
    1a48:	57 e4       	ldi	r21, 0x47	; 71
    1a4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a4e:	18 16       	cp	r1, r24
    1a50:	4c f5       	brge	.+82     	; 0x1aa4 <LCD_vidwritestring+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e2       	ldi	r20, 0x20	; 32
    1a60:	51 e4       	ldi	r21, 0x41	; 65
    1a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	bc 01       	movw	r22, r24
    1a6c:	cd 01       	movw	r24, r26
    1a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9e 83       	std	Y+6, r25	; 0x06
    1a78:	8d 83       	std	Y+5, r24	; 0x05
    1a7a:	0f c0       	rjmp	.+30     	; 0x1a9a <LCD_vidwritestring+0x1d4>
    1a7c:	89 e1       	ldi	r24, 0x19	; 25
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	9c 83       	std	Y+4, r25	; 0x04
    1a82:	8b 83       	std	Y+3, r24	; 0x03
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <LCD_vidwritestring+0x1c2>
    1a8c:	9c 83       	std	Y+4, r25	; 0x04
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a90:	8d 81       	ldd	r24, Y+5	; 0x05
    1a92:	9e 81       	ldd	r25, Y+6	; 0x06
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	9e 83       	std	Y+6, r25	; 0x06
    1a98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	69 f7       	brne	.-38     	; 0x1a7c <LCD_vidwritestring+0x1b6>
    1aa2:	14 c0       	rjmp	.+40     	; 0x1acc <LCD_vidwritestring+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa6:	78 85       	ldd	r23, Y+8	; 0x08
    1aa8:	89 85       	ldd	r24, Y+9	; 0x09
    1aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	9e 83       	std	Y+6, r25	; 0x06
    1ab6:	8d 83       	std	Y+5, r24	; 0x05
    1ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aba:	9e 81       	ldd	r25, Y+6	; 0x06
    1abc:	9a 83       	std	Y+2, r25	; 0x02
    1abe:	89 83       	std	Y+1, r24	; 0x01
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <LCD_vidwritestring+0x1fe>
    1ac8:	9a 83       	std	Y+2, r25	; 0x02
    1aca:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
				i++;
    1acc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ace:	8f 5f       	subi	r24, 0xFF	; 255
    1ad0:	8d 8f       	std	Y+29, r24	; 0x1d
extern void LCD_vidwritestring (u8 line,u8 column,u8 string[])
{
	u8 i=0;
	LCD_setposition(line,column);
	_delay_ms(2);
	while (string[i]!= 0)
    1ad2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	88 a1       	ldd	r24, Y+32	; 0x20
    1ada:	99 a1       	ldd	r25, Y+33	; 0x21
    1adc:	fc 01       	movw	r30, r24
    1ade:	e2 0f       	add	r30, r18
    1ae0:	f3 1f       	adc	r31, r19
    1ae2:	80 81       	ld	r24, Z
    1ae4:	88 23       	and	r24, r24
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <LCD_vidwritestring+0x224>
    1ae8:	74 cf       	rjmp	.-280    	; 0x19d2 <LCD_vidwritestring+0x10c>
	{
		LCD_vidwritedata(string[i]);
		_delay_ms(2);
				i++;
	}
}
    1aea:	a1 96       	adiw	r28, 0x21	; 33
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <LCD_vidwritestringoncursor>:
extern void LCD_vidwritestringoncursor (u8 string[])
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	6f 97       	sbiw	r28, 0x1f	; 31
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	9f 8f       	std	Y+31, r25	; 0x1f
    1b12:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 i=0;
    1b14:	1d 8e       	std	Y+29, r1	; 0x1d
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	a0 e0       	ldi	r26, 0x00	; 0
    1b1c:	b0 e4       	ldi	r27, 0x40	; 64
    1b1e:	89 8f       	std	Y+25, r24	; 0x19
    1b20:	9a 8f       	std	Y+26, r25	; 0x1a
    1b22:	ab 8f       	std	Y+27, r26	; 0x1b
    1b24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b26:	69 8d       	ldd	r22, Y+25	; 0x19
    1b28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	4a e7       	ldi	r20, 0x7A	; 122
    1b34:	53 e4       	ldi	r21, 0x43	; 67
    1b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	8d 8b       	std	Y+21, r24	; 0x15
    1b40:	9e 8b       	std	Y+22, r25	; 0x16
    1b42:	af 8b       	std	Y+23, r26	; 0x17
    1b44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b46:	6d 89       	ldd	r22, Y+21	; 0x15
    1b48:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e8       	ldi	r20, 0x80	; 128
    1b54:	5f e3       	ldi	r21, 0x3F	; 63
    1b56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b5a:	88 23       	and	r24, r24
    1b5c:	2c f4       	brge	.+10     	; 0x1b68 <LCD_vidwritestringoncursor+0x6c>
		__ticks = 1;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	9c 8b       	std	Y+20, r25	; 0x14
    1b64:	8b 8b       	std	Y+19, r24	; 0x13
    1b66:	3f c0       	rjmp	.+126    	; 0x1be6 <LCD_vidwritestringoncursor+0xea>
	else if (__tmp > 65535)
    1b68:	6d 89       	ldd	r22, Y+21	; 0x15
    1b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	3f ef       	ldi	r19, 0xFF	; 255
    1b74:	4f e7       	ldi	r20, 0x7F	; 127
    1b76:	57 e4       	ldi	r21, 0x47	; 71
    1b78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b7c:	18 16       	cp	r1, r24
    1b7e:	4c f5       	brge	.+82     	; 0x1bd2 <LCD_vidwritestringoncursor+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b80:	69 8d       	ldd	r22, Y+25	; 0x19
    1b82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e2       	ldi	r20, 0x20	; 32
    1b8e:	51 e4       	ldi	r21, 0x41	; 65
    1b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	bc 01       	movw	r22, r24
    1b9a:	cd 01       	movw	r24, r26
    1b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	9c 8b       	std	Y+20, r25	; 0x14
    1ba6:	8b 8b       	std	Y+19, r24	; 0x13
    1ba8:	0f c0       	rjmp	.+30     	; 0x1bc8 <LCD_vidwritestringoncursor+0xcc>
    1baa:	89 e1       	ldi	r24, 0x19	; 25
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9a 8b       	std	Y+18, r25	; 0x12
    1bb0:	89 8b       	std	Y+17, r24	; 0x11
    1bb2:	89 89       	ldd	r24, Y+17	; 0x11
    1bb4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <LCD_vidwritestringoncursor+0xba>
    1bba:	9a 8b       	std	Y+18, r25	; 0x12
    1bbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	9c 8b       	std	Y+20, r25	; 0x14
    1bc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bca:	9c 89       	ldd	r25, Y+20	; 0x14
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	69 f7       	brne	.-38     	; 0x1baa <LCD_vidwritestringoncursor+0xae>
    1bd0:	95 c0       	rjmp	.+298    	; 0x1cfc <LCD_vidwritestringoncursor+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	9c 8b       	std	Y+20, r25	; 0x14
    1be4:	8b 8b       	std	Y+19, r24	; 0x13
    1be6:	8b 89       	ldd	r24, Y+19	; 0x13
    1be8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bea:	98 8b       	std	Y+16, r25	; 0x10
    1bec:	8f 87       	std	Y+15, r24	; 0x0f
    1bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf0:	98 89       	ldd	r25, Y+16	; 0x10
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <LCD_vidwritestringoncursor+0xf6>
    1bf6:	98 8b       	std	Y+16, r25	; 0x10
    1bf8:	8f 87       	std	Y+15, r24	; 0x0f
    1bfa:	80 c0       	rjmp	.+256    	; 0x1cfc <LCD_vidwritestringoncursor+0x200>
	_delay_ms(2);
	while (string[i]!= 0)
	{
		LCD_vidwritedata(string[i]);
    1bfc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c04:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c06:	fc 01       	movw	r30, r24
    1c08:	e2 0f       	add	r30, r18
    1c0a:	f3 1f       	adc	r31, r19
    1c0c:	80 81       	ld	r24, Z
    1c0e:	0e 94 25 0a 	call	0x144a	; 0x144a <LCD_vidwritedata>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a0 e0       	ldi	r26, 0x00	; 0
    1c18:	b0 e4       	ldi	r27, 0x40	; 64
    1c1a:	8b 87       	std	Y+11, r24	; 0x0b
    1c1c:	9c 87       	std	Y+12, r25	; 0x0c
    1c1e:	ad 87       	std	Y+13, r26	; 0x0d
    1c20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4a e7       	ldi	r20, 0x7A	; 122
    1c30:	53 e4       	ldi	r21, 0x43	; 67
    1c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	8f 83       	std	Y+7, r24	; 0x07
    1c3c:	98 87       	std	Y+8, r25	; 0x08
    1c3e:	a9 87       	std	Y+9, r26	; 0x09
    1c40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e8       	ldi	r20, 0x80	; 128
    1c50:	5f e3       	ldi	r21, 0x3F	; 63
    1c52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c56:	88 23       	and	r24, r24
    1c58:	2c f4       	brge	.+10     	; 0x1c64 <LCD_vidwritestringoncursor+0x168>
		__ticks = 1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	8d 83       	std	Y+5, r24	; 0x05
    1c62:	3f c0       	rjmp	.+126    	; 0x1ce2 <LCD_vidwritestringoncursor+0x1e6>
	else if (__tmp > 65535)
    1c64:	6f 81       	ldd	r22, Y+7	; 0x07
    1c66:	78 85       	ldd	r23, Y+8	; 0x08
    1c68:	89 85       	ldd	r24, Y+9	; 0x09
    1c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	3f ef       	ldi	r19, 0xFF	; 255
    1c70:	4f e7       	ldi	r20, 0x7F	; 127
    1c72:	57 e4       	ldi	r21, 0x47	; 71
    1c74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c78:	18 16       	cp	r1, r24
    1c7a:	4c f5       	brge	.+82     	; 0x1cce <LCD_vidwritestringoncursor+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e2       	ldi	r20, 0x20	; 32
    1c8a:	51 e4       	ldi	r21, 0x41	; 65
    1c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	bc 01       	movw	r22, r24
    1c96:	cd 01       	movw	r24, r26
    1c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
    1ca4:	0f c0       	rjmp	.+30     	; 0x1cc4 <LCD_vidwritestringoncursor+0x1c8>
    1ca6:	89 e1       	ldi	r24, 0x19	; 25
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9c 83       	std	Y+4, r25	; 0x04
    1cac:	8b 83       	std	Y+3, r24	; 0x03
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <LCD_vidwritestringoncursor+0x1b6>
    1cb6:	9c 83       	std	Y+4, r25	; 0x04
    1cb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	69 f7       	brne	.-38     	; 0x1ca6 <LCD_vidwritestringoncursor+0x1aa>
    1ccc:	14 c0       	rjmp	.+40     	; 0x1cf6 <LCD_vidwritestringoncursor+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <LCD_vidwritestringoncursor+0x1f2>
    1cf2:	9a 83       	std	Y+2, r25	; 0x02
    1cf4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
				i++;
    1cf6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cf8:	8f 5f       	subi	r24, 0xFF	; 255
    1cfa:	8d 8f       	std	Y+29, r24	; 0x1d
}
extern void LCD_vidwritestringoncursor (u8 string[])
{
	u8 i=0;
	_delay_ms(2);
	while (string[i]!= 0)
    1cfc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d04:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d06:	fc 01       	movw	r30, r24
    1d08:	e2 0f       	add	r30, r18
    1d0a:	f3 1f       	adc	r31, r19
    1d0c:	80 81       	ld	r24, Z
    1d0e:	88 23       	and	r24, r24
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <LCD_vidwritestringoncursor+0x218>
    1d12:	74 cf       	rjmp	.-280    	; 0x1bfc <LCD_vidwritestringoncursor+0x100>
	{
		LCD_vidwritedata(string[i]);
		_delay_ms(2);
				i++;
	}
}
    1d14:	6f 96       	adiw	r28, 0x1f	; 31
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <LCD_voidDisplayIntegar>:


void LCD_voidDisplayIntegar(u32 COPY_u32Number)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	64 97       	sbiw	r28, 0x14	; 20
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	69 8b       	std	Y+17, r22	; 0x11
    1d3c:	7a 8b       	std	Y+18, r23	; 0x12
    1d3e:	8b 8b       	std	Y+19, r24	; 0x13
    1d40:	9c 8b       	std	Y+20, r25	; 0x14
	u8 LOCAL_u8Num[10]={0};
    1d42:	8a e0       	ldi	r24, 0x0A	; 10
    1d44:	fe 01       	movw	r30, r28
    1d46:	37 96       	adiw	r30, 0x07	; 7
    1d48:	df 01       	movw	r26, r30
    1d4a:	98 2f       	mov	r25, r24
    1d4c:	1d 92       	st	X+, r1
    1d4e:	9a 95       	dec	r25
    1d50:	e9 f7       	brne	.-6      	; 0x1d4c <LCD_voidDisplayIntegar+0x26>
	s16 i=0;
    1d52:	1e 82       	std	Y+6, r1	; 0x06
    1d54:	1d 82       	std	Y+5, r1	; 0x05
	u32 LOCAL_u32Remainder;
	if(COPY_u32Number==0)
    1d56:	89 89       	ldd	r24, Y+17	; 0x11
    1d58:	9a 89       	ldd	r25, Y+18	; 0x12
    1d5a:	ab 89       	ldd	r26, Y+19	; 0x13
    1d5c:	bc 89       	ldd	r27, Y+20	; 0x14
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	a1 05       	cpc	r26, r1
    1d62:	b1 05       	cpc	r27, r1
    1d64:	19 f4       	brne	.+6      	; 0x1d6c <LCD_voidDisplayIntegar+0x46>
	{
		LCD_vidwritedata('0');
    1d66:	80 e3       	ldi	r24, 0x30	; 48
    1d68:	0e 94 25 0a 	call	0x144a	; 0x144a <LCD_vidwritedata>
	}

	if(COPY_u32Number>0)
    1d6c:	89 89       	ldd	r24, Y+17	; 0x11
    1d6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d70:	ab 89       	ldd	r26, Y+19	; 0x13
    1d72:	bc 89       	ldd	r27, Y+20	; 0x14
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	a1 05       	cpc	r26, r1
    1d78:	b1 05       	cpc	r27, r1
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <LCD_voidDisplayIntegar+0x58>
    1d7c:	55 c0       	rjmp	.+170    	; 0x1e28 <LCD_voidDisplayIntegar+0x102>
    1d7e:	32 c0       	rjmp	.+100    	; 0x1de4 <LCD_voidDisplayIntegar+0xbe>
	{
		while(COPY_u32Number!=0)
		{
			LOCAL_u32Remainder=COPY_u32Number%10;
    1d80:	89 89       	ldd	r24, Y+17	; 0x11
    1d82:	9a 89       	ldd	r25, Y+18	; 0x12
    1d84:	ab 89       	ldd	r26, Y+19	; 0x13
    1d86:	bc 89       	ldd	r27, Y+20	; 0x14
    1d88:	2a e0       	ldi	r18, 0x0A	; 10
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e0       	ldi	r20, 0x00	; 0
    1d8e:	50 e0       	ldi	r21, 0x00	; 0
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__udivmodsi4>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	9a 83       	std	Y+2, r25	; 0x02
    1da0:	ab 83       	std	Y+3, r26	; 0x03
    1da2:	bc 83       	std	Y+4, r27	; 0x04
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
    1da4:	2d 81       	ldd	r18, Y+5	; 0x05
    1da6:	3e 81       	ldd	r19, Y+6	; 0x06
    1da8:	49 81       	ldd	r20, Y+1	; 0x01
    1daa:	ce 01       	movw	r24, r28
    1dac:	07 96       	adiw	r24, 0x07	; 7
    1dae:	fc 01       	movw	r30, r24
    1db0:	e2 0f       	add	r30, r18
    1db2:	f3 1f       	adc	r31, r19
    1db4:	40 83       	st	Z, r20
			COPY_u32Number=COPY_u32Number/10;
    1db6:	89 89       	ldd	r24, Y+17	; 0x11
    1db8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dba:	ab 89       	ldd	r26, Y+19	; 0x13
    1dbc:	bc 89       	ldd	r27, Y+20	; 0x14
    1dbe:	2a e0       	ldi	r18, 0x0A	; 10
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	bc 01       	movw	r22, r24
    1dc8:	cd 01       	movw	r24, r26
    1dca:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__udivmodsi4>
    1dce:	da 01       	movw	r26, r20
    1dd0:	c9 01       	movw	r24, r18
    1dd2:	89 8b       	std	Y+17, r24	; 0x11
    1dd4:	9a 8b       	std	Y+18, r25	; 0x12
    1dd6:	ab 8b       	std	Y+19, r26	; 0x13
    1dd8:	bc 8b       	std	Y+20, r27	; 0x14
			i++;
    1dda:	8d 81       	ldd	r24, Y+5	; 0x05
    1ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	9e 83       	std	Y+6, r25	; 0x06
    1de2:	8d 83       	std	Y+5, r24	; 0x05
		LCD_vidwritedata('0');
	}

	if(COPY_u32Number>0)
	{
		while(COPY_u32Number!=0)
    1de4:	89 89       	ldd	r24, Y+17	; 0x11
    1de6:	9a 89       	ldd	r25, Y+18	; 0x12
    1de8:	ab 89       	ldd	r26, Y+19	; 0x13
    1dea:	bc 89       	ldd	r27, Y+20	; 0x14
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	a1 05       	cpc	r26, r1
    1df0:	b1 05       	cpc	r27, r1
    1df2:	31 f6       	brne	.-116    	; 0x1d80 <LCD_voidDisplayIntegar+0x5a>
			LOCAL_u32Remainder=COPY_u32Number%10;
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
			COPY_u32Number=COPY_u32Number/10;
			i++;
		}
		i--;
    1df4:	8d 81       	ldd	r24, Y+5	; 0x05
    1df6:	9e 81       	ldd	r25, Y+6	; 0x06
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
    1dfe:	10 c0       	rjmp	.+32     	; 0x1e20 <LCD_voidDisplayIntegar+0xfa>
		while(i>=0)
		{
			LCD_vidwritedata(LOCAL_u8Num[i]+48);
    1e00:	2d 81       	ldd	r18, Y+5	; 0x05
    1e02:	3e 81       	ldd	r19, Y+6	; 0x06
    1e04:	ce 01       	movw	r24, r28
    1e06:	07 96       	adiw	r24, 0x07	; 7
    1e08:	fc 01       	movw	r30, r24
    1e0a:	e2 0f       	add	r30, r18
    1e0c:	f3 1f       	adc	r31, r19
    1e0e:	80 81       	ld	r24, Z
    1e10:	80 5d       	subi	r24, 0xD0	; 208
    1e12:	0e 94 25 0a 	call	0x144a	; 0x144a <LCD_vidwritedata>
			i--;
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	9e 83       	std	Y+6, r25	; 0x06
    1e1e:	8d 83       	std	Y+5, r24	; 0x05
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
			COPY_u32Number=COPY_u32Number/10;
			i++;
		}
		i--;
		while(i>=0)
    1e20:	8d 81       	ldd	r24, Y+5	; 0x05
    1e22:	9e 81       	ldd	r25, Y+6	; 0x06
    1e24:	99 23       	and	r25, r25
    1e26:	64 f7       	brge	.-40     	; 0x1e00 <LCD_voidDisplayIntegar+0xda>
		{
			LCD_vidwritedata(LOCAL_u8Num[i]+48);
			i--;
		}
	}
}
    1e28:	64 96       	adiw	r28, 0x14	; 20
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <LCD_voidDisplaySpecialChar>:




void LCD_voidDisplaySpecialChar(u8* Ptr_u8PtrChar,u8 CGRam_index,u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	27 97       	sbiw	r28, 0x07	; 7
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	8b 83       	std	Y+3, r24	; 0x03
    1e52:	6d 83       	std	Y+5, r22	; 0x05
    1e54:	4e 83       	std	Y+6, r20	; 0x06
    1e56:	2f 83       	std	Y+7, r18	; 0x07
	LCD_setposition( Copy_u8RowNum, Copy_u8ColNum);
    1e58:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5c:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_setposition>
	LCD_vidwritedata(CGRam_index);
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	0e 94 25 0a 	call	0x144a	; 0x144a <LCD_vidwritedata>
	u8 Local_u8address;
	u8 Local_u8Index;
	if (CGRam_index < 8)
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	88 30       	cpi	r24, 0x08	; 8
    1e6a:	18 f5       	brcc	.+70     	; 0x1eb2 <LCD_voidDisplaySpecialChar+0x78>
	{
		Local_u8address= CGRam_index * 8;
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	88 2f       	mov	r24, r24
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8address=SET_BIT(Local_u8address,6);
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	80 64       	ori	r24, 0x40	; 64
    1e84:	8a 83       	std	Y+2, r24	; 0x02
		LCD_vidwritecommand(Local_u8address);
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	0e 94 87 09 	call	0x130e	; 0x130e <LCD_vidwritecommand>
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    1e8c:	19 82       	std	Y+1, r1	; 0x01
    1e8e:	0e c0       	rjmp	.+28     	; 0x1eac <LCD_voidDisplaySpecialChar+0x72>
		{
			LCD_vidwritedata(Ptr_u8PtrChar[Local_u8Index]);
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	e2 0f       	add	r30, r18
    1e9e:	f3 1f       	adc	r31, r19
    1ea0:	80 81       	ld	r24, Z
    1ea2:	0e 94 25 0a 	call	0x144a	; 0x144a <LCD_vidwritedata>
	if (CGRam_index < 8)
	{
		Local_u8address= CGRam_index * 8;
		Local_u8address=SET_BIT(Local_u8address,6);
		LCD_vidwritecommand(Local_u8address);
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	8f 5f       	subi	r24, 0xFF	; 255
    1eaa:	89 83       	std	Y+1, r24	; 0x01
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	88 30       	cpi	r24, 0x08	; 8
    1eb0:	78 f3       	brcs	.-34     	; 0x1e90 <LCD_voidDisplaySpecialChar+0x56>
		{
			LCD_vidwritedata(Ptr_u8PtrChar[Local_u8Index]);
		}
	}
	LCD_vidwritecommand(0x02);
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	0e 94 87 09 	call	0x130e	; 0x130e <LCD_vidwritecommand>

}
    1eb8:	27 96       	adiw	r28, 0x07	; 7
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	cd bf       	out	0x3d, r28	; 61
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <MTIMER1_voidInit>:
     /*Define Pointer to TIMER0 ISR functions*/
	  void (*Global_pvTimerOverFlowCallBack)(void)= NULL;
	  void (*Global_pvTimer1ACTCCallBack)(void)= NULL;
	 
void MTIMER1_voidInit()
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, TCCR1B_CS11);
	CLR_BIT(TCCR1B, TCCR1B_CS12);
	#elif     TIMER1_Mode == TIMER1_PWM
	
	/*Choose Fast PWM Mode*/
	CLR_BIT(TCCR1A, TCCR1A_WGM10);
    1ed2:	af e4       	ldi	r26, 0x4F	; 79
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	ef e4       	ldi	r30, 0x4F	; 79
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	8e 7f       	andi	r24, 0xFE	; 254
    1ede:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_WGM11);
    1ee0:	af e4       	ldi	r26, 0x4F	; 79
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	ef e4       	ldi	r30, 0x4F	; 79
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	82 60       	ori	r24, 0x02	; 2
    1eec:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_WGM12);
    1eee:	ae e4       	ldi	r26, 0x4E	; 78
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	ee e4       	ldi	r30, 0x4E	; 78
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 60       	ori	r24, 0x08	; 8
    1efa:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_WGM13);
    1efc:	ae e4       	ldi	r26, 0x4E	; 78
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	ee e4       	ldi	r30, 0x4E	; 78
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	80 61       	ori	r24, 0x10	; 16
    1f08:	8c 93       	st	X, r24
	
	/*SET OCR1 ON TOP CLEAR OCR1 ON COMPARE*/
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1f0a:	af e4       	ldi	r26, 0x4F	; 79
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	ef e4       	ldi	r30, 0x4F	; 79
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	8f 7b       	andi	r24, 0xBF	; 191
    1f16:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    1f18:	af e4       	ldi	r26, 0x4F	; 79
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	ef e4       	ldi	r30, 0x4F	; 79
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	8f 7e       	andi	r24, 0xEF	; 239
    1f24:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1f26:	af e4       	ldi	r26, 0x4F	; 79
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	ef e4       	ldi	r30, 0x4F	; 79
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	80 68       	ori	r24, 0x80	; 128
    1f32:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1f34:	af e4       	ldi	r26, 0x4F	; 79
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	ef e4       	ldi	r30, 0x4F	; 79
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	80 62       	ori	r24, 0x20	; 32
    1f40:	8c 93       	st	X, r24
	
	/*Set PRESCALAR 1*/
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1f42:	ae e4       	ldi	r26, 0x4E	; 78
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	ee e4       	ldi	r30, 0x4E	; 78
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	8e 7f       	andi	r24, 0xFE	; 254
    1f4e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    1f50:	ae e4       	ldi	r26, 0x4E	; 78
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	ee e4       	ldi	r30, 0x4E	; 78
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	82 60       	ori	r24, 0x02	; 2
    1f5c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    1f5e:	ae e4       	ldi	r26, 0x4E	; 78
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	ee e4       	ldi	r30, 0x4E	; 78
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	8b 7f       	andi	r24, 0xFB	; 251
    1f6a:	8c 93       	st	X, r24

	/*SET ICR1*/
	//ICR1=20000;      *for servo motor
	ICR1=625;
    1f6c:	e6 e4       	ldi	r30, 0x46	; 70
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	81 e7       	ldi	r24, 0x71	; 113
    1f72:	92 e0       	ldi	r25, 0x02	; 2
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	80 83       	st	Z, r24
	#endif
}
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <MTIMER1_voidSetDuty>:

void MTIMER1_voidSetDuty(u16 Copy_u8DutyCycle)
{
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <MTIMER1_voidSetDuty+0x6>
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
	/*Check for mode is PWM*/
	OCR1A = Copy_u8DutyCycle;               /*Sets OCR0 value*/
    1f8c:	ea e4       	ldi	r30, 0x4A	; 74
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	9a 81       	ldd	r25, Y+2	; 0x02
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	80 83       	st	Z, r24
}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <MTIMER1_voidTimer1OVSetCallBack>:

void MTIMER1_voidTimer1OVSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <MTIMER1_voidTimer1OVSetCallBack+0x6>
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc != NULL) /*checking if function exists*/
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	31 f0       	breq	.+12     	; 0x1fc4 <MTIMER1_voidTimer1OVSetCallBack+0x22>
	{
		Global_pvTimerOverFlowCallBack= Copy_pvCallBackFunc; /*ADDS ISR Function*/
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbc:	90 93 c3 00 	sts	0x00C3, r25
    1fc0:	80 93 c2 00 	sts	0x00C2, r24
	else
	{
		/*do nothing*/
	}

}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <MTIMER1_voidTimer1ACTCSetCallBack>:

void MTIMER1_voidTimer1ACTCSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <MTIMER1_voidTimer1ACTCSetCallBack+0x6>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	9a 83       	std	Y+2, r25	; 0x02
    1fda:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc != NULL) /*checking if function exists*/
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	31 f0       	breq	.+12     	; 0x1ff0 <MTIMER1_voidTimer1ACTCSetCallBack+0x22>
	{
		Global_pvTimer1ACTCCallBack= Copy_pvCallBackFunc; /*ADDS ISR Function*/
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe8:	90 93 c5 00 	sts	0x00C5, r25
    1fec:	80 93 c4 00 	sts	0x00C4, r24
	else
	{
		/*do nothing*/
	}

}
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <__vector_9>:

//TIMER OVERFLOW ISR
void  __vector_9 (void)	__attribute__((signal));
void  __vector_9 (void)
{
    1ffa:	1f 92       	push	r1
    1ffc:	0f 92       	push	r0
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	0f 92       	push	r0
    2002:	11 24       	eor	r1, r1
    2004:	2f 93       	push	r18
    2006:	3f 93       	push	r19
    2008:	4f 93       	push	r20
    200a:	5f 93       	push	r21
    200c:	6f 93       	push	r22
    200e:	7f 93       	push	r23
    2010:	8f 93       	push	r24
    2012:	9f 93       	push	r25
    2014:	af 93       	push	r26
    2016:	bf 93       	push	r27
    2018:	ef 93       	push	r30
    201a:	ff 93       	push	r31
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerOverFlowCallBack != NULL)
    2024:	80 91 c2 00 	lds	r24, 0x00C2
    2028:	90 91 c3 00 	lds	r25, 0x00C3
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	29 f0       	breq	.+10     	; 0x203a <__vector_9+0x40>
	{
		Global_pvTimerOverFlowCallBack();
    2030:	e0 91 c2 00 	lds	r30, 0x00C2
    2034:	f0 91 c3 00 	lds	r31, 0x00C3
    2038:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	ff 91       	pop	r31
    2040:	ef 91       	pop	r30
    2042:	bf 91       	pop	r27
    2044:	af 91       	pop	r26
    2046:	9f 91       	pop	r25
    2048:	8f 91       	pop	r24
    204a:	7f 91       	pop	r23
    204c:	6f 91       	pop	r22
    204e:	5f 91       	pop	r21
    2050:	4f 91       	pop	r20
    2052:	3f 91       	pop	r19
    2054:	2f 91       	pop	r18
    2056:	0f 90       	pop	r0
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	0f 90       	pop	r0
    205c:	1f 90       	pop	r1
    205e:	18 95       	reti

00002060 <__vector_7>:

//ON COMPARE ISR
void  __vector_7 (void)	__attribute__((signal));
void  __vector_7 (void)
{
    2060:	1f 92       	push	r1
    2062:	0f 92       	push	r0
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	0f 92       	push	r0
    2068:	11 24       	eor	r1, r1
    206a:	2f 93       	push	r18
    206c:	3f 93       	push	r19
    206e:	4f 93       	push	r20
    2070:	5f 93       	push	r21
    2072:	6f 93       	push	r22
    2074:	7f 93       	push	r23
    2076:	8f 93       	push	r24
    2078:	9f 93       	push	r25
    207a:	af 93       	push	r26
    207c:	bf 93       	push	r27
    207e:	ef 93       	push	r30
    2080:	ff 93       	push	r31
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimer1ACTCCallBack != NULL)
    208a:	80 91 c4 00 	lds	r24, 0x00C4
    208e:	90 91 c5 00 	lds	r25, 0x00C5
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	29 f0       	breq	.+10     	; 0x20a0 <__vector_7+0x40>
	{
		Global_pvTimer1ACTCCallBack();
    2096:	e0 91 c4 00 	lds	r30, 0x00C4
    209a:	f0 91 c5 00 	lds	r31, 0x00C5
    209e:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	ff 91       	pop	r31
    20a6:	ef 91       	pop	r30
    20a8:	bf 91       	pop	r27
    20aa:	af 91       	pop	r26
    20ac:	9f 91       	pop	r25
    20ae:	8f 91       	pop	r24
    20b0:	7f 91       	pop	r23
    20b2:	6f 91       	pop	r22
    20b4:	5f 91       	pop	r21
    20b6:	4f 91       	pop	r20
    20b8:	3f 91       	pop	r19
    20ba:	2f 91       	pop	r18
    20bc:	0f 90       	pop	r0
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	0f 90       	pop	r0
    20c2:	1f 90       	pop	r1
    20c4:	18 95       	reti

000020c6 <ADC_init>:
#include "adc.h"

void ADC_init()
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX_R,REFS0);
    20ce:	a7 e2       	ldi	r26, 0x27	; 39
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e7 e2       	ldi	r30, 0x27	; 39
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	80 64       	ori	r24, 0x40	; 64
    20da:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_R,REFS1);
    20dc:	a7 e2       	ldi	r26, 0x27	; 39
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e7 e2       	ldi	r30, 0x27	; 39
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	8f 77       	andi	r24, 0x7F	; 127
    20e8:	8c 93       	st	X, r24
	ADCSRA_R &= 0b11111000;
    20ea:	a6 e2       	ldi	r26, 0x26	; 38
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e6 e2       	ldi	r30, 0x26	; 38
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	88 7f       	andi	r24, 0xF8	; 248
    20f6:	8c 93       	st	X, r24
	ADCSRA_R |= 7;
    20f8:	a6 e2       	ldi	r26, 0x26	; 38
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e6 e2       	ldi	r30, 0x26	; 38
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	87 60       	ori	r24, 0x07	; 7
    2104:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_R,ADEN);
    2106:	a6 e2       	ldi	r26, 0x26	; 38
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e6 e2       	ldi	r30, 0x26	; 38
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	80 68       	ori	r24, 0x80	; 128
    2112:	8c 93       	st	X, r24
}
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <ADC_ReadChannel>:
u32 ADC_ReadChannel(u8 channelNumber)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	0f 92       	push	r0
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_R &= 0b11100000;
    2126:	a7 e2       	ldi	r26, 0x27	; 39
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e7 e2       	ldi	r30, 0x27	; 39
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	80 7e       	andi	r24, 0xE0	; 224
    2132:	8c 93       	st	X, r24
	ADMUX_R |=channelNumber;
    2134:	a7 e2       	ldi	r26, 0x27	; 39
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e7 e2       	ldi	r30, 0x27	; 39
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	90 81       	ld	r25, Z
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	89 2b       	or	r24, r25
    2142:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_R,ADSC);
    2144:	a6 e2       	ldi	r26, 0x26	; 38
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e6 e2       	ldi	r30, 0x26	; 38
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	80 64       	ori	r24, 0x40	; 64
    2150:	8c 93       	st	X, r24
	while(!GET_BIT(ADCSRA_R,ADIF));
    2152:	e6 e2       	ldi	r30, 0x26	; 38
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	82 95       	swap	r24
    215a:	8f 70       	andi	r24, 0x0F	; 15
    215c:	88 23       	and	r24, r24
    215e:	c9 f3       	breq	.-14     	; 0x2152 <ADC_ReadChannel+0x38>
	SET_BIT(ADCSRA_R,ADIF);
    2160:	a6 e2       	ldi	r26, 0x26	; 38
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e6 e2       	ldi	r30, 0x26	; 38
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	80 61       	ori	r24, 0x10	; 16
    216c:	8c 93       	st	X, r24
	return ADC_R;
    216e:	e4 e2       	ldi	r30, 0x24	; 36
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	91 81       	ldd	r25, Z+1	; 0x01
    2176:	cc 01       	movw	r24, r24
    2178:	a0 e0       	ldi	r26, 0x00	; 0
    217a:	b0 e0       	ldi	r27, 0x00	; 0
}
    217c:	bc 01       	movw	r22, r24
    217e:	cd 01       	movw	r24, r26
    2180:	0f 90       	pop	r0
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <main>:
#include "LCD.h"
#include <string.h>
#include "uart.h"
#include "TIMER1_interface.h"
int main()
{
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	c2 58       	subi	r28, 0x82	; 130
    2196:	d0 40       	sbci	r29, 0x00	; 0
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
	UART_init();
    21a2:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <UART_init>
	LCD_vidinit();
    21a6:	0e 94 c3 0a 	call	0x1586	; 0x1586 <LCD_vidinit>
	MTIMER1_voidInit();
    21aa:	0e 94 65 0f 	call	0x1eca	; 0x1eca <MTIMER1_voidInit>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	41 e0       	ldi	r20, 0x01	; 1
    21be:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	61 e0       	ldi	r22, 0x01	; 1
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_LOW);
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN0,DIO_u8PIN_LOW);
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN1,DIO_u8PIN_LOW);
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	61 e0       	ldi	r22, 0x01	; 1
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
	u8 entered,saved;
	u16 duty=200;
    21ea:	fe 01       	movw	r30, r28
    21ec:	e1 58       	subi	r30, 0x81	; 129
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	88 ec       	ldi	r24, 0xC8	; 200
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	80 83       	st	Z, r24
	while(1)
	{
		UART_recieveString(entered);
    21f8:	fe 01       	movw	r30, r28
    21fa:	ee 57       	subi	r30, 0x7E	; 126
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 81       	ld	r24, Z
    2200:	88 2f       	mov	r24, r24
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	0e 94 3b 18 	call	0x3076	; 0x3076 <UART_recieveString>
		if(!strcmp(entered,"increase."))
    2208:	fe 01       	movw	r30, r28
    220a:	ee 57       	subi	r30, 0x7E	; 126
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 81       	ld	r24, Z
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	20 e6       	ldi	r18, 0x60	; 96
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	b9 01       	movw	r22, r18
    221a:	0e 94 bb 18 	call	0x3176	; 0x3176 <strcmp>
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	01 f5       	brne	.+64     	; 0x2262 <main+0xda>
		{
			duty+=50;
    2222:	de 01       	movw	r26, r28
    2224:	a1 58       	subi	r26, 0x81	; 129
    2226:	bf 4f       	sbci	r27, 0xFF	; 255
    2228:	fe 01       	movw	r30, r28
    222a:	e1 58       	subi	r30, 0x81	; 129
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	c2 96       	adiw	r24, 0x32	; 50
    2234:	8d 93       	st	X+, r24
    2236:	9c 93       	st	X, r25
			MTIMER1_voidSetDuty(duty);
    2238:	fe 01       	movw	r30, r28
    223a:	e1 58       	subi	r30, 0x81	; 129
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	80 81       	ld	r24, Z
    2240:	91 81       	ldd	r25, Z+1	; 0x01
    2242:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <MTIMER1_voidSetDuty>
			UART_sendString(entered);
    2246:	fe 01       	movw	r30, r28
    2248:	ee 57       	subi	r30, 0x7E	; 126
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	88 2f       	mov	r24, r24
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 29 18 	call	0x3052	; 0x3052 <UART_sendString>
			DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	60 e0       	ldi	r22, 0x00	; 0
    225a:	41 e0       	ldi	r20, 0x01	; 1
    225c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
    2260:	cb cf       	rjmp	.-106    	; 0x21f8 <main+0x70>
		}
		else if(!strcmp(entered,"decrease."))
    2262:	fe 01       	movw	r30, r28
    2264:	ee 57       	subi	r30, 0x7E	; 126
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 81       	ld	r24, Z
    226a:	88 2f       	mov	r24, r24
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	2a e6       	ldi	r18, 0x6A	; 106
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	b9 01       	movw	r22, r18
    2274:	0e 94 bb 18 	call	0x3176	; 0x3176 <strcmp>
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	01 f5       	brne	.+64     	; 0x22bc <main+0x134>
		{
			duty-=50;
    227c:	de 01       	movw	r26, r28
    227e:	a1 58       	subi	r26, 0x81	; 129
    2280:	bf 4f       	sbci	r27, 0xFF	; 255
    2282:	fe 01       	movw	r30, r28
    2284:	e1 58       	subi	r30, 0x81	; 129
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 81       	ld	r24, Z
    228a:	91 81       	ldd	r25, Z+1	; 0x01
    228c:	c2 97       	sbiw	r24, 0x32	; 50
    228e:	8d 93       	st	X+, r24
    2290:	9c 93       	st	X, r25
			MTIMER1_voidSetDuty(duty);
    2292:	fe 01       	movw	r30, r28
    2294:	e1 58       	subi	r30, 0x81	; 129
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	80 81       	ld	r24, Z
    229a:	91 81       	ldd	r25, Z+1	; 0x01
    229c:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <MTIMER1_voidSetDuty>
			UART_sendString(entered);
    22a0:	fe 01       	movw	r30, r28
    22a2:	ee 57       	subi	r30, 0x7E	; 126
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	80 81       	ld	r24, Z
    22a8:	88 2f       	mov	r24, r24
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 29 18 	call	0x3052	; 0x3052 <UART_sendString>
			DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_LOW);
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
    22ba:	9e cf       	rjmp	.-196    	; 0x21f8 <main+0x70>
		}
		else if(!strcmp(entered,"cw."))
    22bc:	fe 01       	movw	r30, r28
    22be:	ee 57       	subi	r30, 0x7E	; 126
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	88 2f       	mov	r24, r24
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	24 e7       	ldi	r18, 0x74	; 116
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	b9 01       	movw	r22, r18
    22ce:	0e 94 bb 18 	call	0x3176	; 0x3176 <strcmp>
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	f9 f4       	brne	.+62     	; 0x2314 <main+0x18c>
		{
			MTIMER1_voidSetDuty(duty);
    22d6:	fe 01       	movw	r30, r28
    22d8:	e1 58       	subi	r30, 0x81	; 129
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	80 81       	ld	r24, Z
    22de:	91 81       	ldd	r25, Z+1	; 0x01
    22e0:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <MTIMER1_voidSetDuty>
			UART_sendString(entered);
    22e4:	fe 01       	movw	r30, r28
    22e6:	ee 57       	subi	r30, 0x7E	; 126
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	80 81       	ld	r24, Z
    22ec:	88 2f       	mov	r24, r24
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	0e 94 29 18 	call	0x3052	; 0x3052 <UART_sendString>
			DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN0,DIO_u8PIN_HIGH);
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	60 e0       	ldi	r22, 0x00	; 0
    22f8:	41 e0       	ldi	r20, 0x01	; 1
    22fa:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN1,DIO_u8PIN_LOW);
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	61 e0       	ldi	r22, 0x01	; 1
    2302:	40 e0       	ldi	r20, 0x00	; 0
    2304:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_LOW);
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
    2312:	72 cf       	rjmp	.-284    	; 0x21f8 <main+0x70>
		}
		else if(!strcmp(entered,"ccw."))
    2314:	fe 01       	movw	r30, r28
    2316:	ee 57       	subi	r30, 0x7E	; 126
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	80 81       	ld	r24, Z
    231c:	88 2f       	mov	r24, r24
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	28 e7       	ldi	r18, 0x78	; 120
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	b9 01       	movw	r22, r18
    2326:	0e 94 bb 18 	call	0x3176	; 0x3176 <strcmp>
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	f9 f4       	brne	.+62     	; 0x236c <main+0x1e4>
		{
			MTIMER1_voidSetDuty(duty);
    232e:	fe 01       	movw	r30, r28
    2330:	e1 58       	subi	r30, 0x81	; 129
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	80 81       	ld	r24, Z
    2336:	91 81       	ldd	r25, Z+1	; 0x01
    2338:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <MTIMER1_voidSetDuty>
			UART_sendString(entered);
    233c:	fe 01       	movw	r30, r28
    233e:	ee 57       	subi	r30, 0x7E	; 126
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	80 81       	ld	r24, Z
    2344:	88 2f       	mov	r24, r24
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	0e 94 29 18 	call	0x3052	; 0x3052 <UART_sendString>
			DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN1,DIO_u8PIN_HIGH);
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	61 e0       	ldi	r22, 0x01	; 1
    2350:	41 e0       	ldi	r20, 0x01	; 1
    2352:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN0,DIO_u8PIN_LOW);
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	60 e0       	ldi	r22, 0x00	; 0
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_LOW);
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	60 e0       	ldi	r22, 0x00	; 0
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_u8SetPinValue>
    236a:	46 cf       	rjmp	.-372    	; 0x21f8 <main+0x70>
		}
		else if(!strcmp(entered,"rock."))
    236c:	fe 01       	movw	r30, r28
    236e:	ee 57       	subi	r30, 0x7E	; 126
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	88 2f       	mov	r24, r24
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	2d e7       	ldi	r18, 0x7D	; 125
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	b9 01       	movw	r22, r18
    237e:	0e 94 bb 18 	call	0x3176	; 0x3176 <strcmp>
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	09 f0       	breq	.+2      	; 0x2388 <main+0x200>
    2386:	69 c2       	rjmp	.+1234   	; 0x285a <main+0x6d2>
		{
			UART_sendString(entered);
    2388:	fe 01       	movw	r30, r28
    238a:	ee 57       	subi	r30, 0x7E	; 126
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	88 2f       	mov	r24, r24
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	0e 94 29 18 	call	0x3052	; 0x3052 <UART_sendString>
			LCD_vidwritestring(0,0,"rock");
    2398:	23 e8       	ldi	r18, 0x83	; 131
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	a9 01       	movw	r20, r18
    23a2:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_vidwritestring>
			LCD_vidwritedata('V');
    23a6:	86 e5       	ldi	r24, 0x56	; 86
    23a8:	0e 94 25 0a 	call	0x144a	; 0x144a <LCD_vidwritedata>
			LCD_vidwritestring(0,9,"rock");
    23ac:	23 e8       	ldi	r18, 0x83	; 131
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	69 e0       	ldi	r22, 0x09	; 9
    23b4:	a9 01       	movw	r20, r18
    23b6:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_vidwritestring>
			if(!strcmp(saved,"siccors"))
    23ba:	fe 01       	movw	r30, r28
    23bc:	ef 57       	subi	r30, 0x7F	; 127
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	80 81       	ld	r24, Z
    23c2:	88 2f       	mov	r24, r24
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	28 e8       	ldi	r18, 0x88	; 136
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	b9 01       	movw	r22, r18
    23cc:	0e 94 bb 18 	call	0x3176	; 0x3176 <strcmp>
    23d0:	00 97       	sbiw	r24, 0x00	; 0
    23d2:	09 f0       	breq	.+2      	; 0x23d6 <main+0x24e>
    23d4:	bc c0       	rjmp	.+376    	; 0x254e <main+0x3c6>
			{
				LCD_vidwritestring(1,3,"WIN");
    23d6:	20 e9       	ldi	r18, 0x90	; 144
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	63 e0       	ldi	r22, 0x03	; 3
    23de:	a9 01       	movw	r20, r18
    23e0:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_vidwritestring>
    23e4:	fe 01       	movw	r30, r28
    23e6:	e5 58       	subi	r30, 0x85	; 133
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e8       	ldi	r25, 0x80	; 128
    23ee:	ab eb       	ldi	r26, 0xBB	; 187
    23f0:	b4 e4       	ldi	r27, 0x44	; 68
    23f2:	80 83       	st	Z, r24
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	a2 83       	std	Z+2, r26	; 0x02
    23f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fa:	8e 01       	movw	r16, r28
    23fc:	09 58       	subi	r16, 0x89	; 137
    23fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2400:	fe 01       	movw	r30, r28
    2402:	e5 58       	subi	r30, 0x85	; 133
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	60 81       	ld	r22, Z
    2408:	71 81       	ldd	r23, Z+1	; 0x01
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	93 81       	ldd	r25, Z+3	; 0x03
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	4a e7       	ldi	r20, 0x7A	; 122
    2414:	53 e4       	ldi	r21, 0x43	; 67
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	f8 01       	movw	r30, r16
    2420:	80 83       	st	Z, r24
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	a2 83       	std	Z+2, r26	; 0x02
    2426:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2428:	fe 01       	movw	r30, r28
    242a:	e9 58       	subi	r30, 0x89	; 137
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	60 81       	ld	r22, Z
    2430:	71 81       	ldd	r23, Z+1	; 0x01
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	93 81       	ldd	r25, Z+3	; 0x03
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e8       	ldi	r20, 0x80	; 128
    243c:	5f e3       	ldi	r21, 0x3F	; 63
    243e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2442:	88 23       	and	r24, r24
    2444:	44 f4       	brge	.+16     	; 0x2456 <main+0x2ce>
		__ticks = 1;
    2446:	fe 01       	movw	r30, r28
    2448:	eb 58       	subi	r30, 0x8B	; 139
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	91 83       	std	Z+1, r25	; 0x01
    2452:	80 83       	st	Z, r24
    2454:	64 c0       	rjmp	.+200    	; 0x251e <main+0x396>
	else if (__tmp > 65535)
    2456:	fe 01       	movw	r30, r28
    2458:	e9 58       	subi	r30, 0x89	; 137
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	60 81       	ld	r22, Z
    245e:	71 81       	ldd	r23, Z+1	; 0x01
    2460:	82 81       	ldd	r24, Z+2	; 0x02
    2462:	93 81       	ldd	r25, Z+3	; 0x03
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	3f ef       	ldi	r19, 0xFF	; 255
    2468:	4f e7       	ldi	r20, 0x7F	; 127
    246a:	57 e4       	ldi	r21, 0x47	; 71
    246c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2470:	18 16       	cp	r1, r24
    2472:	0c f0       	brlt	.+2      	; 0x2476 <main+0x2ee>
    2474:	43 c0       	rjmp	.+134    	; 0x24fc <main+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2476:	fe 01       	movw	r30, r28
    2478:	e5 58       	subi	r30, 0x85	; 133
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	60 81       	ld	r22, Z
    247e:	71 81       	ldd	r23, Z+1	; 0x01
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	8e 01       	movw	r16, r28
    2496:	0b 58       	subi	r16, 0x8B	; 139
    2498:	1f 4f       	sbci	r17, 0xFF	; 255
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	f8 01       	movw	r30, r16
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	80 83       	st	Z, r24
    24ac:	1f c0       	rjmp	.+62     	; 0x24ec <main+0x364>
    24ae:	fe 01       	movw	r30, r28
    24b0:	ed 58       	subi	r30, 0x8D	; 141
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	89 e1       	ldi	r24, 0x19	; 25
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	80 83       	st	Z, r24
    24bc:	fe 01       	movw	r30, r28
    24be:	ed 58       	subi	r30, 0x8D	; 141
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	80 81       	ld	r24, Z
    24c4:	91 81       	ldd	r25, Z+1	; 0x01
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <main+0x33e>
    24ca:	fe 01       	movw	r30, r28
    24cc:	ed 58       	subi	r30, 0x8D	; 141
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d4:	de 01       	movw	r26, r28
    24d6:	ab 58       	subi	r26, 0x8B	; 139
    24d8:	bf 4f       	sbci	r27, 0xFF	; 255
    24da:	fe 01       	movw	r30, r28
    24dc:	eb 58       	subi	r30, 0x8B	; 139
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 81       	ld	r24, Z
    24e2:	91 81       	ldd	r25, Z+1	; 0x01
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	11 96       	adiw	r26, 0x01	; 1
    24e8:	9c 93       	st	X, r25
    24ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ec:	fe 01       	movw	r30, r28
    24ee:	eb 58       	subi	r30, 0x8B	; 139
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	80 81       	ld	r24, Z
    24f4:	91 81       	ldd	r25, Z+1	; 0x01
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	d1 f6       	brne	.-76     	; 0x24ae <main+0x326>
    24fa:	7e ce       	rjmp	.-772    	; 0x21f8 <main+0x70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fc:	8e 01       	movw	r16, r28
    24fe:	0b 58       	subi	r16, 0x8B	; 139
    2500:	1f 4f       	sbci	r17, 0xFF	; 255
    2502:	fe 01       	movw	r30, r28
    2504:	e9 58       	subi	r30, 0x89	; 137
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	f8 01       	movw	r30, r16
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	80 83       	st	Z, r24
    251e:	de 01       	movw	r26, r28
    2520:	af 58       	subi	r26, 0x8F	; 143
    2522:	bf 4f       	sbci	r27, 0xFF	; 255
    2524:	fe 01       	movw	r30, r28
    2526:	eb 58       	subi	r30, 0x8B	; 139
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	80 81       	ld	r24, Z
    252c:	91 81       	ldd	r25, Z+1	; 0x01
    252e:	11 96       	adiw	r26, 0x01	; 1
    2530:	9c 93       	st	X, r25
    2532:	8e 93       	st	-X, r24
    2534:	fe 01       	movw	r30, r28
    2536:	ef 58       	subi	r30, 0x8F	; 143
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <main+0x3b6>
    2542:	fe 01       	movw	r30, r28
    2544:	ef 58       	subi	r30, 0x8F	; 143
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	91 83       	std	Z+1, r25	; 0x01
    254a:	80 83       	st	Z, r24
    254c:	55 ce       	rjmp	.-854    	; 0x21f8 <main+0x70>
				_delay_ms(1500);
			}
			else if (!strcmp(saved,"paper"))
    254e:	fe 01       	movw	r30, r28
    2550:	ef 57       	subi	r30, 0x7F	; 127
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	80 81       	ld	r24, Z
    2556:	88 2f       	mov	r24, r24
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	24 e9       	ldi	r18, 0x94	; 148
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	b9 01       	movw	r22, r18
    2560:	0e 94 bb 18 	call	0x3176	; 0x3176 <strcmp>
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	09 f0       	breq	.+2      	; 0x256a <main+0x3e2>
    2568:	bc c0       	rjmp	.+376    	; 0x26e2 <main+0x55a>
			{
				LCD_vidwritestring(1,3,"LOSE");
    256a:	2a e9       	ldi	r18, 0x9A	; 154
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	63 e0       	ldi	r22, 0x03	; 3
    2572:	a9 01       	movw	r20, r18
    2574:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_vidwritestring>
    2578:	fe 01       	movw	r30, r28
    257a:	e3 59       	subi	r30, 0x93	; 147
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e8       	ldi	r25, 0x80	; 128
    2582:	ab eb       	ldi	r26, 0xBB	; 187
    2584:	b4 e4       	ldi	r27, 0x44	; 68
    2586:	80 83       	st	Z, r24
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	a2 83       	std	Z+2, r26	; 0x02
    258c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258e:	8e 01       	movw	r16, r28
    2590:	07 59       	subi	r16, 0x97	; 151
    2592:	1f 4f       	sbci	r17, 0xFF	; 255
    2594:	fe 01       	movw	r30, r28
    2596:	e3 59       	subi	r30, 0x93	; 147
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	60 81       	ld	r22, Z
    259c:	71 81       	ldd	r23, Z+1	; 0x01
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	4a e7       	ldi	r20, 0x7A	; 122
    25a8:	53 e4       	ldi	r21, 0x43	; 67
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	f8 01       	movw	r30, r16
    25b4:	80 83       	st	Z, r24
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	a2 83       	std	Z+2, r26	; 0x02
    25ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25bc:	fe 01       	movw	r30, r28
    25be:	e7 59       	subi	r30, 0x97	; 151
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	60 81       	ld	r22, Z
    25c4:	71 81       	ldd	r23, Z+1	; 0x01
    25c6:	82 81       	ldd	r24, Z+2	; 0x02
    25c8:	93 81       	ldd	r25, Z+3	; 0x03
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	44 f4       	brge	.+16     	; 0x25ea <main+0x462>
		__ticks = 1;
    25da:	fe 01       	movw	r30, r28
    25dc:	e9 59       	subi	r30, 0x99	; 153
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	91 83       	std	Z+1, r25	; 0x01
    25e6:	80 83       	st	Z, r24
    25e8:	64 c0       	rjmp	.+200    	; 0x26b2 <main+0x52a>
	else if (__tmp > 65535)
    25ea:	fe 01       	movw	r30, r28
    25ec:	e7 59       	subi	r30, 0x97	; 151
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	60 81       	ld	r22, Z
    25f2:	71 81       	ldd	r23, Z+1	; 0x01
    25f4:	82 81       	ldd	r24, Z+2	; 0x02
    25f6:	93 81       	ldd	r25, Z+3	; 0x03
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	3f ef       	ldi	r19, 0xFF	; 255
    25fc:	4f e7       	ldi	r20, 0x7F	; 127
    25fe:	57 e4       	ldi	r21, 0x47	; 71
    2600:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2604:	18 16       	cp	r1, r24
    2606:	0c f0       	brlt	.+2      	; 0x260a <main+0x482>
    2608:	43 c0       	rjmp	.+134    	; 0x2690 <main+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260a:	fe 01       	movw	r30, r28
    260c:	e3 59       	subi	r30, 0x93	; 147
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e2       	ldi	r20, 0x20	; 32
    261e:	51 e4       	ldi	r21, 0x41	; 65
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	8e 01       	movw	r16, r28
    262a:	09 59       	subi	r16, 0x99	; 153
    262c:	1f 4f       	sbci	r17, 0xFF	; 255
    262e:	bc 01       	movw	r22, r24
    2630:	cd 01       	movw	r24, r26
    2632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	f8 01       	movw	r30, r16
    263c:	91 83       	std	Z+1, r25	; 0x01
    263e:	80 83       	st	Z, r24
    2640:	1f c0       	rjmp	.+62     	; 0x2680 <main+0x4f8>
    2642:	fe 01       	movw	r30, r28
    2644:	eb 59       	subi	r30, 0x9B	; 155
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	89 e1       	ldi	r24, 0x19	; 25
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	80 83       	st	Z, r24
    2650:	fe 01       	movw	r30, r28
    2652:	eb 59       	subi	r30, 0x9B	; 155
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 81       	ld	r24, Z
    2658:	91 81       	ldd	r25, Z+1	; 0x01
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <main+0x4d2>
    265e:	fe 01       	movw	r30, r28
    2660:	eb 59       	subi	r30, 0x9B	; 155
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	91 83       	std	Z+1, r25	; 0x01
    2666:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2668:	de 01       	movw	r26, r28
    266a:	a9 59       	subi	r26, 0x99	; 153
    266c:	bf 4f       	sbci	r27, 0xFF	; 255
    266e:	fe 01       	movw	r30, r28
    2670:	e9 59       	subi	r30, 0x99	; 153
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 81       	ld	r24, Z
    2676:	91 81       	ldd	r25, Z+1	; 0x01
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	11 96       	adiw	r26, 0x01	; 1
    267c:	9c 93       	st	X, r25
    267e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2680:	fe 01       	movw	r30, r28
    2682:	e9 59       	subi	r30, 0x99	; 153
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 81       	ld	r24, Z
    2688:	91 81       	ldd	r25, Z+1	; 0x01
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	d1 f6       	brne	.-76     	; 0x2642 <main+0x4ba>
    268e:	b4 cd       	rjmp	.-1176   	; 0x21f8 <main+0x70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2690:	8e 01       	movw	r16, r28
    2692:	09 59       	subi	r16, 0x99	; 153
    2694:	1f 4f       	sbci	r17, 0xFF	; 255
    2696:	fe 01       	movw	r30, r28
    2698:	e7 59       	subi	r30, 0x97	; 151
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	60 81       	ld	r22, Z
    269e:	71 81       	ldd	r23, Z+1	; 0x01
    26a0:	82 81       	ldd	r24, Z+2	; 0x02
    26a2:	93 81       	ldd	r25, Z+3	; 0x03
    26a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	f8 01       	movw	r30, r16
    26ae:	91 83       	std	Z+1, r25	; 0x01
    26b0:	80 83       	st	Z, r24
    26b2:	de 01       	movw	r26, r28
    26b4:	ad 59       	subi	r26, 0x9D	; 157
    26b6:	bf 4f       	sbci	r27, 0xFF	; 255
    26b8:	fe 01       	movw	r30, r28
    26ba:	e9 59       	subi	r30, 0x99	; 153
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	11 96       	adiw	r26, 0x01	; 1
    26c4:	9c 93       	st	X, r25
    26c6:	8e 93       	st	-X, r24
    26c8:	fe 01       	movw	r30, r28
    26ca:	ed 59       	subi	r30, 0x9D	; 157
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	80 81       	ld	r24, Z
    26d0:	91 81       	ldd	r25, Z+1	; 0x01
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <main+0x54a>
    26d6:	fe 01       	movw	r30, r28
    26d8:	ed 59       	subi	r30, 0x9D	; 157
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	80 83       	st	Z, r24
    26e0:	8b cd       	rjmp	.-1258   	; 0x21f8 <main+0x70>
				_delay_ms(1500);
			}
			else
			{
				LCD_vidwritestring(1,3,"STALEMATE");
    26e2:	2f e9       	ldi	r18, 0x9F	; 159
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	63 e0       	ldi	r22, 0x03	; 3
    26ea:	a9 01       	movw	r20, r18
    26ec:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_vidwritestring>
    26f0:	fe 01       	movw	r30, r28
    26f2:	e1 5a       	subi	r30, 0xA1	; 161
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	aa ef       	ldi	r26, 0xFA	; 250
    26fc:	b3 e4       	ldi	r27, 0x43	; 67
    26fe:	80 83       	st	Z, r24
    2700:	91 83       	std	Z+1, r25	; 0x01
    2702:	a2 83       	std	Z+2, r26	; 0x02
    2704:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2706:	8e 01       	movw	r16, r28
    2708:	05 5a       	subi	r16, 0xA5	; 165
    270a:	1f 4f       	sbci	r17, 0xFF	; 255
    270c:	fe 01       	movw	r30, r28
    270e:	e1 5a       	subi	r30, 0xA1	; 161
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	60 81       	ld	r22, Z
    2714:	71 81       	ldd	r23, Z+1	; 0x01
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	93 81       	ldd	r25, Z+3	; 0x03
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	4a e7       	ldi	r20, 0x7A	; 122
    2720:	53 e4       	ldi	r21, 0x43	; 67
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	f8 01       	movw	r30, r16
    272c:	80 83       	st	Z, r24
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	a2 83       	std	Z+2, r26	; 0x02
    2732:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2734:	fe 01       	movw	r30, r28
    2736:	e5 5a       	subi	r30, 0xA5	; 165
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e8       	ldi	r20, 0x80	; 128
    2748:	5f e3       	ldi	r21, 0x3F	; 63
    274a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    274e:	88 23       	and	r24, r24
    2750:	44 f4       	brge	.+16     	; 0x2762 <main+0x5da>
		__ticks = 1;
    2752:	fe 01       	movw	r30, r28
    2754:	e7 5a       	subi	r30, 0xA7	; 167
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	80 83       	st	Z, r24
    2760:	64 c0       	rjmp	.+200    	; 0x282a <main+0x6a2>
	else if (__tmp > 65535)
    2762:	fe 01       	movw	r30, r28
    2764:	e5 5a       	subi	r30, 0xA5	; 165
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	60 81       	ld	r22, Z
    276a:	71 81       	ldd	r23, Z+1	; 0x01
    276c:	82 81       	ldd	r24, Z+2	; 0x02
    276e:	93 81       	ldd	r25, Z+3	; 0x03
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	3f ef       	ldi	r19, 0xFF	; 255
    2774:	4f e7       	ldi	r20, 0x7F	; 127
    2776:	57 e4       	ldi	r21, 0x47	; 71
    2778:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    277c:	18 16       	cp	r1, r24
    277e:	0c f0       	brlt	.+2      	; 0x2782 <main+0x5fa>
    2780:	43 c0       	rjmp	.+134    	; 0x2808 <main+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2782:	fe 01       	movw	r30, r28
    2784:	e1 5a       	subi	r30, 0xA1	; 161
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	60 81       	ld	r22, Z
    278a:	71 81       	ldd	r23, Z+1	; 0x01
    278c:	82 81       	ldd	r24, Z+2	; 0x02
    278e:	93 81       	ldd	r25, Z+3	; 0x03
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e2       	ldi	r20, 0x20	; 32
    2796:	51 e4       	ldi	r21, 0x41	; 65
    2798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	8e 01       	movw	r16, r28
    27a2:	07 5a       	subi	r16, 0xA7	; 167
    27a4:	1f 4f       	sbci	r17, 0xFF	; 255
    27a6:	bc 01       	movw	r22, r24
    27a8:	cd 01       	movw	r24, r26
    27aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	f8 01       	movw	r30, r16
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	80 83       	st	Z, r24
    27b8:	1f c0       	rjmp	.+62     	; 0x27f8 <main+0x670>
    27ba:	fe 01       	movw	r30, r28
    27bc:	e9 5a       	subi	r30, 0xA9	; 169
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	89 e1       	ldi	r24, 0x19	; 25
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	91 83       	std	Z+1, r25	; 0x01
    27c6:	80 83       	st	Z, r24
    27c8:	fe 01       	movw	r30, r28
    27ca:	e9 5a       	subi	r30, 0xA9	; 169
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 81       	ld	r24, Z
    27d0:	91 81       	ldd	r25, Z+1	; 0x01
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <main+0x64a>
    27d6:	fe 01       	movw	r30, r28
    27d8:	e9 5a       	subi	r30, 0xA9	; 169
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	91 83       	std	Z+1, r25	; 0x01
    27de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e0:	de 01       	movw	r26, r28
    27e2:	a7 5a       	subi	r26, 0xA7	; 167
    27e4:	bf 4f       	sbci	r27, 0xFF	; 255
    27e6:	fe 01       	movw	r30, r28
    27e8:	e7 5a       	subi	r30, 0xA7	; 167
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	11 96       	adiw	r26, 0x01	; 1
    27f4:	9c 93       	st	X, r25
    27f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f8:	fe 01       	movw	r30, r28
    27fa:	e7 5a       	subi	r30, 0xA7	; 167
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	80 81       	ld	r24, Z
    2800:	91 81       	ldd	r25, Z+1	; 0x01
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	d1 f6       	brne	.-76     	; 0x27ba <main+0x632>
    2806:	f8 cc       	rjmp	.-1552   	; 0x21f8 <main+0x70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2808:	8e 01       	movw	r16, r28
    280a:	07 5a       	subi	r16, 0xA7	; 167
    280c:	1f 4f       	sbci	r17, 0xFF	; 255
    280e:	fe 01       	movw	r30, r28
    2810:	e5 5a       	subi	r30, 0xA5	; 165
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	60 81       	ld	r22, Z
    2816:	71 81       	ldd	r23, Z+1	; 0x01
    2818:	82 81       	ldd	r24, Z+2	; 0x02
    281a:	93 81       	ldd	r25, Z+3	; 0x03
    281c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	f8 01       	movw	r30, r16
    2826:	91 83       	std	Z+1, r25	; 0x01
    2828:	80 83       	st	Z, r24
    282a:	de 01       	movw	r26, r28
    282c:	ab 5a       	subi	r26, 0xAB	; 171
    282e:	bf 4f       	sbci	r27, 0xFF	; 255
    2830:	fe 01       	movw	r30, r28
    2832:	e7 5a       	subi	r30, 0xA7	; 167
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	11 96       	adiw	r26, 0x01	; 1
    283c:	9c 93       	st	X, r25
    283e:	8e 93       	st	-X, r24
    2840:	fe 01       	movw	r30, r28
    2842:	eb 5a       	subi	r30, 0xAB	; 171
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	80 81       	ld	r24, Z
    2848:	91 81       	ldd	r25, Z+1	; 0x01
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <main+0x6c2>
    284e:	fe 01       	movw	r30, r28
    2850:	eb 5a       	subi	r30, 0xAB	; 171
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	91 83       	std	Z+1, r25	; 0x01
    2856:	80 83       	st	Z, r24
    2858:	cf cc       	rjmp	.-1634   	; 0x21f8 <main+0x70>
				_delay_ms(500);
			}
		}
		else if(!strcmp(entered,"paper."))
    285a:	fe 01       	movw	r30, r28
    285c:	ee 57       	subi	r30, 0x7E	; 126
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	80 81       	ld	r24, Z
    2862:	88 2f       	mov	r24, r24
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	29 ea       	ldi	r18, 0xA9	; 169
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	b9 01       	movw	r22, r18
    286c:	0e 94 bb 18 	call	0x3176	; 0x3176 <strcmp>
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	09 f0       	breq	.+2      	; 0x2876 <main+0x6ee>
    2874:	f8 c1       	rjmp	.+1008   	; 0x2c66 <main+0xade>
		{
			UART_sendString(entered);
    2876:	fe 01       	movw	r30, r28
    2878:	ee 57       	subi	r30, 0x7E	; 126
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	88 2f       	mov	r24, r24
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	0e 94 29 18 	call	0x3052	; 0x3052 <UART_sendString>
			LCD_vidwritestring(0,0,"paper");
    2886:	24 e9       	ldi	r18, 0x94	; 148
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	60 e0       	ldi	r22, 0x00	; 0
    288e:	a9 01       	movw	r20, r18
    2890:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_vidwritestring>
			LCD_vidwritedata('V');
    2894:	86 e5       	ldi	r24, 0x56	; 86
    2896:	0e 94 25 0a 	call	0x144a	; 0x144a <LCD_vidwritedata>
			LCD_vidwritestring(0,9,"rock");
    289a:	23 e8       	ldi	r18, 0x83	; 131
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	69 e0       	ldi	r22, 0x09	; 9
    28a2:	a9 01       	movw	r20, r18
    28a4:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_vidwritestring>
			if(!strcmp(saved,"rock"))
    28a8:	fe 01       	movw	r30, r28
    28aa:	ef 57       	subi	r30, 0x7F	; 127
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	80 81       	ld	r24, Z
    28b0:	88 2f       	mov	r24, r24
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	23 e8       	ldi	r18, 0x83	; 131
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	b9 01       	movw	r22, r18
    28ba:	0e 94 bb 18 	call	0x3176	; 0x3176 <strcmp>
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	09 f0       	breq	.+2      	; 0x28c4 <main+0x73c>
    28c2:	bc c0       	rjmp	.+376    	; 0x2a3c <main+0x8b4>
			{
				LCD_vidwritestring(1,3,"WIN");
    28c4:	20 e9       	ldi	r18, 0x90	; 144
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	63 e0       	ldi	r22, 0x03	; 3
    28cc:	a9 01       	movw	r20, r18
    28ce:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_vidwritestring>
    28d2:	fe 01       	movw	r30, r28
    28d4:	ef 5a       	subi	r30, 0xAF	; 175
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e8       	ldi	r25, 0x80	; 128
    28dc:	ab eb       	ldi	r26, 0xBB	; 187
    28de:	b4 e4       	ldi	r27, 0x44	; 68
    28e0:	80 83       	st	Z, r24
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	a2 83       	std	Z+2, r26	; 0x02
    28e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	8e 01       	movw	r16, r28
    28ea:	03 5b       	subi	r16, 0xB3	; 179
    28ec:	1f 4f       	sbci	r17, 0xFF	; 255
    28ee:	fe 01       	movw	r30, r28
    28f0:	ef 5a       	subi	r30, 0xAF	; 175
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	60 81       	ld	r22, Z
    28f6:	71 81       	ldd	r23, Z+1	; 0x01
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	93 81       	ldd	r25, Z+3	; 0x03
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	4a e7       	ldi	r20, 0x7A	; 122
    2902:	53 e4       	ldi	r21, 0x43	; 67
    2904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	f8 01       	movw	r30, r16
    290e:	80 83       	st	Z, r24
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	a2 83       	std	Z+2, r26	; 0x02
    2914:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2916:	fe 01       	movw	r30, r28
    2918:	e3 5b       	subi	r30, 0xB3	; 179
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	60 81       	ld	r22, Z
    291e:	71 81       	ldd	r23, Z+1	; 0x01
    2920:	82 81       	ldd	r24, Z+2	; 0x02
    2922:	93 81       	ldd	r25, Z+3	; 0x03
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e8       	ldi	r20, 0x80	; 128
    292a:	5f e3       	ldi	r21, 0x3F	; 63
    292c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2930:	88 23       	and	r24, r24
    2932:	44 f4       	brge	.+16     	; 0x2944 <main+0x7bc>
		__ticks = 1;
    2934:	fe 01       	movw	r30, r28
    2936:	e5 5b       	subi	r30, 0xB5	; 181
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	80 83       	st	Z, r24
    2942:	64 c0       	rjmp	.+200    	; 0x2a0c <main+0x884>
	else if (__tmp > 65535)
    2944:	fe 01       	movw	r30, r28
    2946:	e3 5b       	subi	r30, 0xB3	; 179
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	60 81       	ld	r22, Z
    294c:	71 81       	ldd	r23, Z+1	; 0x01
    294e:	82 81       	ldd	r24, Z+2	; 0x02
    2950:	93 81       	ldd	r25, Z+3	; 0x03
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	3f ef       	ldi	r19, 0xFF	; 255
    2956:	4f e7       	ldi	r20, 0x7F	; 127
    2958:	57 e4       	ldi	r21, 0x47	; 71
    295a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295e:	18 16       	cp	r1, r24
    2960:	0c f0       	brlt	.+2      	; 0x2964 <main+0x7dc>
    2962:	43 c0       	rjmp	.+134    	; 0x29ea <main+0x862>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2964:	fe 01       	movw	r30, r28
    2966:	ef 5a       	subi	r30, 0xAF	; 175
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	60 81       	ld	r22, Z
    296c:	71 81       	ldd	r23, Z+1	; 0x01
    296e:	82 81       	ldd	r24, Z+2	; 0x02
    2970:	93 81       	ldd	r25, Z+3	; 0x03
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e2       	ldi	r20, 0x20	; 32
    2978:	51 e4       	ldi	r21, 0x41	; 65
    297a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	8e 01       	movw	r16, r28
    2984:	05 5b       	subi	r16, 0xB5	; 181
    2986:	1f 4f       	sbci	r17, 0xFF	; 255
    2988:	bc 01       	movw	r22, r24
    298a:	cd 01       	movw	r24, r26
    298c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	f8 01       	movw	r30, r16
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	1f c0       	rjmp	.+62     	; 0x29da <main+0x852>
    299c:	fe 01       	movw	r30, r28
    299e:	e7 5b       	subi	r30, 0xB7	; 183
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	89 e1       	ldi	r24, 0x19	; 25
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	80 83       	st	Z, r24
    29aa:	fe 01       	movw	r30, r28
    29ac:	e7 5b       	subi	r30, 0xB7	; 183
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	80 81       	ld	r24, Z
    29b2:	91 81       	ldd	r25, Z+1	; 0x01
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <main+0x82c>
    29b8:	fe 01       	movw	r30, r28
    29ba:	e7 5b       	subi	r30, 0xB7	; 183
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	91 83       	std	Z+1, r25	; 0x01
    29c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c2:	de 01       	movw	r26, r28
    29c4:	a5 5b       	subi	r26, 0xB5	; 181
    29c6:	bf 4f       	sbci	r27, 0xFF	; 255
    29c8:	fe 01       	movw	r30, r28
    29ca:	e5 5b       	subi	r30, 0xB5	; 181
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	80 81       	ld	r24, Z
    29d0:	91 81       	ldd	r25, Z+1	; 0x01
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	11 96       	adiw	r26, 0x01	; 1
    29d6:	9c 93       	st	X, r25
    29d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29da:	fe 01       	movw	r30, r28
    29dc:	e5 5b       	subi	r30, 0xB5	; 181
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	80 81       	ld	r24, Z
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	d1 f6       	brne	.-76     	; 0x299c <main+0x814>
    29e8:	07 cc       	rjmp	.-2034   	; 0x21f8 <main+0x70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ea:	8e 01       	movw	r16, r28
    29ec:	05 5b       	subi	r16, 0xB5	; 181
    29ee:	1f 4f       	sbci	r17, 0xFF	; 255
    29f0:	fe 01       	movw	r30, r28
    29f2:	e3 5b       	subi	r30, 0xB3	; 179
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	60 81       	ld	r22, Z
    29f8:	71 81       	ldd	r23, Z+1	; 0x01
    29fa:	82 81       	ldd	r24, Z+2	; 0x02
    29fc:	93 81       	ldd	r25, Z+3	; 0x03
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	f8 01       	movw	r30, r16
    2a08:	91 83       	std	Z+1, r25	; 0x01
    2a0a:	80 83       	st	Z, r24
    2a0c:	de 01       	movw	r26, r28
    2a0e:	a9 5b       	subi	r26, 0xB9	; 185
    2a10:	bf 4f       	sbci	r27, 0xFF	; 255
    2a12:	fe 01       	movw	r30, r28
    2a14:	e5 5b       	subi	r30, 0xB5	; 181
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 81       	ld	r24, Z
    2a1a:	91 81       	ldd	r25, Z+1	; 0x01
    2a1c:	11 96       	adiw	r26, 0x01	; 1
    2a1e:	9c 93       	st	X, r25
    2a20:	8e 93       	st	-X, r24
    2a22:	fe 01       	movw	r30, r28
    2a24:	e9 5b       	subi	r30, 0xB9	; 185
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <main+0x8a4>
    2a30:	fe 01       	movw	r30, r28
    2a32:	e9 5b       	subi	r30, 0xB9	; 185
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
    2a3a:	de cb       	rjmp	.-2116   	; 0x21f8 <main+0x70>
				_delay_ms(1500);
			}
			else if (!strcmp(saved,"siccors"))
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ef 57       	subi	r30, 0x7F	; 127
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	88 2f       	mov	r24, r24
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	28 e8       	ldi	r18, 0x88	; 136
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	b9 01       	movw	r22, r18
    2a4e:	0e 94 bb 18 	call	0x3176	; 0x3176 <strcmp>
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	09 f0       	breq	.+2      	; 0x2a58 <main+0x8d0>
    2a56:	8d c0       	rjmp	.+282    	; 0x2b72 <main+0x9ea>
			{
				LCD_vidwritestring(1,3,"LOSE");
    2a58:	2a e9       	ldi	r18, 0x9A	; 154
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	63 e0       	ldi	r22, 0x03	; 3
    2a60:	a9 01       	movw	r20, r18
    2a62:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_vidwritestring>
    2a66:	fe 01       	movw	r30, r28
    2a68:	ed 5b       	subi	r30, 0xBD	; 189
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	90 e8       	ldi	r25, 0x80	; 128
    2a70:	ab eb       	ldi	r26, 0xBB	; 187
    2a72:	b4 e4       	ldi	r27, 0x44	; 68
    2a74:	80 83       	st	Z, r24
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	a2 83       	std	Z+2, r26	; 0x02
    2a7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7c:	8e 01       	movw	r16, r28
    2a7e:	01 5c       	subi	r16, 0xC1	; 193
    2a80:	1f 4f       	sbci	r17, 0xFF	; 255
    2a82:	fe 01       	movw	r30, r28
    2a84:	ed 5b       	subi	r30, 0xBD	; 189
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	60 81       	ld	r22, Z
    2a8a:	71 81       	ldd	r23, Z+1	; 0x01
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	93 81       	ldd	r25, Z+3	; 0x03
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	4a e7       	ldi	r20, 0x7A	; 122
    2a96:	53 e4       	ldi	r21, 0x43	; 67
    2a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	f8 01       	movw	r30, r16
    2aa2:	80 83       	st	Z, r24
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	a2 83       	std	Z+2, r26	; 0x02
    2aa8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aaa:	fe 01       	movw	r30, r28
    2aac:	ff 96       	adiw	r30, 0x3f	; 63
    2aae:	60 81       	ld	r22, Z
    2ab0:	71 81       	ldd	r23, Z+1	; 0x01
    2ab2:	82 81       	ldd	r24, Z+2	; 0x02
    2ab4:	93 81       	ldd	r25, Z+3	; 0x03
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e8       	ldi	r20, 0x80	; 128
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ac2:	88 23       	and	r24, r24
    2ac4:	2c f4       	brge	.+10     	; 0x2ad0 <main+0x948>
		__ticks = 1;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	9e af       	std	Y+62, r25	; 0x3e
    2acc:	8d af       	std	Y+61, r24	; 0x3d
    2ace:	46 c0       	rjmp	.+140    	; 0x2b5c <main+0x9d4>
	else if (__tmp > 65535)
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	ff 96       	adiw	r30, 0x3f	; 63
    2ad4:	60 81       	ld	r22, Z
    2ad6:	71 81       	ldd	r23, Z+1	; 0x01
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	93 81       	ldd	r25, Z+3	; 0x03
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	3f ef       	ldi	r19, 0xFF	; 255
    2ae0:	4f e7       	ldi	r20, 0x7F	; 127
    2ae2:	57 e4       	ldi	r21, 0x47	; 71
    2ae4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae8:	18 16       	cp	r1, r24
    2aea:	64 f5       	brge	.+88     	; 0x2b44 <main+0x9bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aec:	fe 01       	movw	r30, r28
    2aee:	ed 5b       	subi	r30, 0xBD	; 189
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	60 81       	ld	r22, Z
    2af4:	71 81       	ldd	r23, Z+1	; 0x01
    2af6:	82 81       	ldd	r24, Z+2	; 0x02
    2af8:	93 81       	ldd	r25, Z+3	; 0x03
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e2       	ldi	r20, 0x20	; 32
    2b00:	51 e4       	ldi	r21, 0x41	; 65
    2b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	9e af       	std	Y+62, r25	; 0x3e
    2b18:	8d af       	std	Y+61, r24	; 0x3d
    2b1a:	0f c0       	rjmp	.+30     	; 0x2b3a <main+0x9b2>
    2b1c:	89 e1       	ldi	r24, 0x19	; 25
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	9c af       	std	Y+60, r25	; 0x3c
    2b22:	8b af       	std	Y+59, r24	; 0x3b
    2b24:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b26:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <main+0x9a0>
    2b2c:	9c af       	std	Y+60, r25	; 0x3c
    2b2e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b30:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b32:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	9e af       	std	Y+62, r25	; 0x3e
    2b38:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b3e:	00 97       	sbiw	r24, 0x00	; 0
    2b40:	69 f7       	brne	.-38     	; 0x2b1c <main+0x994>
    2b42:	5a cb       	rjmp	.-2380   	; 0x21f8 <main+0x70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b44:	fe 01       	movw	r30, r28
    2b46:	ff 96       	adiw	r30, 0x3f	; 63
    2b48:	60 81       	ld	r22, Z
    2b4a:	71 81       	ldd	r23, Z+1	; 0x01
    2b4c:	82 81       	ldd	r24, Z+2	; 0x02
    2b4e:	93 81       	ldd	r25, Z+3	; 0x03
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9e af       	std	Y+62, r25	; 0x3e
    2b5a:	8d af       	std	Y+61, r24	; 0x3d
    2b5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b60:	9a af       	std	Y+58, r25	; 0x3a
    2b62:	89 af       	std	Y+57, r24	; 0x39
    2b64:	89 ad       	ldd	r24, Y+57	; 0x39
    2b66:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <main+0x9e0>
    2b6c:	9a af       	std	Y+58, r25	; 0x3a
    2b6e:	89 af       	std	Y+57, r24	; 0x39
    2b70:	43 cb       	rjmp	.-2426   	; 0x21f8 <main+0x70>
				_delay_ms(1500);
			}
			else
			{
				LCD_vidwritestring(1,3,"STALEMATE");
    2b72:	2f e9       	ldi	r18, 0x9F	; 159
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	63 e0       	ldi	r22, 0x03	; 3
    2b7a:	a9 01       	movw	r20, r18
    2b7c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_vidwritestring>
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e8       	ldi	r25, 0x80	; 128
    2b84:	ab eb       	ldi	r26, 0xBB	; 187
    2b86:	b4 e4       	ldi	r27, 0x44	; 68
    2b88:	8d ab       	std	Y+53, r24	; 0x35
    2b8a:	9e ab       	std	Y+54, r25	; 0x36
    2b8c:	af ab       	std	Y+55, r26	; 0x37
    2b8e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b90:	6d a9       	ldd	r22, Y+53	; 0x35
    2b92:	7e a9       	ldd	r23, Y+54	; 0x36
    2b94:	8f a9       	ldd	r24, Y+55	; 0x37
    2b96:	98 ad       	ldd	r25, Y+56	; 0x38
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	4a e7       	ldi	r20, 0x7A	; 122
    2b9e:	53 e4       	ldi	r21, 0x43	; 67
    2ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	89 ab       	std	Y+49, r24	; 0x31
    2baa:	9a ab       	std	Y+50, r25	; 0x32
    2bac:	ab ab       	std	Y+51, r26	; 0x33
    2bae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bb0:	69 a9       	ldd	r22, Y+49	; 0x31
    2bb2:	7a a9       	ldd	r23, Y+50	; 0x32
    2bb4:	8b a9       	ldd	r24, Y+51	; 0x33
    2bb6:	9c a9       	ldd	r25, Y+52	; 0x34
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e8       	ldi	r20, 0x80	; 128
    2bbe:	5f e3       	ldi	r21, 0x3F	; 63
    2bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc4:	88 23       	and	r24, r24
    2bc6:	2c f4       	brge	.+10     	; 0x2bd2 <main+0xa4a>
		__ticks = 1;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	98 ab       	std	Y+48, r25	; 0x30
    2bce:	8f a7       	std	Y+47, r24	; 0x2f
    2bd0:	3f c0       	rjmp	.+126    	; 0x2c50 <main+0xac8>
	else if (__tmp > 65535)
    2bd2:	69 a9       	ldd	r22, Y+49	; 0x31
    2bd4:	7a a9       	ldd	r23, Y+50	; 0x32
    2bd6:	8b a9       	ldd	r24, Y+51	; 0x33
    2bd8:	9c a9       	ldd	r25, Y+52	; 0x34
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	3f ef       	ldi	r19, 0xFF	; 255
    2bde:	4f e7       	ldi	r20, 0x7F	; 127
    2be0:	57 e4       	ldi	r21, 0x47	; 71
    2be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be6:	18 16       	cp	r1, r24
    2be8:	4c f5       	brge	.+82     	; 0x2c3c <main+0xab4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bea:	6d a9       	ldd	r22, Y+53	; 0x35
    2bec:	7e a9       	ldd	r23, Y+54	; 0x36
    2bee:	8f a9       	ldd	r24, Y+55	; 0x37
    2bf0:	98 ad       	ldd	r25, Y+56	; 0x38
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e2       	ldi	r20, 0x20	; 32
    2bf8:	51 e4       	ldi	r21, 0x41	; 65
    2bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	98 ab       	std	Y+48, r25	; 0x30
    2c10:	8f a7       	std	Y+47, r24	; 0x2f
    2c12:	0f c0       	rjmp	.+30     	; 0x2c32 <main+0xaaa>
    2c14:	89 e1       	ldi	r24, 0x19	; 25
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	9e a7       	std	Y+46, r25	; 0x2e
    2c1a:	8d a7       	std	Y+45, r24	; 0x2d
    2c1c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c1e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <main+0xa98>
    2c24:	9e a7       	std	Y+46, r25	; 0x2e
    2c26:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c28:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c2a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	98 ab       	std	Y+48, r25	; 0x30
    2c30:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c32:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c34:	98 a9       	ldd	r25, Y+48	; 0x30
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	69 f7       	brne	.-38     	; 0x2c14 <main+0xa8c>
    2c3a:	de ca       	rjmp	.-2628   	; 0x21f8 <main+0x70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c3e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c40:	8b a9       	ldd	r24, Y+51	; 0x33
    2c42:	9c a9       	ldd	r25, Y+52	; 0x34
    2c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	98 ab       	std	Y+48, r25	; 0x30
    2c4e:	8f a7       	std	Y+47, r24	; 0x2f
    2c50:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c52:	98 a9       	ldd	r25, Y+48	; 0x30
    2c54:	9c a7       	std	Y+44, r25	; 0x2c
    2c56:	8b a7       	std	Y+43, r24	; 0x2b
    2c58:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <main+0xad4>
    2c60:	9c a7       	std	Y+44, r25	; 0x2c
    2c62:	8b a7       	std	Y+43, r24	; 0x2b
    2c64:	c9 ca       	rjmp	.-2670   	; 0x21f8 <main+0x70>
				_delay_ms(1500);
			}
		}
		else if(!strcmp(entered,"siccors."))
    2c66:	fe 01       	movw	r30, r28
    2c68:	ee 57       	subi	r30, 0x7E	; 126
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	80 81       	ld	r24, Z
    2c6e:	88 2f       	mov	r24, r24
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	20 eb       	ldi	r18, 0xB0	; 176
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	b9 01       	movw	r22, r18
    2c78:	0e 94 bb 18 	call	0x3176	; 0x3176 <strcmp>
    2c7c:	00 97       	sbiw	r24, 0x00	; 0
    2c7e:	09 f0       	breq	.+2      	; 0x2c82 <main+0xafa>
    2c80:	bb ca       	rjmp	.-2698   	; 0x21f8 <main+0x70>
		{
			UART_sendString(entered);
    2c82:	fe 01       	movw	r30, r28
    2c84:	ee 57       	subi	r30, 0x7E	; 126
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	80 81       	ld	r24, Z
    2c8a:	88 2f       	mov	r24, r24
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	0e 94 29 18 	call	0x3052	; 0x3052 <UART_sendString>
			LCD_vidwritestring(0,0,"siccors");
    2c92:	28 e8       	ldi	r18, 0x88	; 136
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	60 e0       	ldi	r22, 0x00	; 0
    2c9a:	a9 01       	movw	r20, r18
    2c9c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_vidwritestring>
			LCD_vidwritedata('V');
    2ca0:	86 e5       	ldi	r24, 0x56	; 86
    2ca2:	0e 94 25 0a 	call	0x144a	; 0x144a <LCD_vidwritedata>
			LCD_vidwritestring(0,9,"rock");
    2ca6:	23 e8       	ldi	r18, 0x83	; 131
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	69 e0       	ldi	r22, 0x09	; 9
    2cae:	a9 01       	movw	r20, r18
    2cb0:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_vidwritestring>
			if(!strcmp(saved,"paper"))
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	ef 57       	subi	r30, 0x7F	; 127
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	80 81       	ld	r24, Z
    2cbc:	88 2f       	mov	r24, r24
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	24 e9       	ldi	r18, 0x94	; 148
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	b9 01       	movw	r22, r18
    2cc6:	0e 94 bb 18 	call	0x3176	; 0x3176 <strcmp>
    2cca:	00 97       	sbiw	r24, 0x00	; 0
    2ccc:	09 f0       	breq	.+2      	; 0x2cd0 <main+0xb48>
    2cce:	7a c0       	rjmp	.+244    	; 0x2dc4 <main+0xc3c>
			{
				LCD_vidwritestring(1,3,"WIN");
    2cd0:	20 e9       	ldi	r18, 0x90	; 144
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	63 e0       	ldi	r22, 0x03	; 3
    2cd8:	a9 01       	movw	r20, r18
    2cda:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_vidwritestring>
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	90 e8       	ldi	r25, 0x80	; 128
    2ce2:	ab eb       	ldi	r26, 0xBB	; 187
    2ce4:	b4 e4       	ldi	r27, 0x44	; 68
    2ce6:	8f a3       	std	Y+39, r24	; 0x27
    2ce8:	98 a7       	std	Y+40, r25	; 0x28
    2cea:	a9 a7       	std	Y+41, r26	; 0x29
    2cec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cee:	6f a1       	ldd	r22, Y+39	; 0x27
    2cf0:	78 a5       	ldd	r23, Y+40	; 0x28
    2cf2:	89 a5       	ldd	r24, Y+41	; 0x29
    2cf4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	4a e7       	ldi	r20, 0x7A	; 122
    2cfc:	53 e4       	ldi	r21, 0x43	; 67
    2cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	8b a3       	std	Y+35, r24	; 0x23
    2d08:	9c a3       	std	Y+36, r25	; 0x24
    2d0a:	ad a3       	std	Y+37, r26	; 0x25
    2d0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d0e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d10:	7c a1       	ldd	r23, Y+36	; 0x24
    2d12:	8d a1       	ldd	r24, Y+37	; 0x25
    2d14:	9e a1       	ldd	r25, Y+38	; 0x26
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e8       	ldi	r20, 0x80	; 128
    2d1c:	5f e3       	ldi	r21, 0x3F	; 63
    2d1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d22:	88 23       	and	r24, r24
    2d24:	2c f4       	brge	.+10     	; 0x2d30 <main+0xba8>
		__ticks = 1;
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	9a a3       	std	Y+34, r25	; 0x22
    2d2c:	89 a3       	std	Y+33, r24	; 0x21
    2d2e:	3f c0       	rjmp	.+126    	; 0x2dae <main+0xc26>
	else if (__tmp > 65535)
    2d30:	6b a1       	ldd	r22, Y+35	; 0x23
    2d32:	7c a1       	ldd	r23, Y+36	; 0x24
    2d34:	8d a1       	ldd	r24, Y+37	; 0x25
    2d36:	9e a1       	ldd	r25, Y+38	; 0x26
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	3f ef       	ldi	r19, 0xFF	; 255
    2d3c:	4f e7       	ldi	r20, 0x7F	; 127
    2d3e:	57 e4       	ldi	r21, 0x47	; 71
    2d40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d44:	18 16       	cp	r1, r24
    2d46:	4c f5       	brge	.+82     	; 0x2d9a <main+0xc12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d48:	6f a1       	ldd	r22, Y+39	; 0x27
    2d4a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d4c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e2       	ldi	r20, 0x20	; 32
    2d56:	51 e4       	ldi	r21, 0x41	; 65
    2d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	bc 01       	movw	r22, r24
    2d62:	cd 01       	movw	r24, r26
    2d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	9a a3       	std	Y+34, r25	; 0x22
    2d6e:	89 a3       	std	Y+33, r24	; 0x21
    2d70:	0f c0       	rjmp	.+30     	; 0x2d90 <main+0xc08>
    2d72:	89 e1       	ldi	r24, 0x19	; 25
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	98 a3       	std	Y+32, r25	; 0x20
    2d78:	8f 8f       	std	Y+31, r24	; 0x1f
    2d7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d7c:	98 a1       	ldd	r25, Y+32	; 0x20
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	f1 f7       	brne	.-4      	; 0x2d7e <main+0xbf6>
    2d82:	98 a3       	std	Y+32, r25	; 0x20
    2d84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d86:	89 a1       	ldd	r24, Y+33	; 0x21
    2d88:	9a a1       	ldd	r25, Y+34	; 0x22
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	9a a3       	std	Y+34, r25	; 0x22
    2d8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d90:	89 a1       	ldd	r24, Y+33	; 0x21
    2d92:	9a a1       	ldd	r25, Y+34	; 0x22
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	69 f7       	brne	.-38     	; 0x2d72 <main+0xbea>
    2d98:	2f ca       	rjmp	.-2978   	; 0x21f8 <main+0x70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d9c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d9e:	8d a1       	ldd	r24, Y+37	; 0x25
    2da0:	9e a1       	ldd	r25, Y+38	; 0x26
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9a a3       	std	Y+34, r25	; 0x22
    2dac:	89 a3       	std	Y+33, r24	; 0x21
    2dae:	89 a1       	ldd	r24, Y+33	; 0x21
    2db0:	9a a1       	ldd	r25, Y+34	; 0x22
    2db2:	9e 8f       	std	Y+30, r25	; 0x1e
    2db4:	8d 8f       	std	Y+29, r24	; 0x1d
    2db6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2db8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <main+0xc32>
    2dbe:	9e 8f       	std	Y+30, r25	; 0x1e
    2dc0:	8d 8f       	std	Y+29, r24	; 0x1d
    2dc2:	1a ca       	rjmp	.-3020   	; 0x21f8 <main+0x70>
				_delay_ms(1500);
			}
			else if (!strcmp(saved,"rock"))
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	ef 57       	subi	r30, 0x7F	; 127
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	80 81       	ld	r24, Z
    2dcc:	88 2f       	mov	r24, r24
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	23 e8       	ldi	r18, 0x83	; 131
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	b9 01       	movw	r22, r18
    2dd6:	0e 94 bb 18 	call	0x3176	; 0x3176 <strcmp>
    2dda:	00 97       	sbiw	r24, 0x00	; 0
    2ddc:	09 f0       	breq	.+2      	; 0x2de0 <main+0xc58>
    2dde:	7a c0       	rjmp	.+244    	; 0x2ed4 <main+0xd4c>
			{
				LCD_vidwritestring(1,3,"LOSE");
    2de0:	2a e9       	ldi	r18, 0x9A	; 154
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	63 e0       	ldi	r22, 0x03	; 3
    2de8:	a9 01       	movw	r20, r18
    2dea:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_vidwritestring>
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e8       	ldi	r25, 0x80	; 128
    2df2:	ab eb       	ldi	r26, 0xBB	; 187
    2df4:	b4 e4       	ldi	r27, 0x44	; 68
    2df6:	89 8f       	std	Y+25, r24	; 0x19
    2df8:	9a 8f       	std	Y+26, r25	; 0x1a
    2dfa:	ab 8f       	std	Y+27, r26	; 0x1b
    2dfc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfe:	69 8d       	ldd	r22, Y+25	; 0x19
    2e00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	4a e7       	ldi	r20, 0x7A	; 122
    2e0c:	53 e4       	ldi	r21, 0x43	; 67
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	8d 8b       	std	Y+21, r24	; 0x15
    2e18:	9e 8b       	std	Y+22, r25	; 0x16
    2e1a:	af 8b       	std	Y+23, r26	; 0x17
    2e1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e20:	7e 89       	ldd	r23, Y+22	; 0x16
    2e22:	8f 89       	ldd	r24, Y+23	; 0x17
    2e24:	98 8d       	ldd	r25, Y+24	; 0x18
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e8       	ldi	r20, 0x80	; 128
    2e2c:	5f e3       	ldi	r21, 0x3F	; 63
    2e2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e32:	88 23       	and	r24, r24
    2e34:	2c f4       	brge	.+10     	; 0x2e40 <main+0xcb8>
		__ticks = 1;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	9c 8b       	std	Y+20, r25	; 0x14
    2e3c:	8b 8b       	std	Y+19, r24	; 0x13
    2e3e:	3f c0       	rjmp	.+126    	; 0x2ebe <main+0xd36>
	else if (__tmp > 65535)
    2e40:	6d 89       	ldd	r22, Y+21	; 0x15
    2e42:	7e 89       	ldd	r23, Y+22	; 0x16
    2e44:	8f 89       	ldd	r24, Y+23	; 0x17
    2e46:	98 8d       	ldd	r25, Y+24	; 0x18
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	3f ef       	ldi	r19, 0xFF	; 255
    2e4c:	4f e7       	ldi	r20, 0x7F	; 127
    2e4e:	57 e4       	ldi	r21, 0x47	; 71
    2e50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e54:	18 16       	cp	r1, r24
    2e56:	4c f5       	brge	.+82     	; 0x2eaa <main+0xd22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e58:	69 8d       	ldd	r22, Y+25	; 0x19
    2e5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e2       	ldi	r20, 0x20	; 32
    2e66:	51 e4       	ldi	r21, 0x41	; 65
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	9c 8b       	std	Y+20, r25	; 0x14
    2e7e:	8b 8b       	std	Y+19, r24	; 0x13
    2e80:	0f c0       	rjmp	.+30     	; 0x2ea0 <main+0xd18>
    2e82:	89 e1       	ldi	r24, 0x19	; 25
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	9a 8b       	std	Y+18, r25	; 0x12
    2e88:	89 8b       	std	Y+17, r24	; 0x11
    2e8a:	89 89       	ldd	r24, Y+17	; 0x11
    2e8c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <main+0xd06>
    2e92:	9a 8b       	std	Y+18, r25	; 0x12
    2e94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e96:	8b 89       	ldd	r24, Y+19	; 0x13
    2e98:	9c 89       	ldd	r25, Y+20	; 0x14
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	9c 8b       	std	Y+20, r25	; 0x14
    2e9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	69 f7       	brne	.-38     	; 0x2e82 <main+0xcfa>
    2ea8:	a7 c9       	rjmp	.-3250   	; 0x21f8 <main+0x70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2eac:	7e 89       	ldd	r23, Y+22	; 0x16
    2eae:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9c 8b       	std	Y+20, r25	; 0x14
    2ebc:	8b 8b       	std	Y+19, r24	; 0x13
    2ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec2:	98 8b       	std	Y+16, r25	; 0x10
    2ec4:	8f 87       	std	Y+15, r24	; 0x0f
    2ec6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ec8:	98 89       	ldd	r25, Y+16	; 0x10
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <main+0xd42>
    2ece:	98 8b       	std	Y+16, r25	; 0x10
    2ed0:	8f 87       	std	Y+15, r24	; 0x0f
    2ed2:	92 c9       	rjmp	.-3292   	; 0x21f8 <main+0x70>
				_delay_ms(1500);
			}
			else
			{
				LCD_vidwritestring(1,3,"STALEMATE");
    2ed4:	2f e9       	ldi	r18, 0x9F	; 159
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	63 e0       	ldi	r22, 0x03	; 3
    2edc:	a9 01       	movw	r20, r18
    2ede:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_vidwritestring>
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	90 e8       	ldi	r25, 0x80	; 128
    2ee6:	ab eb       	ldi	r26, 0xBB	; 187
    2ee8:	b4 e4       	ldi	r27, 0x44	; 68
    2eea:	8b 87       	std	Y+11, r24	; 0x0b
    2eec:	9c 87       	std	Y+12, r25	; 0x0c
    2eee:	ad 87       	std	Y+13, r26	; 0x0d
    2ef0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	4a e7       	ldi	r20, 0x7A	; 122
    2f00:	53 e4       	ldi	r21, 0x43	; 67
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	8f 83       	std	Y+7, r24	; 0x07
    2f0c:	98 87       	std	Y+8, r25	; 0x08
    2f0e:	a9 87       	std	Y+9, r26	; 0x09
    2f10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f12:	6f 81       	ldd	r22, Y+7	; 0x07
    2f14:	78 85       	ldd	r23, Y+8	; 0x08
    2f16:	89 85       	ldd	r24, Y+9	; 0x09
    2f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	40 e8       	ldi	r20, 0x80	; 128
    2f20:	5f e3       	ldi	r21, 0x3F	; 63
    2f22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f26:	88 23       	and	r24, r24
    2f28:	2c f4       	brge	.+10     	; 0x2f34 <main+0xdac>
		__ticks = 1;
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	9e 83       	std	Y+6, r25	; 0x06
    2f30:	8d 83       	std	Y+5, r24	; 0x05
    2f32:	3f c0       	rjmp	.+126    	; 0x2fb2 <main+0xe2a>
	else if (__tmp > 65535)
    2f34:	6f 81       	ldd	r22, Y+7	; 0x07
    2f36:	78 85       	ldd	r23, Y+8	; 0x08
    2f38:	89 85       	ldd	r24, Y+9	; 0x09
    2f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	3f ef       	ldi	r19, 0xFF	; 255
    2f40:	4f e7       	ldi	r20, 0x7F	; 127
    2f42:	57 e4       	ldi	r21, 0x47	; 71
    2f44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f48:	18 16       	cp	r1, r24
    2f4a:	4c f5       	brge	.+82     	; 0x2f9e <main+0xe16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	40 e2       	ldi	r20, 0x20	; 32
    2f5a:	51 e4       	ldi	r21, 0x41	; 65
    2f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	bc 01       	movw	r22, r24
    2f66:	cd 01       	movw	r24, r26
    2f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	9e 83       	std	Y+6, r25	; 0x06
    2f72:	8d 83       	std	Y+5, r24	; 0x05
    2f74:	0f c0       	rjmp	.+30     	; 0x2f94 <main+0xe0c>
    2f76:	89 e1       	ldi	r24, 0x19	; 25
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	9c 83       	std	Y+4, r25	; 0x04
    2f7c:	8b 83       	std	Y+3, r24	; 0x03
    2f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f80:	9c 81       	ldd	r25, Y+4	; 0x04
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	f1 f7       	brne	.-4      	; 0x2f82 <main+0xdfa>
    2f86:	9c 83       	std	Y+4, r25	; 0x04
    2f88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	9e 83       	std	Y+6, r25	; 0x06
    2f92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f94:	8d 81       	ldd	r24, Y+5	; 0x05
    2f96:	9e 81       	ldd	r25, Y+6	; 0x06
    2f98:	00 97       	sbiw	r24, 0x00	; 0
    2f9a:	69 f7       	brne	.-38     	; 0x2f76 <main+0xdee>
    2f9c:	2d c9       	rjmp	.-3494   	; 0x21f8 <main+0x70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa0:	78 85       	ldd	r23, Y+8	; 0x08
    2fa2:	89 85       	ldd	r24, Y+9	; 0x09
    2fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	9e 83       	std	Y+6, r25	; 0x06
    2fb0:	8d 83       	std	Y+5, r24	; 0x05
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb6:	9a 83       	std	Y+2, r25	; 0x02
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	f1 f7       	brne	.-4      	; 0x2fbe <main+0xe36>
    2fc2:	9a 83       	std	Y+2, r25	; 0x02
    2fc4:	89 83       	std	Y+1, r24	; 0x01
    2fc6:	18 c9       	rjmp	.-3536   	; 0x21f8 <main+0x70>

00002fc8 <UART_init>:
#include "uart.h"

#define UBRR_VALUE ((Frequancy/(8*USART_BAUDRATE))-1)

void UART_init(void)
{
    2fc8:	df 93       	push	r29
    2fca:	cf 93       	push	r28
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRA,U2X);    /* Configure UART double speed rate*/
    2fd0:	ab e2       	ldi	r26, 0x2B	; 43
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	eb e2       	ldi	r30, 0x2B	; 43
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	82 60       	ori	r24, 0x02	; 2
    2fdc:	8c 93       	st	X, r24
	/* RXCIE = TXCIE = UDRIE = 0  (No interrupt Mode)
	 * RXEN = TXEN = 1 (Enable receive and transmit)
	 * UCSZ2 = 0 (8-bit data size)
	 * RXB8 & TXB8 not used
	 */
	UCSRB = 0;
    2fde:	ea e2       	ldi	r30, 0x2A	; 42
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	10 82       	st	Z, r1
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2fe4:	ea e2       	ldi	r30, 0x2A	; 42
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	88 e1       	ldi	r24, 0x18	; 24
    2fea:	80 83       	st	Z, r24
	 * UPM1:0 = 0 (Disable parity)
	 * USBS   = 0 (One bit stop bit)
	 * UCSZ1  = UCSZ0 = 1 (8-bit data size)
	 * UCPOL  = 0  (0 for Asynch. mode)
	 */
	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1 <<UCSZ0);
    2fec:	e0 e4       	ldi	r30, 0x40	; 64
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	86 e8       	ldi	r24, 0x86	; 134
    2ff2:	80 83       	st	Z, r24

	/* Write data in UBRR*/
	UBRRH = 0;
    2ff4:	e0 e4       	ldi	r30, 0x40	; 64
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	10 82       	st	Z, r1
	UBRRL = 12;
    2ffa:	e9 e2       	ldi	r30, 0x29	; 41
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	8c e0       	ldi	r24, 0x0C	; 12
    3000:	80 83       	st	Z, r24
}
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <UART_sendByte>:



void UART_sendByte(const u8 data)
{
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	0f 92       	push	r0
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE is 1 once UDR register is empty*/
	while(!GET_BIT(UCSRA,UDRE));
    3014:	eb e2       	ldi	r30, 0x2B	; 43
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	82 95       	swap	r24
    301c:	86 95       	lsr	r24
    301e:	87 70       	andi	r24, 0x07	; 7
    3020:	88 23       	and	r24, r24
    3022:	c1 f3       	breq	.-16     	; 0x3014 <UART_sendByte+0xc>
	/*Once polling finished (UDR is empty) load ur new data in the UDR register*/
	UDR = data;
    3024:	ec e2       	ldi	r30, 0x2C	; 44
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	80 83       	st	Z, r24
}
    302c:	0f 90       	pop	r0
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	08 95       	ret

00003034 <UART_recieveByte>:
u8   UART_recieveByte(void)
{
    3034:	df 93       	push	r29
    3036:	cf 93       	push	r28
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(UCSRA,RXC));
    303c:	eb e2       	ldi	r30, 0x2B	; 43
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	80 81       	ld	r24, Z
    3042:	88 23       	and	r24, r24
    3044:	dc f7       	brge	.-10     	; 0x303c <UART_recieveByte+0x8>
	return UDR;
    3046:	ec e2       	ldi	r30, 0x2C	; 44
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	80 81       	ld	r24, Z
}
    304c:	cf 91       	pop	r28
    304e:	df 91       	pop	r29
    3050:	08 95       	ret

00003052 <UART_sendString>:
void UART_sendString(const char* str)
{
    3052:	df 93       	push	r29
    3054:	cf 93       	push	r28
    3056:	00 d0       	rcall	.+0      	; 0x3058 <UART_sendString+0x6>
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	9a 83       	std	Y+2, r25	; 0x02
    305e:	89 83       	std	Y+1, r24	; 0x01
	while(*str != '0x00')
	{
		UART_sendByte(*str);
    3060:	e9 81       	ldd	r30, Y+1	; 0x01
    3062:	fa 81       	ldd	r31, Y+2	; 0x02
    3064:	80 81       	ld	r24, Z
    3066:	0e 94 04 18 	call	0x3008	; 0x3008 <UART_sendByte>
		str++;
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	9a 81       	ldd	r25, Y+2	; 0x02
    306e:	01 96       	adiw	r24, 0x01	; 1
    3070:	9a 83       	std	Y+2, r25	; 0x02
    3072:	89 83       	std	Y+1, r24	; 0x01
    3074:	f5 cf       	rjmp	.-22     	; 0x3060 <UART_sendString+0xe>

00003076 <UART_recieveString>:
	}
}

void UART_recieveString(char* str)
{
    3076:	0f 93       	push	r16
    3078:	1f 93       	push	r17
    307a:	df 93       	push	r29
    307c:	cf 93       	push	r28
    307e:	00 d0       	rcall	.+0      	; 0x3080 <UART_recieveString+0xa>
    3080:	0f 92       	push	r0
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	9b 83       	std	Y+3, r25	; 0x03
    3088:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    308a:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_recieveByte();
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	28 2f       	mov	r18, r24
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	8a 81       	ldd	r24, Y+2	; 0x02
    3094:	9b 81       	ldd	r25, Y+3	; 0x03
    3096:	8c 01       	movw	r16, r24
    3098:	02 0f       	add	r16, r18
    309a:	13 1f       	adc	r17, r19
    309c:	0e 94 1a 18 	call	0x3034	; 0x3034 <UART_recieveByte>
    30a0:	f8 01       	movw	r30, r16
    30a2:	80 83       	st	Z, r24
	while(str[i-1] != '0x00')
	{
		i++;
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	8f 5f       	subi	r24, 0xFF	; 255
    30a8:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_recieveByte();
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	28 2f       	mov	r18, r24
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	9b 81       	ldd	r25, Y+3	; 0x03
    30b4:	8c 01       	movw	r16, r24
    30b6:	02 0f       	add	r16, r18
    30b8:	13 1f       	adc	r17, r19
    30ba:	0e 94 1a 18 	call	0x3034	; 0x3034 <UART_recieveByte>
    30be:	f8 01       	movw	r30, r16
    30c0:	80 83       	st	Z, r24
    30c2:	f0 cf       	rjmp	.-32     	; 0x30a4 <UART_recieveString+0x2e>

000030c4 <__udivmodsi4>:
    30c4:	a1 e2       	ldi	r26, 0x21	; 33
    30c6:	1a 2e       	mov	r1, r26
    30c8:	aa 1b       	sub	r26, r26
    30ca:	bb 1b       	sub	r27, r27
    30cc:	fd 01       	movw	r30, r26
    30ce:	0d c0       	rjmp	.+26     	; 0x30ea <__udivmodsi4_ep>

000030d0 <__udivmodsi4_loop>:
    30d0:	aa 1f       	adc	r26, r26
    30d2:	bb 1f       	adc	r27, r27
    30d4:	ee 1f       	adc	r30, r30
    30d6:	ff 1f       	adc	r31, r31
    30d8:	a2 17       	cp	r26, r18
    30da:	b3 07       	cpc	r27, r19
    30dc:	e4 07       	cpc	r30, r20
    30de:	f5 07       	cpc	r31, r21
    30e0:	20 f0       	brcs	.+8      	; 0x30ea <__udivmodsi4_ep>
    30e2:	a2 1b       	sub	r26, r18
    30e4:	b3 0b       	sbc	r27, r19
    30e6:	e4 0b       	sbc	r30, r20
    30e8:	f5 0b       	sbc	r31, r21

000030ea <__udivmodsi4_ep>:
    30ea:	66 1f       	adc	r22, r22
    30ec:	77 1f       	adc	r23, r23
    30ee:	88 1f       	adc	r24, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	1a 94       	dec	r1
    30f4:	69 f7       	brne	.-38     	; 0x30d0 <__udivmodsi4_loop>
    30f6:	60 95       	com	r22
    30f8:	70 95       	com	r23
    30fa:	80 95       	com	r24
    30fc:	90 95       	com	r25
    30fe:	9b 01       	movw	r18, r22
    3100:	ac 01       	movw	r20, r24
    3102:	bd 01       	movw	r22, r26
    3104:	cf 01       	movw	r24, r30
    3106:	08 95       	ret

00003108 <__prologue_saves__>:
    3108:	2f 92       	push	r2
    310a:	3f 92       	push	r3
    310c:	4f 92       	push	r4
    310e:	5f 92       	push	r5
    3110:	6f 92       	push	r6
    3112:	7f 92       	push	r7
    3114:	8f 92       	push	r8
    3116:	9f 92       	push	r9
    3118:	af 92       	push	r10
    311a:	bf 92       	push	r11
    311c:	cf 92       	push	r12
    311e:	df 92       	push	r13
    3120:	ef 92       	push	r14
    3122:	ff 92       	push	r15
    3124:	0f 93       	push	r16
    3126:	1f 93       	push	r17
    3128:	cf 93       	push	r28
    312a:	df 93       	push	r29
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	ca 1b       	sub	r28, r26
    3132:	db 0b       	sbc	r29, r27
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	f8 94       	cli
    3138:	de bf       	out	0x3e, r29	; 62
    313a:	0f be       	out	0x3f, r0	; 63
    313c:	cd bf       	out	0x3d, r28	; 61
    313e:	09 94       	ijmp

00003140 <__epilogue_restores__>:
    3140:	2a 88       	ldd	r2, Y+18	; 0x12
    3142:	39 88       	ldd	r3, Y+17	; 0x11
    3144:	48 88       	ldd	r4, Y+16	; 0x10
    3146:	5f 84       	ldd	r5, Y+15	; 0x0f
    3148:	6e 84       	ldd	r6, Y+14	; 0x0e
    314a:	7d 84       	ldd	r7, Y+13	; 0x0d
    314c:	8c 84       	ldd	r8, Y+12	; 0x0c
    314e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3150:	aa 84       	ldd	r10, Y+10	; 0x0a
    3152:	b9 84       	ldd	r11, Y+9	; 0x09
    3154:	c8 84       	ldd	r12, Y+8	; 0x08
    3156:	df 80       	ldd	r13, Y+7	; 0x07
    3158:	ee 80       	ldd	r14, Y+6	; 0x06
    315a:	fd 80       	ldd	r15, Y+5	; 0x05
    315c:	0c 81       	ldd	r16, Y+4	; 0x04
    315e:	1b 81       	ldd	r17, Y+3	; 0x03
    3160:	aa 81       	ldd	r26, Y+2	; 0x02
    3162:	b9 81       	ldd	r27, Y+1	; 0x01
    3164:	ce 0f       	add	r28, r30
    3166:	d1 1d       	adc	r29, r1
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	f8 94       	cli
    316c:	de bf       	out	0x3e, r29	; 62
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	cd bf       	out	0x3d, r28	; 61
    3172:	ed 01       	movw	r28, r26
    3174:	08 95       	ret

00003176 <strcmp>:
    3176:	fb 01       	movw	r30, r22
    3178:	dc 01       	movw	r26, r24
    317a:	8d 91       	ld	r24, X+
    317c:	01 90       	ld	r0, Z+
    317e:	80 19       	sub	r24, r0
    3180:	01 10       	cpse	r0, r1
    3182:	d9 f3       	breq	.-10     	; 0x317a <strcmp+0x4>
    3184:	99 0b       	sbc	r25, r25
    3186:	08 95       	ret

00003188 <_exit>:
    3188:	f8 94       	cli

0000318a <__stop_program>:
    318a:	ff cf       	rjmp	.-2      	; 0x318a <__stop_program>
